
parking.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ff4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08006188  08006188  00016188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061c0  080061c0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080061c0  080061c0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080061c0  080061c0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061c0  080061c0  000161c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080061c4  080061c4  000161c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080061c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000002dc  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002e8  200002e8  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000f694  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002276  00000000  00000000  0002f713  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ce0  00000000  00000000  00031990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000a13  00000000  00000000  00032670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000204f6  00000000  00000000  00033083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00011b07  00000000  00000000  00053579  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c65b6  00000000  00000000  00065080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000034cc  00000000  00000000  0012b638  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004e  00000000  00000000  0012eb04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08006170 	.word	0x08006170

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08006170 	.word	0x08006170

080001d4 <Set_motor_RL_direction>:
 */
#include "main.h"
#include "DC_MOTOR.h"

void Set_motor_RL_direction(unsigned char dir)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
	if(dir==Right)
 80001de:	79fb      	ldrb	r3, [r7, #7]
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d10a      	bne.n	80001fa <Set_motor_RL_direction+0x26>
	{
		HAL_GPIO_WritePin(DC_PORT,IN1_PIN,1);
 80001e4:	2201      	movs	r2, #1
 80001e6:	2140      	movs	r1, #64	; 0x40
 80001e8:	480e      	ldr	r0, [pc, #56]	; (8000224 <Set_motor_RL_direction+0x50>)
 80001ea:	f001 ff01 	bl	8001ff0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DC_PORT, IN2_PIN,0);
 80001ee:	2200      	movs	r2, #0
 80001f0:	2180      	movs	r1, #128	; 0x80
 80001f2:	480c      	ldr	r0, [pc, #48]	; (8000224 <Set_motor_RL_direction+0x50>)
 80001f4:	f001 fefc 	bl	8001ff0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DC_PORT, IN2_PIN,1);
	}
	else{
		Stop_motor_RL();
	}
}
 80001f8:	e00f      	b.n	800021a <Set_motor_RL_direction+0x46>
	else if(dir==Left) {
 80001fa:	79fb      	ldrb	r3, [r7, #7]
 80001fc:	2b01      	cmp	r3, #1
 80001fe:	d10a      	bne.n	8000216 <Set_motor_RL_direction+0x42>
		HAL_GPIO_WritePin(DC_PORT,IN1_PIN,0);
 8000200:	2200      	movs	r2, #0
 8000202:	2140      	movs	r1, #64	; 0x40
 8000204:	4807      	ldr	r0, [pc, #28]	; (8000224 <Set_motor_RL_direction+0x50>)
 8000206:	f001 fef3 	bl	8001ff0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DC_PORT, IN2_PIN,1);
 800020a:	2201      	movs	r2, #1
 800020c:	2180      	movs	r1, #128	; 0x80
 800020e:	4805      	ldr	r0, [pc, #20]	; (8000224 <Set_motor_RL_direction+0x50>)
 8000210:	f001 feee 	bl	8001ff0 <HAL_GPIO_WritePin>
}
 8000214:	e001      	b.n	800021a <Set_motor_RL_direction+0x46>
		Stop_motor_RL();
 8000216:	f000 f835 	bl	8000284 <Stop_motor_RL>
}
 800021a:	bf00      	nop
 800021c:	3708      	adds	r7, #8
 800021e:	46bd      	mov	sp, r7
 8000220:	bd80      	pop	{r7, pc}
 8000222:	bf00      	nop
 8000224:	48000800 	.word	0x48000800

08000228 <Set_motor_FR_direction>:
void Set_motor_FR_direction(unsigned char dir)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b082      	sub	sp, #8
 800022c:	af00      	add	r7, sp, #0
 800022e:	4603      	mov	r3, r0
 8000230:	71fb      	strb	r3, [r7, #7]
	if(dir==Forward)
 8000232:	79fb      	ldrb	r3, [r7, #7]
 8000234:	2b00      	cmp	r3, #0
 8000236:	d10c      	bne.n	8000252 <Set_motor_FR_direction+0x2a>
	{


		HAL_GPIO_WritePin(DC_PORT, IN3_PIN,0);
 8000238:	2200      	movs	r2, #0
 800023a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800023e:	4810      	ldr	r0, [pc, #64]	; (8000280 <Set_motor_FR_direction+0x58>)
 8000240:	f001 fed6 	bl	8001ff0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DC_PORT, IN4_PIN,1);
 8000244:	2201      	movs	r2, #1
 8000246:	f44f 7100 	mov.w	r1, #512	; 0x200
 800024a:	480d      	ldr	r0, [pc, #52]	; (8000280 <Set_motor_FR_direction+0x58>)
 800024c:	f001 fed0 	bl	8001ff0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DC_PORT, IN4_PIN,0);
	}
	else{
		Stop_motor_FR();
	}
}
 8000250:	e011      	b.n	8000276 <Set_motor_FR_direction+0x4e>
	else if(dir==Reverse) {
 8000252:	79fb      	ldrb	r3, [r7, #7]
 8000254:	2b01      	cmp	r3, #1
 8000256:	d10c      	bne.n	8000272 <Set_motor_FR_direction+0x4a>
		HAL_GPIO_WritePin(DC_PORT, IN3_PIN,1);
 8000258:	2201      	movs	r2, #1
 800025a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800025e:	4808      	ldr	r0, [pc, #32]	; (8000280 <Set_motor_FR_direction+0x58>)
 8000260:	f001 fec6 	bl	8001ff0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DC_PORT, IN4_PIN,0);
 8000264:	2200      	movs	r2, #0
 8000266:	f44f 7100 	mov.w	r1, #512	; 0x200
 800026a:	4805      	ldr	r0, [pc, #20]	; (8000280 <Set_motor_FR_direction+0x58>)
 800026c:	f001 fec0 	bl	8001ff0 <HAL_GPIO_WritePin>
}
 8000270:	e001      	b.n	8000276 <Set_motor_FR_direction+0x4e>
		Stop_motor_FR();
 8000272:	f000 f817 	bl	80002a4 <Stop_motor_FR>
}
 8000276:	bf00      	nop
 8000278:	3708      	adds	r7, #8
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}
 800027e:	bf00      	nop
 8000280:	48000800 	.word	0x48000800

08000284 <Stop_motor_RL>:

void Stop_motor_RL()
{
 8000284:	b580      	push	{r7, lr}
 8000286:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DC_PORT,IN1_PIN, 0);
 8000288:	2200      	movs	r2, #0
 800028a:	2140      	movs	r1, #64	; 0x40
 800028c:	4804      	ldr	r0, [pc, #16]	; (80002a0 <Stop_motor_RL+0x1c>)
 800028e:	f001 feaf 	bl	8001ff0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DC_PORT,IN2_PIN, 0);
 8000292:	2200      	movs	r2, #0
 8000294:	2180      	movs	r1, #128	; 0x80
 8000296:	4802      	ldr	r0, [pc, #8]	; (80002a0 <Stop_motor_RL+0x1c>)
 8000298:	f001 feaa 	bl	8001ff0 <HAL_GPIO_WritePin>
}
 800029c:	bf00      	nop
 800029e:	bd80      	pop	{r7, pc}
 80002a0:	48000800 	.word	0x48000800

080002a4 <Stop_motor_FR>:
void Stop_motor_FR()
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DC_PORT, IN3_PIN, 0);
 80002a8:	2200      	movs	r2, #0
 80002aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002ae:	4805      	ldr	r0, [pc, #20]	; (80002c4 <Stop_motor_FR+0x20>)
 80002b0:	f001 fe9e 	bl	8001ff0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DC_PORT, IN4_PIN, 0);
 80002b4:	2200      	movs	r2, #0
 80002b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002ba:	4802      	ldr	r0, [pc, #8]	; (80002c4 <Stop_motor_FR+0x20>)
 80002bc:	f001 fe98 	bl	8001ff0 <HAL_GPIO_WritePin>


}
 80002c0:	bf00      	nop
 80002c2:	bd80      	pop	{r7, pc}
 80002c4:	48000800 	.word	0x48000800

080002c8 <Set_pwm_duty_FR_motor>:
  *
  *
  *   Set_pwm_duty__motor(htim1, TIM_CHANNEL_1, 40, 0.65);
  */
void Set_pwm_duty_FR_motor(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t period, float duty)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b084      	sub	sp, #16
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	60f8      	str	r0, [r7, #12]
 80002d0:	60b9      	str	r1, [r7, #8]
 80002d2:	607a      	str	r2, [r7, #4]
 80002d4:	ed87 0a00 	vstr	s0, [r7]
//	/*factor==10*/
//	//duty*=250;
//	//TIM1->CCR4=duty;
////40//.5//.2

	htim->Instance->ARR = period;
 80002d8:	68fb      	ldr	r3, [r7, #12]
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	687a      	ldr	r2, [r7, #4]
 80002de:	62da      	str	r2, [r3, #44]	; 0x2c
	htim->Instance->CCR1 = (uint32_t)(period * duty);
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	ee07 3a90 	vmov	s15, r3
 80002e6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80002ea:	edd7 7a00 	vldr	s15, [r7]
 80002ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80002f2:	68fb      	ldr	r3, [r7, #12]
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80002fa:	ee17 2a90 	vmov	r2, s15
 80002fe:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(htim, Channel);
 8000300:	68b9      	ldr	r1, [r7, #8]
 8000302:	68f8      	ldr	r0, [r7, #12]
 8000304:	f003 fc06 	bl	8003b14 <HAL_TIM_PWM_Start>


}
 8000308:	bf00      	nop
 800030a:	3710      	adds	r7, #16
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}

08000310 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b08a      	sub	sp, #40	; 0x28
 8000314:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000316:	f107 0314 	add.w	r3, r7, #20
 800031a:	2200      	movs	r2, #0
 800031c:	601a      	str	r2, [r3, #0]
 800031e:	605a      	str	r2, [r3, #4]
 8000320:	609a      	str	r2, [r3, #8]
 8000322:	60da      	str	r2, [r3, #12]
 8000324:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000326:	4b42      	ldr	r3, [pc, #264]	; (8000430 <MX_GPIO_Init+0x120>)
 8000328:	695b      	ldr	r3, [r3, #20]
 800032a:	4a41      	ldr	r2, [pc, #260]	; (8000430 <MX_GPIO_Init+0x120>)
 800032c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000330:	6153      	str	r3, [r2, #20]
 8000332:	4b3f      	ldr	r3, [pc, #252]	; (8000430 <MX_GPIO_Init+0x120>)
 8000334:	695b      	ldr	r3, [r3, #20]
 8000336:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800033a:	613b      	str	r3, [r7, #16]
 800033c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800033e:	4b3c      	ldr	r3, [pc, #240]	; (8000430 <MX_GPIO_Init+0x120>)
 8000340:	695b      	ldr	r3, [r3, #20]
 8000342:	4a3b      	ldr	r2, [pc, #236]	; (8000430 <MX_GPIO_Init+0x120>)
 8000344:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000348:	6153      	str	r3, [r2, #20]
 800034a:	4b39      	ldr	r3, [pc, #228]	; (8000430 <MX_GPIO_Init+0x120>)
 800034c:	695b      	ldr	r3, [r3, #20]
 800034e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000352:	60fb      	str	r3, [r7, #12]
 8000354:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000356:	4b36      	ldr	r3, [pc, #216]	; (8000430 <MX_GPIO_Init+0x120>)
 8000358:	695b      	ldr	r3, [r3, #20]
 800035a:	4a35      	ldr	r2, [pc, #212]	; (8000430 <MX_GPIO_Init+0x120>)
 800035c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000360:	6153      	str	r3, [r2, #20]
 8000362:	4b33      	ldr	r3, [pc, #204]	; (8000430 <MX_GPIO_Init+0x120>)
 8000364:	695b      	ldr	r3, [r3, #20]
 8000366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800036a:	60bb      	str	r3, [r7, #8]
 800036c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800036e:	4b30      	ldr	r3, [pc, #192]	; (8000430 <MX_GPIO_Init+0x120>)
 8000370:	695b      	ldr	r3, [r3, #20]
 8000372:	4a2f      	ldr	r2, [pc, #188]	; (8000430 <MX_GPIO_Init+0x120>)
 8000374:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000378:	6153      	str	r3, [r2, #20]
 800037a:	4b2d      	ldr	r3, [pc, #180]	; (8000430 <MX_GPIO_Init+0x120>)
 800037c:	695b      	ldr	r3, [r3, #20]
 800037e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000382:	607b      	str	r3, [r7, #4]
 8000384:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TRIGGER1_Pin|TRIGGER2_Pin|TRIGGER3_Pin|TRIGGER4_Pin
 8000386:	2200      	movs	r2, #0
 8000388:	f240 31de 	movw	r1, #990	; 0x3de
 800038c:	4829      	ldr	r0, [pc, #164]	; (8000434 <MX_GPIO_Init+0x124>)
 800038e:	f001 fe2f 	bl	8001ff0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000392:	2200      	movs	r2, #0
 8000394:	2120      	movs	r1, #32
 8000396:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800039a:	f001 fe29 	bl	8001ff0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800039e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80003a4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80003a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003aa:	2300      	movs	r3, #0
 80003ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80003ae:	f107 0314 	add.w	r3, r7, #20
 80003b2:	4619      	mov	r1, r3
 80003b4:	481f      	ldr	r0, [pc, #124]	; (8000434 <MX_GPIO_Init+0x124>)
 80003b6:	f001 fc79 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PC6 PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = TRIGGER1_Pin|TRIGGER2_Pin|TRIGGER3_Pin|TRIGGER4_Pin
 80003ba:	f240 33de 	movw	r3, #990	; 0x3de
 80003be:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003c0:	2301      	movs	r3, #1
 80003c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c4:	2300      	movs	r3, #0
 80003c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003c8:	2300      	movs	r3, #0
 80003ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003cc:	f107 0314 	add.w	r3, r7, #20
 80003d0:	4619      	mov	r1, r3
 80003d2:	4818      	ldr	r0, [pc, #96]	; (8000434 <MX_GPIO_Init+0x124>)
 80003d4:	f001 fc6a 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 80003d8:	2312      	movs	r3, #18
 80003da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003dc:	2300      	movs	r3, #0
 80003de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e0:	2300      	movs	r3, #0
 80003e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003e4:	f107 0314 	add.w	r3, r7, #20
 80003e8:	4619      	mov	r1, r3
 80003ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003ee:	f001 fc5d 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80003f2:	2320      	movs	r3, #32
 80003f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003f6:	2301      	movs	r3, #1
 80003f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003fa:	2300      	movs	r3, #0
 80003fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003fe:	2300      	movs	r3, #0
 8000400:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000402:	f107 0314 	add.w	r3, r7, #20
 8000406:	4619      	mov	r1, r3
 8000408:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800040c:	f001 fc4e 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000410:	2320      	movs	r3, #32
 8000412:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000414:	2300      	movs	r3, #0
 8000416:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000418:	2300      	movs	r3, #0
 800041a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800041c:	f107 0314 	add.w	r3, r7, #20
 8000420:	4619      	mov	r1, r3
 8000422:	4804      	ldr	r0, [pc, #16]	; (8000434 <MX_GPIO_Init+0x124>)
 8000424:	f001 fc42 	bl	8001cac <HAL_GPIO_Init>

}
 8000428:	bf00      	nop
 800042a:	3728      	adds	r7, #40	; 0x28
 800042c:	46bd      	mov	sp, r7
 800042e:	bd80      	pop	{r7, pc}
 8000430:	40021000 	.word	0x40021000
 8000434:	48000800 	.word	0x48000800

08000438 <HAL_TIM_IC_CaptureCallback>:
uint16_t t2[4];
uint16_t diff[4];
uint16_t d[4];
uint16_t trig_flag=0;
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)	// ISR for timer1
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b082      	sub	sp, #8
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
	//	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
	if (htim->Instance == TIM2) {
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000448:	d14b      	bne.n	80004e2 <HAL_TIM_IC_CaptureCallback+0xaa>
		// Check if the callback is triggered by the correct timer (TIMx)
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	7f1b      	ldrb	r3, [r3, #28]
 800044e:	2b01      	cmp	r3, #1
 8000450:	f040 814f 	bne.w	80006f2 <HAL_TIM_IC_CaptureCallback+0x2ba>
			// Check if the callback is triggered by the correct channel (x)
			if(count[0] == 0)
 8000454:	4b92      	ldr	r3, [pc, #584]	; (80006a0 <HAL_TIM_IC_CaptureCallback+0x268>)
 8000456:	781b      	ldrb	r3, [r3, #0]
 8000458:	2b00      	cmp	r3, #0
 800045a:	d10b      	bne.n	8000474 <HAL_TIM_IC_CaptureCallback+0x3c>
			{
				t1[0]=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800045c:	2100      	movs	r1, #0
 800045e:	6878      	ldr	r0, [r7, #4]
 8000460:	f004 f9aa 	bl	80047b8 <HAL_TIM_ReadCapturedValue>
 8000464:	4603      	mov	r3, r0
 8000466:	b29a      	uxth	r2, r3
 8000468:	4b8e      	ldr	r3, [pc, #568]	; (80006a4 <HAL_TIM_IC_CaptureCallback+0x26c>)
 800046a:	801a      	strh	r2, [r3, #0]
				count[0]=1;
 800046c:	4b8c      	ldr	r3, [pc, #560]	; (80006a0 <HAL_TIM_IC_CaptureCallback+0x268>)
 800046e:	2201      	movs	r2, #1
 8000470:	701a      	strb	r2, [r3, #0]
	//		}
	//		d[3]=diff/58;
	//		//d[0]=diff/58;
	//		trig_flag++;
	//	}
}
 8000472:	e13e      	b.n	80006f2 <HAL_TIM_IC_CaptureCallback+0x2ba>
			else if(count[0] == 1)
 8000474:	4b8a      	ldr	r3, [pc, #552]	; (80006a0 <HAL_TIM_IC_CaptureCallback+0x268>)
 8000476:	781b      	ldrb	r3, [r3, #0]
 8000478:	2b01      	cmp	r3, #1
 800047a:	f040 813a 	bne.w	80006f2 <HAL_TIM_IC_CaptureCallback+0x2ba>
				t2[0]=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800047e:	2100      	movs	r1, #0
 8000480:	6878      	ldr	r0, [r7, #4]
 8000482:	f004 f999 	bl	80047b8 <HAL_TIM_ReadCapturedValue>
 8000486:	4603      	mov	r3, r0
 8000488:	b29a      	uxth	r2, r3
 800048a:	4b87      	ldr	r3, [pc, #540]	; (80006a8 <HAL_TIM_IC_CaptureCallback+0x270>)
 800048c:	801a      	strh	r2, [r3, #0]
				count[0]=0;
 800048e:	4b84      	ldr	r3, [pc, #528]	; (80006a0 <HAL_TIM_IC_CaptureCallback+0x268>)
 8000490:	2200      	movs	r2, #0
 8000492:	701a      	strb	r2, [r3, #0]
				if(t2[0]>t1[0])
 8000494:	4b84      	ldr	r3, [pc, #528]	; (80006a8 <HAL_TIM_IC_CaptureCallback+0x270>)
 8000496:	881a      	ldrh	r2, [r3, #0]
 8000498:	4b82      	ldr	r3, [pc, #520]	; (80006a4 <HAL_TIM_IC_CaptureCallback+0x26c>)
 800049a:	881b      	ldrh	r3, [r3, #0]
 800049c:	429a      	cmp	r2, r3
 800049e:	d908      	bls.n	80004b2 <HAL_TIM_IC_CaptureCallback+0x7a>
					diff[0]=t2[0]-t1[0];
 80004a0:	4b81      	ldr	r3, [pc, #516]	; (80006a8 <HAL_TIM_IC_CaptureCallback+0x270>)
 80004a2:	881a      	ldrh	r2, [r3, #0]
 80004a4:	4b7f      	ldr	r3, [pc, #508]	; (80006a4 <HAL_TIM_IC_CaptureCallback+0x26c>)
 80004a6:	881b      	ldrh	r3, [r3, #0]
 80004a8:	1ad3      	subs	r3, r2, r3
 80004aa:	b29a      	uxth	r2, r3
 80004ac:	4b7f      	ldr	r3, [pc, #508]	; (80006ac <HAL_TIM_IC_CaptureCallback+0x274>)
 80004ae:	801a      	strh	r2, [r3, #0]
 80004b0:	e00d      	b.n	80004ce <HAL_TIM_IC_CaptureCallback+0x96>
				else if(t1[0]>t2[0])
 80004b2:	4b7c      	ldr	r3, [pc, #496]	; (80006a4 <HAL_TIM_IC_CaptureCallback+0x26c>)
 80004b4:	881a      	ldrh	r2, [r3, #0]
 80004b6:	4b7c      	ldr	r3, [pc, #496]	; (80006a8 <HAL_TIM_IC_CaptureCallback+0x270>)
 80004b8:	881b      	ldrh	r3, [r3, #0]
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d907      	bls.n	80004ce <HAL_TIM_IC_CaptureCallback+0x96>
					diff[0] = ((0xffff-t1[0])+t2[0])+1;
 80004be:	4b7a      	ldr	r3, [pc, #488]	; (80006a8 <HAL_TIM_IC_CaptureCallback+0x270>)
 80004c0:	881a      	ldrh	r2, [r3, #0]
 80004c2:	4b78      	ldr	r3, [pc, #480]	; (80006a4 <HAL_TIM_IC_CaptureCallback+0x26c>)
 80004c4:	881b      	ldrh	r3, [r3, #0]
 80004c6:	1ad3      	subs	r3, r2, r3
 80004c8:	b29a      	uxth	r2, r3
 80004ca:	4b78      	ldr	r3, [pc, #480]	; (80006ac <HAL_TIM_IC_CaptureCallback+0x274>)
 80004cc:	801a      	strh	r2, [r3, #0]
				d[0]=diff[0]/58;
 80004ce:	4b77      	ldr	r3, [pc, #476]	; (80006ac <HAL_TIM_IC_CaptureCallback+0x274>)
 80004d0:	881b      	ldrh	r3, [r3, #0]
 80004d2:	4a77      	ldr	r2, [pc, #476]	; (80006b0 <HAL_TIM_IC_CaptureCallback+0x278>)
 80004d4:	fba2 2303 	umull	r2, r3, r2, r3
 80004d8:	095b      	lsrs	r3, r3, #5
 80004da:	b29a      	uxth	r2, r3
 80004dc:	4b75      	ldr	r3, [pc, #468]	; (80006b4 <HAL_TIM_IC_CaptureCallback+0x27c>)
 80004de:	801a      	strh	r2, [r3, #0]
}
 80004e0:	e107      	b.n	80006f2 <HAL_TIM_IC_CaptureCallback+0x2ba>
	else if (htim->Instance == TIM3) {
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	4a74      	ldr	r2, [pc, #464]	; (80006b8 <HAL_TIM_IC_CaptureCallback+0x280>)
 80004e8:	4293      	cmp	r3, r2
 80004ea:	d14b      	bne.n	8000584 <HAL_TIM_IC_CaptureCallback+0x14c>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	7f1b      	ldrb	r3, [r3, #28]
 80004f0:	2b01      	cmp	r3, #1
 80004f2:	f040 80fe 	bne.w	80006f2 <HAL_TIM_IC_CaptureCallback+0x2ba>
			if(count[1] == 0)
 80004f6:	4b6a      	ldr	r3, [pc, #424]	; (80006a0 <HAL_TIM_IC_CaptureCallback+0x268>)
 80004f8:	785b      	ldrb	r3, [r3, #1]
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d10b      	bne.n	8000516 <HAL_TIM_IC_CaptureCallback+0xde>
				t1[1]=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80004fe:	2100      	movs	r1, #0
 8000500:	6878      	ldr	r0, [r7, #4]
 8000502:	f004 f959 	bl	80047b8 <HAL_TIM_ReadCapturedValue>
 8000506:	4603      	mov	r3, r0
 8000508:	b29a      	uxth	r2, r3
 800050a:	4b66      	ldr	r3, [pc, #408]	; (80006a4 <HAL_TIM_IC_CaptureCallback+0x26c>)
 800050c:	805a      	strh	r2, [r3, #2]
				count[1]=1;
 800050e:	4b64      	ldr	r3, [pc, #400]	; (80006a0 <HAL_TIM_IC_CaptureCallback+0x268>)
 8000510:	2201      	movs	r2, #1
 8000512:	705a      	strb	r2, [r3, #1]
}
 8000514:	e0ed      	b.n	80006f2 <HAL_TIM_IC_CaptureCallback+0x2ba>
			else if(count[1] == 1)
 8000516:	4b62      	ldr	r3, [pc, #392]	; (80006a0 <HAL_TIM_IC_CaptureCallback+0x268>)
 8000518:	785b      	ldrb	r3, [r3, #1]
 800051a:	2b01      	cmp	r3, #1
 800051c:	f040 80e9 	bne.w	80006f2 <HAL_TIM_IC_CaptureCallback+0x2ba>
				t2[1]=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000520:	2100      	movs	r1, #0
 8000522:	6878      	ldr	r0, [r7, #4]
 8000524:	f004 f948 	bl	80047b8 <HAL_TIM_ReadCapturedValue>
 8000528:	4603      	mov	r3, r0
 800052a:	b29a      	uxth	r2, r3
 800052c:	4b5e      	ldr	r3, [pc, #376]	; (80006a8 <HAL_TIM_IC_CaptureCallback+0x270>)
 800052e:	805a      	strh	r2, [r3, #2]
				count[1]=0;
 8000530:	4b5b      	ldr	r3, [pc, #364]	; (80006a0 <HAL_TIM_IC_CaptureCallback+0x268>)
 8000532:	2200      	movs	r2, #0
 8000534:	705a      	strb	r2, [r3, #1]
				if(t2[1]>t1[1])
 8000536:	4b5c      	ldr	r3, [pc, #368]	; (80006a8 <HAL_TIM_IC_CaptureCallback+0x270>)
 8000538:	885a      	ldrh	r2, [r3, #2]
 800053a:	4b5a      	ldr	r3, [pc, #360]	; (80006a4 <HAL_TIM_IC_CaptureCallback+0x26c>)
 800053c:	885b      	ldrh	r3, [r3, #2]
 800053e:	429a      	cmp	r2, r3
 8000540:	d908      	bls.n	8000554 <HAL_TIM_IC_CaptureCallback+0x11c>
					diff[1]=t2[1]-t1[1];
 8000542:	4b59      	ldr	r3, [pc, #356]	; (80006a8 <HAL_TIM_IC_CaptureCallback+0x270>)
 8000544:	885a      	ldrh	r2, [r3, #2]
 8000546:	4b57      	ldr	r3, [pc, #348]	; (80006a4 <HAL_TIM_IC_CaptureCallback+0x26c>)
 8000548:	885b      	ldrh	r3, [r3, #2]
 800054a:	1ad3      	subs	r3, r2, r3
 800054c:	b29a      	uxth	r2, r3
 800054e:	4b57      	ldr	r3, [pc, #348]	; (80006ac <HAL_TIM_IC_CaptureCallback+0x274>)
 8000550:	805a      	strh	r2, [r3, #2]
 8000552:	e00d      	b.n	8000570 <HAL_TIM_IC_CaptureCallback+0x138>
				else if(t1[1]>t2[1])
 8000554:	4b53      	ldr	r3, [pc, #332]	; (80006a4 <HAL_TIM_IC_CaptureCallback+0x26c>)
 8000556:	885a      	ldrh	r2, [r3, #2]
 8000558:	4b53      	ldr	r3, [pc, #332]	; (80006a8 <HAL_TIM_IC_CaptureCallback+0x270>)
 800055a:	885b      	ldrh	r3, [r3, #2]
 800055c:	429a      	cmp	r2, r3
 800055e:	d907      	bls.n	8000570 <HAL_TIM_IC_CaptureCallback+0x138>
					diff[1] = ((0xffff-t1[1])+t2[1])+1;
 8000560:	4b51      	ldr	r3, [pc, #324]	; (80006a8 <HAL_TIM_IC_CaptureCallback+0x270>)
 8000562:	885a      	ldrh	r2, [r3, #2]
 8000564:	4b4f      	ldr	r3, [pc, #316]	; (80006a4 <HAL_TIM_IC_CaptureCallback+0x26c>)
 8000566:	885b      	ldrh	r3, [r3, #2]
 8000568:	1ad3      	subs	r3, r2, r3
 800056a:	b29a      	uxth	r2, r3
 800056c:	4b4f      	ldr	r3, [pc, #316]	; (80006ac <HAL_TIM_IC_CaptureCallback+0x274>)
 800056e:	805a      	strh	r2, [r3, #2]
				d[1]=diff[1]/58;
 8000570:	4b4e      	ldr	r3, [pc, #312]	; (80006ac <HAL_TIM_IC_CaptureCallback+0x274>)
 8000572:	885b      	ldrh	r3, [r3, #2]
 8000574:	4a4e      	ldr	r2, [pc, #312]	; (80006b0 <HAL_TIM_IC_CaptureCallback+0x278>)
 8000576:	fba2 2303 	umull	r2, r3, r2, r3
 800057a:	095b      	lsrs	r3, r3, #5
 800057c:	b29a      	uxth	r2, r3
 800057e:	4b4d      	ldr	r3, [pc, #308]	; (80006b4 <HAL_TIM_IC_CaptureCallback+0x27c>)
 8000580:	805a      	strh	r2, [r3, #2]
}
 8000582:	e0b6      	b.n	80006f2 <HAL_TIM_IC_CaptureCallback+0x2ba>
	else if (htim->Instance == TIM4) {
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a4c      	ldr	r2, [pc, #304]	; (80006bc <HAL_TIM_IC_CaptureCallback+0x284>)
 800058a:	4293      	cmp	r3, r2
 800058c:	d150      	bne.n	8000630 <HAL_TIM_IC_CaptureCallback+0x1f8>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800058e:	2120      	movs	r1, #32
 8000590:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000594:	f001 fd44 	bl	8002020 <HAL_GPIO_TogglePin>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	7f1b      	ldrb	r3, [r3, #28]
 800059c:	2b01      	cmp	r3, #1
 800059e:	f040 80a8 	bne.w	80006f2 <HAL_TIM_IC_CaptureCallback+0x2ba>
			if(count[2] == 0)
 80005a2:	4b3f      	ldr	r3, [pc, #252]	; (80006a0 <HAL_TIM_IC_CaptureCallback+0x268>)
 80005a4:	789b      	ldrb	r3, [r3, #2]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d10b      	bne.n	80005c2 <HAL_TIM_IC_CaptureCallback+0x18a>
				t1[2]=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80005aa:	2100      	movs	r1, #0
 80005ac:	6878      	ldr	r0, [r7, #4]
 80005ae:	f004 f903 	bl	80047b8 <HAL_TIM_ReadCapturedValue>
 80005b2:	4603      	mov	r3, r0
 80005b4:	b29a      	uxth	r2, r3
 80005b6:	4b3b      	ldr	r3, [pc, #236]	; (80006a4 <HAL_TIM_IC_CaptureCallback+0x26c>)
 80005b8:	809a      	strh	r2, [r3, #4]
				count[2]=1;
 80005ba:	4b39      	ldr	r3, [pc, #228]	; (80006a0 <HAL_TIM_IC_CaptureCallback+0x268>)
 80005bc:	2201      	movs	r2, #1
 80005be:	709a      	strb	r2, [r3, #2]
}
 80005c0:	e097      	b.n	80006f2 <HAL_TIM_IC_CaptureCallback+0x2ba>
			else if(count[2] == 1)
 80005c2:	4b37      	ldr	r3, [pc, #220]	; (80006a0 <HAL_TIM_IC_CaptureCallback+0x268>)
 80005c4:	789b      	ldrb	r3, [r3, #2]
 80005c6:	2b01      	cmp	r3, #1
 80005c8:	f040 8093 	bne.w	80006f2 <HAL_TIM_IC_CaptureCallback+0x2ba>
				t2[2]=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80005cc:	2100      	movs	r1, #0
 80005ce:	6878      	ldr	r0, [r7, #4]
 80005d0:	f004 f8f2 	bl	80047b8 <HAL_TIM_ReadCapturedValue>
 80005d4:	4603      	mov	r3, r0
 80005d6:	b29a      	uxth	r2, r3
 80005d8:	4b33      	ldr	r3, [pc, #204]	; (80006a8 <HAL_TIM_IC_CaptureCallback+0x270>)
 80005da:	809a      	strh	r2, [r3, #4]
				count[2]=0;
 80005dc:	4b30      	ldr	r3, [pc, #192]	; (80006a0 <HAL_TIM_IC_CaptureCallback+0x268>)
 80005de:	2200      	movs	r2, #0
 80005e0:	709a      	strb	r2, [r3, #2]
				if(t2[2]>t1[2])
 80005e2:	4b31      	ldr	r3, [pc, #196]	; (80006a8 <HAL_TIM_IC_CaptureCallback+0x270>)
 80005e4:	889a      	ldrh	r2, [r3, #4]
 80005e6:	4b2f      	ldr	r3, [pc, #188]	; (80006a4 <HAL_TIM_IC_CaptureCallback+0x26c>)
 80005e8:	889b      	ldrh	r3, [r3, #4]
 80005ea:	429a      	cmp	r2, r3
 80005ec:	d908      	bls.n	8000600 <HAL_TIM_IC_CaptureCallback+0x1c8>
					diff[2]=t2[2]-t1[2];
 80005ee:	4b2e      	ldr	r3, [pc, #184]	; (80006a8 <HAL_TIM_IC_CaptureCallback+0x270>)
 80005f0:	889a      	ldrh	r2, [r3, #4]
 80005f2:	4b2c      	ldr	r3, [pc, #176]	; (80006a4 <HAL_TIM_IC_CaptureCallback+0x26c>)
 80005f4:	889b      	ldrh	r3, [r3, #4]
 80005f6:	1ad3      	subs	r3, r2, r3
 80005f8:	b29a      	uxth	r2, r3
 80005fa:	4b2c      	ldr	r3, [pc, #176]	; (80006ac <HAL_TIM_IC_CaptureCallback+0x274>)
 80005fc:	809a      	strh	r2, [r3, #4]
 80005fe:	e00d      	b.n	800061c <HAL_TIM_IC_CaptureCallback+0x1e4>
				else if(t1[2]>t2[2])
 8000600:	4b28      	ldr	r3, [pc, #160]	; (80006a4 <HAL_TIM_IC_CaptureCallback+0x26c>)
 8000602:	889a      	ldrh	r2, [r3, #4]
 8000604:	4b28      	ldr	r3, [pc, #160]	; (80006a8 <HAL_TIM_IC_CaptureCallback+0x270>)
 8000606:	889b      	ldrh	r3, [r3, #4]
 8000608:	429a      	cmp	r2, r3
 800060a:	d907      	bls.n	800061c <HAL_TIM_IC_CaptureCallback+0x1e4>
					diff[2] = ((0xffff-t1[2])+t2[2])+1;
 800060c:	4b26      	ldr	r3, [pc, #152]	; (80006a8 <HAL_TIM_IC_CaptureCallback+0x270>)
 800060e:	889a      	ldrh	r2, [r3, #4]
 8000610:	4b24      	ldr	r3, [pc, #144]	; (80006a4 <HAL_TIM_IC_CaptureCallback+0x26c>)
 8000612:	889b      	ldrh	r3, [r3, #4]
 8000614:	1ad3      	subs	r3, r2, r3
 8000616:	b29a      	uxth	r2, r3
 8000618:	4b24      	ldr	r3, [pc, #144]	; (80006ac <HAL_TIM_IC_CaptureCallback+0x274>)
 800061a:	809a      	strh	r2, [r3, #4]
				d[2]=diff[2]/58;
 800061c:	4b23      	ldr	r3, [pc, #140]	; (80006ac <HAL_TIM_IC_CaptureCallback+0x274>)
 800061e:	889b      	ldrh	r3, [r3, #4]
 8000620:	4a23      	ldr	r2, [pc, #140]	; (80006b0 <HAL_TIM_IC_CaptureCallback+0x278>)
 8000622:	fba2 2303 	umull	r2, r3, r2, r3
 8000626:	095b      	lsrs	r3, r3, #5
 8000628:	b29a      	uxth	r2, r3
 800062a:	4b22      	ldr	r3, [pc, #136]	; (80006b4 <HAL_TIM_IC_CaptureCallback+0x27c>)
 800062c:	809a      	strh	r2, [r3, #4]
}
 800062e:	e060      	b.n	80006f2 <HAL_TIM_IC_CaptureCallback+0x2ba>
	else if (htim->Instance == TIM15) {
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a22      	ldr	r2, [pc, #136]	; (80006c0 <HAL_TIM_IC_CaptureCallback+0x288>)
 8000636:	4293      	cmp	r3, r2
 8000638:	d15b      	bne.n	80006f2 <HAL_TIM_IC_CaptureCallback+0x2ba>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	7f1b      	ldrb	r3, [r3, #28]
 800063e:	2b01      	cmp	r3, #1
 8000640:	d157      	bne.n	80006f2 <HAL_TIM_IC_CaptureCallback+0x2ba>
			if(count[3] == 0)
 8000642:	4b17      	ldr	r3, [pc, #92]	; (80006a0 <HAL_TIM_IC_CaptureCallback+0x268>)
 8000644:	78db      	ldrb	r3, [r3, #3]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d10b      	bne.n	8000662 <HAL_TIM_IC_CaptureCallback+0x22a>
				t1[3]=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800064a:	2100      	movs	r1, #0
 800064c:	6878      	ldr	r0, [r7, #4]
 800064e:	f004 f8b3 	bl	80047b8 <HAL_TIM_ReadCapturedValue>
 8000652:	4603      	mov	r3, r0
 8000654:	b29a      	uxth	r2, r3
 8000656:	4b13      	ldr	r3, [pc, #76]	; (80006a4 <HAL_TIM_IC_CaptureCallback+0x26c>)
 8000658:	80da      	strh	r2, [r3, #6]
				count[3]=1;
 800065a:	4b11      	ldr	r3, [pc, #68]	; (80006a0 <HAL_TIM_IC_CaptureCallback+0x268>)
 800065c:	2201      	movs	r2, #1
 800065e:	70da      	strb	r2, [r3, #3]
}
 8000660:	e047      	b.n	80006f2 <HAL_TIM_IC_CaptureCallback+0x2ba>
			else if(count[3] == 1)
 8000662:	4b0f      	ldr	r3, [pc, #60]	; (80006a0 <HAL_TIM_IC_CaptureCallback+0x268>)
 8000664:	78db      	ldrb	r3, [r3, #3]
 8000666:	2b01      	cmp	r3, #1
 8000668:	d143      	bne.n	80006f2 <HAL_TIM_IC_CaptureCallback+0x2ba>
				t2[3]=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800066a:	2100      	movs	r1, #0
 800066c:	6878      	ldr	r0, [r7, #4]
 800066e:	f004 f8a3 	bl	80047b8 <HAL_TIM_ReadCapturedValue>
 8000672:	4603      	mov	r3, r0
 8000674:	b29a      	uxth	r2, r3
 8000676:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <HAL_TIM_IC_CaptureCallback+0x270>)
 8000678:	80da      	strh	r2, [r3, #6]
				count[3]=0;
 800067a:	4b09      	ldr	r3, [pc, #36]	; (80006a0 <HAL_TIM_IC_CaptureCallback+0x268>)
 800067c:	2200      	movs	r2, #0
 800067e:	70da      	strb	r2, [r3, #3]
				if(t2[3]>t1[3])
 8000680:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <HAL_TIM_IC_CaptureCallback+0x270>)
 8000682:	88da      	ldrh	r2, [r3, #6]
 8000684:	4b07      	ldr	r3, [pc, #28]	; (80006a4 <HAL_TIM_IC_CaptureCallback+0x26c>)
 8000686:	88db      	ldrh	r3, [r3, #6]
 8000688:	429a      	cmp	r2, r3
 800068a:	d91b      	bls.n	80006c4 <HAL_TIM_IC_CaptureCallback+0x28c>
					diff[3]=t2[3]-t1[3];
 800068c:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <HAL_TIM_IC_CaptureCallback+0x270>)
 800068e:	88da      	ldrh	r2, [r3, #6]
 8000690:	4b04      	ldr	r3, [pc, #16]	; (80006a4 <HAL_TIM_IC_CaptureCallback+0x26c>)
 8000692:	88db      	ldrh	r3, [r3, #6]
 8000694:	1ad3      	subs	r3, r2, r3
 8000696:	b29a      	uxth	r2, r3
 8000698:	4b04      	ldr	r3, [pc, #16]	; (80006ac <HAL_TIM_IC_CaptureCallback+0x274>)
 800069a:	80da      	strh	r2, [r3, #6]
 800069c:	e020      	b.n	80006e0 <HAL_TIM_IC_CaptureCallback+0x2a8>
 800069e:	bf00      	nop
 80006a0:	20000028 	.word	0x20000028
 80006a4:	2000002c 	.word	0x2000002c
 80006a8:	20000034 	.word	0x20000034
 80006ac:	2000003c 	.word	0x2000003c
 80006b0:	8d3dcb09 	.word	0x8d3dcb09
 80006b4:	20000044 	.word	0x20000044
 80006b8:	40000400 	.word	0x40000400
 80006bc:	40000800 	.word	0x40000800
 80006c0:	40014000 	.word	0x40014000
				else if(t1[3]>t2[3])
 80006c4:	4b0d      	ldr	r3, [pc, #52]	; (80006fc <HAL_TIM_IC_CaptureCallback+0x2c4>)
 80006c6:	88da      	ldrh	r2, [r3, #6]
 80006c8:	4b0d      	ldr	r3, [pc, #52]	; (8000700 <HAL_TIM_IC_CaptureCallback+0x2c8>)
 80006ca:	88db      	ldrh	r3, [r3, #6]
 80006cc:	429a      	cmp	r2, r3
 80006ce:	d907      	bls.n	80006e0 <HAL_TIM_IC_CaptureCallback+0x2a8>
					diff[3] = ((0xffff-t1[3])+t2[3])+1;
 80006d0:	4b0b      	ldr	r3, [pc, #44]	; (8000700 <HAL_TIM_IC_CaptureCallback+0x2c8>)
 80006d2:	88da      	ldrh	r2, [r3, #6]
 80006d4:	4b09      	ldr	r3, [pc, #36]	; (80006fc <HAL_TIM_IC_CaptureCallback+0x2c4>)
 80006d6:	88db      	ldrh	r3, [r3, #6]
 80006d8:	1ad3      	subs	r3, r2, r3
 80006da:	b29a      	uxth	r2, r3
 80006dc:	4b09      	ldr	r3, [pc, #36]	; (8000704 <HAL_TIM_IC_CaptureCallback+0x2cc>)
 80006de:	80da      	strh	r2, [r3, #6]
				d[3]=diff[3]/58;
 80006e0:	4b08      	ldr	r3, [pc, #32]	; (8000704 <HAL_TIM_IC_CaptureCallback+0x2cc>)
 80006e2:	88db      	ldrh	r3, [r3, #6]
 80006e4:	4a08      	ldr	r2, [pc, #32]	; (8000708 <HAL_TIM_IC_CaptureCallback+0x2d0>)
 80006e6:	fba2 2303 	umull	r2, r3, r2, r3
 80006ea:	095b      	lsrs	r3, r3, #5
 80006ec:	b29a      	uxth	r2, r3
 80006ee:	4b07      	ldr	r3, [pc, #28]	; (800070c <HAL_TIM_IC_CaptureCallback+0x2d4>)
 80006f0:	80da      	strh	r2, [r3, #6]
}
 80006f2:	bf00      	nop
 80006f4:	3708      	adds	r7, #8
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	2000002c 	.word	0x2000002c
 8000700:	20000034 	.word	0x20000034
 8000704:	2000003c 	.word	0x2000003c
 8000708:	8d3dcb09 	.word	0x8d3dcb09
 800070c:	20000044 	.word	0x20000044

08000710 <Ultrasonic_Runable>:

void Ultrasonic_Runable(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
	if(trig_flag==0)
 8000714:	4b2b      	ldr	r3, [pc, #172]	; (80007c4 <Ultrasonic_Runable+0xb4>)
 8000716:	881b      	ldrh	r3, [r3, #0]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d110      	bne.n	800073e <Ultrasonic_Runable+0x2e>
	{
		HAL_GPIO_WritePin(TRIGGER1_GPIO_Port,TRIGGER1_Pin , GPIO_PIN_SET);
 800071c:	2201      	movs	r2, #1
 800071e:	2102      	movs	r1, #2
 8000720:	4829      	ldr	r0, [pc, #164]	; (80007c8 <Ultrasonic_Runable+0xb8>)
 8000722:	f001 fc65 	bl	8001ff0 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000726:	2001      	movs	r0, #1
 8000728:	f001 f98a 	bl	8001a40 <HAL_Delay>
		HAL_GPIO_WritePin(TRIGGER1_GPIO_Port,TRIGGER1_Pin, GPIO_PIN_RESET);
 800072c:	2200      	movs	r2, #0
 800072e:	2102      	movs	r1, #2
 8000730:	4825      	ldr	r0, [pc, #148]	; (80007c8 <Ultrasonic_Runable+0xb8>)
 8000732:	f001 fc5d 	bl	8001ff0 <HAL_GPIO_WritePin>
		trig_flag=1;
 8000736:	4b23      	ldr	r3, [pc, #140]	; (80007c4 <Ultrasonic_Runable+0xb4>)
 8000738:	2201      	movs	r2, #1
 800073a:	801a      	strh	r2, [r3, #0]
 800073c:	e03d      	b.n	80007ba <Ultrasonic_Runable+0xaa>
	}
	else if(trig_flag==1)
 800073e:	4b21      	ldr	r3, [pc, #132]	; (80007c4 <Ultrasonic_Runable+0xb4>)
 8000740:	881b      	ldrh	r3, [r3, #0]
 8000742:	2b01      	cmp	r3, #1
 8000744:	d110      	bne.n	8000768 <Ultrasonic_Runable+0x58>
	{
		HAL_GPIO_WritePin(TRIGGER2_GPIO_Port,TRIGGER2_Pin , GPIO_PIN_SET);
 8000746:	2201      	movs	r2, #1
 8000748:	2104      	movs	r1, #4
 800074a:	481f      	ldr	r0, [pc, #124]	; (80007c8 <Ultrasonic_Runable+0xb8>)
 800074c:	f001 fc50 	bl	8001ff0 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000750:	2001      	movs	r0, #1
 8000752:	f001 f975 	bl	8001a40 <HAL_Delay>
		HAL_GPIO_WritePin(TRIGGER2_GPIO_Port,TRIGGER2_Pin, GPIO_PIN_RESET);
 8000756:	2200      	movs	r2, #0
 8000758:	2104      	movs	r1, #4
 800075a:	481b      	ldr	r0, [pc, #108]	; (80007c8 <Ultrasonic_Runable+0xb8>)
 800075c:	f001 fc48 	bl	8001ff0 <HAL_GPIO_WritePin>
		trig_flag=2;
 8000760:	4b18      	ldr	r3, [pc, #96]	; (80007c4 <Ultrasonic_Runable+0xb4>)
 8000762:	2202      	movs	r2, #2
 8000764:	801a      	strh	r2, [r3, #0]
 8000766:	e028      	b.n	80007ba <Ultrasonic_Runable+0xaa>
	}
	else if(trig_flag==2)
 8000768:	4b16      	ldr	r3, [pc, #88]	; (80007c4 <Ultrasonic_Runable+0xb4>)
 800076a:	881b      	ldrh	r3, [r3, #0]
 800076c:	2b02      	cmp	r3, #2
 800076e:	d110      	bne.n	8000792 <Ultrasonic_Runable+0x82>
	{
		HAL_GPIO_WritePin(TRIGGER3_GPIO_Port,TRIGGER3_Pin , GPIO_PIN_SET);
 8000770:	2201      	movs	r2, #1
 8000772:	2108      	movs	r1, #8
 8000774:	4814      	ldr	r0, [pc, #80]	; (80007c8 <Ultrasonic_Runable+0xb8>)
 8000776:	f001 fc3b 	bl	8001ff0 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 800077a:	2001      	movs	r0, #1
 800077c:	f001 f960 	bl	8001a40 <HAL_Delay>
		HAL_GPIO_WritePin(TRIGGER3_GPIO_Port,TRIGGER3_Pin, GPIO_PIN_RESET);
 8000780:	2200      	movs	r2, #0
 8000782:	2108      	movs	r1, #8
 8000784:	4810      	ldr	r0, [pc, #64]	; (80007c8 <Ultrasonic_Runable+0xb8>)
 8000786:	f001 fc33 	bl	8001ff0 <HAL_GPIO_WritePin>
		trig_flag=3;
 800078a:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <Ultrasonic_Runable+0xb4>)
 800078c:	2203      	movs	r2, #3
 800078e:	801a      	strh	r2, [r3, #0]
 8000790:	e013      	b.n	80007ba <Ultrasonic_Runable+0xaa>
	}
	else if(trig_flag==3)
 8000792:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <Ultrasonic_Runable+0xb4>)
 8000794:	881b      	ldrh	r3, [r3, #0]
 8000796:	2b03      	cmp	r3, #3
 8000798:	d10f      	bne.n	80007ba <Ultrasonic_Runable+0xaa>
	{
		HAL_GPIO_WritePin(TRIGGER4_GPIO_Port,TRIGGER4_Pin , GPIO_PIN_SET);
 800079a:	2201      	movs	r2, #1
 800079c:	2110      	movs	r1, #16
 800079e:	480a      	ldr	r0, [pc, #40]	; (80007c8 <Ultrasonic_Runable+0xb8>)
 80007a0:	f001 fc26 	bl	8001ff0 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80007a4:	2001      	movs	r0, #1
 80007a6:	f001 f94b 	bl	8001a40 <HAL_Delay>
		HAL_GPIO_WritePin(TRIGGER4_GPIO_Port,TRIGGER4_Pin, GPIO_PIN_RESET);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2110      	movs	r1, #16
 80007ae:	4806      	ldr	r0, [pc, #24]	; (80007c8 <Ultrasonic_Runable+0xb8>)
 80007b0:	f001 fc1e 	bl	8001ff0 <HAL_GPIO_WritePin>
		trig_flag=0;
 80007b4:	4b03      	ldr	r3, [pc, #12]	; (80007c4 <Ultrasonic_Runable+0xb4>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	801a      	strh	r2, [r3, #0]
	}
	HAL_Delay(15);
 80007ba:	200f      	movs	r0, #15
 80007bc:	f001 f940 	bl	8001a40 <HAL_Delay>
}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	2000004c 	.word	0x2000004c
 80007c8:	48000800 	.word	0x48000800

080007cc <send_distance>:
	}
	return 0;
}

void send_distance(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b086      	sub	sp, #24
 80007d0:	af00      	add	r7, sp, #0
	uint8_t x10='1';
 80007d2:	2331      	movs	r3, #49	; 0x31
 80007d4:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart4,&x10,sizeof(x10),20);
 80007d6:	f107 010f 	add.w	r1, r7, #15
 80007da:	2314      	movs	r3, #20
 80007dc:	2201      	movs	r2, #1
 80007de:	487a      	ldr	r0, [pc, #488]	; (80009c8 <send_distance+0x1fc>)
 80007e0:	f004 ff5c 	bl	800569c <HAL_UART_Transmit>
	uint8_t x11='.';
 80007e4:	232e      	movs	r3, #46	; 0x2e
 80007e6:	73bb      	strb	r3, [r7, #14]
	HAL_UART_Transmit(&huart4,&x11,sizeof(x11),20);
 80007e8:	f107 010e 	add.w	r1, r7, #14
 80007ec:	2314      	movs	r3, #20
 80007ee:	2201      	movs	r2, #1
 80007f0:	4875      	ldr	r0, [pc, #468]	; (80009c8 <send_distance+0x1fc>)
 80007f2:	f004 ff53 	bl	800569c <HAL_UART_Transmit>
	uint16_t N=55;
 80007f6:	2337      	movs	r3, #55	; 0x37
 80007f8:	82fb      	strh	r3, [r7, #22]
	N=d[0];
 80007fa:	4b74      	ldr	r3, [pc, #464]	; (80009cc <send_distance+0x200>)
 80007fc:	881b      	ldrh	r3, [r3, #0]
 80007fe:	82fb      	strh	r3, [r7, #22]
	while(N)
 8000800:	e01a      	b.n	8000838 <send_distance+0x6c>
	{
		uint8_t d=(N%10)+'0';
 8000802:	8afa      	ldrh	r2, [r7, #22]
 8000804:	4b72      	ldr	r3, [pc, #456]	; (80009d0 <send_distance+0x204>)
 8000806:	fba3 1302 	umull	r1, r3, r3, r2
 800080a:	08d9      	lsrs	r1, r3, #3
 800080c:	460b      	mov	r3, r1
 800080e:	009b      	lsls	r3, r3, #2
 8000810:	440b      	add	r3, r1
 8000812:	005b      	lsls	r3, r3, #1
 8000814:	1ad3      	subs	r3, r2, r3
 8000816:	b29b      	uxth	r3, r3
 8000818:	b2db      	uxtb	r3, r3
 800081a:	3330      	adds	r3, #48	; 0x30
 800081c:	b2db      	uxtb	r3, r3
 800081e:	717b      	strb	r3, [r7, #5]
		HAL_UART_Transmit(&huart4, &d,sizeof(d),20);
 8000820:	1d79      	adds	r1, r7, #5
 8000822:	2314      	movs	r3, #20
 8000824:	2201      	movs	r2, #1
 8000826:	4868      	ldr	r0, [pc, #416]	; (80009c8 <send_distance+0x1fc>)
 8000828:	f004 ff38 	bl	800569c <HAL_UART_Transmit>
		N=N/10;
 800082c:	8afb      	ldrh	r3, [r7, #22]
 800082e:	4a68      	ldr	r2, [pc, #416]	; (80009d0 <send_distance+0x204>)
 8000830:	fba2 2303 	umull	r2, r3, r2, r3
 8000834:	08db      	lsrs	r3, r3, #3
 8000836:	82fb      	strh	r3, [r7, #22]
	while(N)
 8000838:	8afb      	ldrh	r3, [r7, #22]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d1e1      	bne.n	8000802 <send_distance+0x36>
	}
	uint8_t x='_';
 800083e:	235f      	movs	r3, #95	; 0x5f
 8000840:	737b      	strb	r3, [r7, #13]
	HAL_UART_Transmit(&huart4, &x,sizeof(x),20);
 8000842:	f107 010d 	add.w	r1, r7, #13
 8000846:	2314      	movs	r3, #20
 8000848:	2201      	movs	r2, #1
 800084a:	485f      	ldr	r0, [pc, #380]	; (80009c8 <send_distance+0x1fc>)
 800084c:	f004 ff26 	bl	800569c <HAL_UART_Transmit>
	/////////////////////////////////////
	uint8_t x2='2';
 8000850:	2332      	movs	r3, #50	; 0x32
 8000852:	733b      	strb	r3, [r7, #12]
	HAL_UART_Transmit(&huart4,&x2,sizeof(x),20);
 8000854:	f107 010c 	add.w	r1, r7, #12
 8000858:	2314      	movs	r3, #20
 800085a:	2201      	movs	r2, #1
 800085c:	485a      	ldr	r0, [pc, #360]	; (80009c8 <send_distance+0x1fc>)
 800085e:	f004 ff1d 	bl	800569c <HAL_UART_Transmit>
	uint8_t x3='.';
 8000862:	232e      	movs	r3, #46	; 0x2e
 8000864:	72fb      	strb	r3, [r7, #11]
	HAL_UART_Transmit(&huart4,&x3,sizeof(x),20);
 8000866:	f107 010b 	add.w	r1, r7, #11
 800086a:	2314      	movs	r3, #20
 800086c:	2201      	movs	r2, #1
 800086e:	4856      	ldr	r0, [pc, #344]	; (80009c8 <send_distance+0x1fc>)
 8000870:	f004 ff14 	bl	800569c <HAL_UART_Transmit>
	uint16_t N1=55;
 8000874:	2337      	movs	r3, #55	; 0x37
 8000876:	82bb      	strh	r3, [r7, #20]
	N1=d[1];
 8000878:	4b54      	ldr	r3, [pc, #336]	; (80009cc <send_distance+0x200>)
 800087a:	885b      	ldrh	r3, [r3, #2]
 800087c:	82bb      	strh	r3, [r7, #20]
	while(N1)
 800087e:	e01a      	b.n	80008b6 <send_distance+0xea>
	{
		uint8_t d1=(N1%10)+'0';
 8000880:	8aba      	ldrh	r2, [r7, #20]
 8000882:	4b53      	ldr	r3, [pc, #332]	; (80009d0 <send_distance+0x204>)
 8000884:	fba3 1302 	umull	r1, r3, r3, r2
 8000888:	08d9      	lsrs	r1, r3, #3
 800088a:	460b      	mov	r3, r1
 800088c:	009b      	lsls	r3, r3, #2
 800088e:	440b      	add	r3, r1
 8000890:	005b      	lsls	r3, r3, #1
 8000892:	1ad3      	subs	r3, r2, r3
 8000894:	b29b      	uxth	r3, r3
 8000896:	b2db      	uxtb	r3, r3
 8000898:	3330      	adds	r3, #48	; 0x30
 800089a:	b2db      	uxtb	r3, r3
 800089c:	713b      	strb	r3, [r7, #4]
		HAL_UART_Transmit(&huart4, &d1,sizeof(d1),20);
 800089e:	1d39      	adds	r1, r7, #4
 80008a0:	2314      	movs	r3, #20
 80008a2:	2201      	movs	r2, #1
 80008a4:	4848      	ldr	r0, [pc, #288]	; (80009c8 <send_distance+0x1fc>)
 80008a6:	f004 fef9 	bl	800569c <HAL_UART_Transmit>
		N1=N1/10;
 80008aa:	8abb      	ldrh	r3, [r7, #20]
 80008ac:	4a48      	ldr	r2, [pc, #288]	; (80009d0 <send_distance+0x204>)
 80008ae:	fba2 2303 	umull	r2, r3, r2, r3
 80008b2:	08db      	lsrs	r3, r3, #3
 80008b4:	82bb      	strh	r3, [r7, #20]
	while(N1)
 80008b6:	8abb      	ldrh	r3, [r7, #20]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d1e1      	bne.n	8000880 <send_distance+0xb4>
	}
	uint8_t x1='_';
 80008bc:	235f      	movs	r3, #95	; 0x5f
 80008be:	72bb      	strb	r3, [r7, #10]
	HAL_UART_Transmit(&huart4, &x1,sizeof(x),20);
 80008c0:	f107 010a 	add.w	r1, r7, #10
 80008c4:	2314      	movs	r3, #20
 80008c6:	2201      	movs	r2, #1
 80008c8:	483f      	ldr	r0, [pc, #252]	; (80009c8 <send_distance+0x1fc>)
 80008ca:	f004 fee7 	bl	800569c <HAL_UART_Transmit>

	////////////////////////////////////////////////
	uint8_t x4='3';
 80008ce:	2333      	movs	r3, #51	; 0x33
 80008d0:	727b      	strb	r3, [r7, #9]
	HAL_UART_Transmit(&huart4,&x4,sizeof(x),20);
 80008d2:	f107 0109 	add.w	r1, r7, #9
 80008d6:	2314      	movs	r3, #20
 80008d8:	2201      	movs	r2, #1
 80008da:	483b      	ldr	r0, [pc, #236]	; (80009c8 <send_distance+0x1fc>)
 80008dc:	f004 fede 	bl	800569c <HAL_UART_Transmit>
	uint8_t x5='.';
 80008e0:	232e      	movs	r3, #46	; 0x2e
 80008e2:	723b      	strb	r3, [r7, #8]
	HAL_UART_Transmit(&huart4,&x5,sizeof(x),20);
 80008e4:	f107 0108 	add.w	r1, r7, #8
 80008e8:	2314      	movs	r3, #20
 80008ea:	2201      	movs	r2, #1
 80008ec:	4836      	ldr	r0, [pc, #216]	; (80009c8 <send_distance+0x1fc>)
 80008ee:	f004 fed5 	bl	800569c <HAL_UART_Transmit>
	uint16_t N2=55;
 80008f2:	2337      	movs	r3, #55	; 0x37
 80008f4:	827b      	strh	r3, [r7, #18]
	N2=d[2];
 80008f6:	4b35      	ldr	r3, [pc, #212]	; (80009cc <send_distance+0x200>)
 80008f8:	889b      	ldrh	r3, [r3, #4]
 80008fa:	827b      	strh	r3, [r7, #18]
	while(N2)
 80008fc:	e01a      	b.n	8000934 <send_distance+0x168>
	{
		uint8_t d2=(N2%10)+'0';
 80008fe:	8a7a      	ldrh	r2, [r7, #18]
 8000900:	4b33      	ldr	r3, [pc, #204]	; (80009d0 <send_distance+0x204>)
 8000902:	fba3 1302 	umull	r1, r3, r3, r2
 8000906:	08d9      	lsrs	r1, r3, #3
 8000908:	460b      	mov	r3, r1
 800090a:	009b      	lsls	r3, r3, #2
 800090c:	440b      	add	r3, r1
 800090e:	005b      	lsls	r3, r3, #1
 8000910:	1ad3      	subs	r3, r2, r3
 8000912:	b29b      	uxth	r3, r3
 8000914:	b2db      	uxtb	r3, r3
 8000916:	3330      	adds	r3, #48	; 0x30
 8000918:	b2db      	uxtb	r3, r3
 800091a:	70fb      	strb	r3, [r7, #3]
		HAL_UART_Transmit(&huart4, &d2,sizeof(d2),20);
 800091c:	1cf9      	adds	r1, r7, #3
 800091e:	2314      	movs	r3, #20
 8000920:	2201      	movs	r2, #1
 8000922:	4829      	ldr	r0, [pc, #164]	; (80009c8 <send_distance+0x1fc>)
 8000924:	f004 feba 	bl	800569c <HAL_UART_Transmit>
		N2=N2/10;
 8000928:	8a7b      	ldrh	r3, [r7, #18]
 800092a:	4a29      	ldr	r2, [pc, #164]	; (80009d0 <send_distance+0x204>)
 800092c:	fba2 2303 	umull	r2, r3, r2, r3
 8000930:	08db      	lsrs	r3, r3, #3
 8000932:	827b      	strh	r3, [r7, #18]
	while(N2)
 8000934:	8a7b      	ldrh	r3, [r7, #18]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d1e1      	bne.n	80008fe <send_distance+0x132>
	}
	HAL_UART_Transmit(&huart4, &x1,sizeof(x),20);
 800093a:	f107 010a 	add.w	r1, r7, #10
 800093e:	2314      	movs	r3, #20
 8000940:	2201      	movs	r2, #1
 8000942:	4821      	ldr	r0, [pc, #132]	; (80009c8 <send_distance+0x1fc>)
 8000944:	f004 feaa 	bl	800569c <HAL_UART_Transmit>
	////////////////////////////////////////////////
	uint8_t x6='4';
 8000948:	2334      	movs	r3, #52	; 0x34
 800094a:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart4,&x6,sizeof(x),20);
 800094c:	1df9      	adds	r1, r7, #7
 800094e:	2314      	movs	r3, #20
 8000950:	2201      	movs	r2, #1
 8000952:	481d      	ldr	r0, [pc, #116]	; (80009c8 <send_distance+0x1fc>)
 8000954:	f004 fea2 	bl	800569c <HAL_UART_Transmit>
	uint8_t x7='.';
 8000958:	232e      	movs	r3, #46	; 0x2e
 800095a:	71bb      	strb	r3, [r7, #6]
	HAL_UART_Transmit(&huart4,&x7,sizeof(x),20);
 800095c:	1db9      	adds	r1, r7, #6
 800095e:	2314      	movs	r3, #20
 8000960:	2201      	movs	r2, #1
 8000962:	4819      	ldr	r0, [pc, #100]	; (80009c8 <send_distance+0x1fc>)
 8000964:	f004 fe9a 	bl	800569c <HAL_UART_Transmit>
	uint16_t N3=55;
 8000968:	2337      	movs	r3, #55	; 0x37
 800096a:	823b      	strh	r3, [r7, #16]
	N3=d[3];
 800096c:	4b17      	ldr	r3, [pc, #92]	; (80009cc <send_distance+0x200>)
 800096e:	88db      	ldrh	r3, [r3, #6]
 8000970:	823b      	strh	r3, [r7, #16]
	while(N3)
 8000972:	e01a      	b.n	80009aa <send_distance+0x1de>
	{
		uint8_t d3=(N3%10)+'0';
 8000974:	8a3a      	ldrh	r2, [r7, #16]
 8000976:	4b16      	ldr	r3, [pc, #88]	; (80009d0 <send_distance+0x204>)
 8000978:	fba3 1302 	umull	r1, r3, r3, r2
 800097c:	08d9      	lsrs	r1, r3, #3
 800097e:	460b      	mov	r3, r1
 8000980:	009b      	lsls	r3, r3, #2
 8000982:	440b      	add	r3, r1
 8000984:	005b      	lsls	r3, r3, #1
 8000986:	1ad3      	subs	r3, r2, r3
 8000988:	b29b      	uxth	r3, r3
 800098a:	b2db      	uxtb	r3, r3
 800098c:	3330      	adds	r3, #48	; 0x30
 800098e:	b2db      	uxtb	r3, r3
 8000990:	70bb      	strb	r3, [r7, #2]
		HAL_UART_Transmit(&huart4, &d3,sizeof(d3),20);
 8000992:	1cb9      	adds	r1, r7, #2
 8000994:	2314      	movs	r3, #20
 8000996:	2201      	movs	r2, #1
 8000998:	480b      	ldr	r0, [pc, #44]	; (80009c8 <send_distance+0x1fc>)
 800099a:	f004 fe7f 	bl	800569c <HAL_UART_Transmit>
		N3=N3/10;
 800099e:	8a3b      	ldrh	r3, [r7, #16]
 80009a0:	4a0b      	ldr	r2, [pc, #44]	; (80009d0 <send_distance+0x204>)
 80009a2:	fba2 2303 	umull	r2, r3, r2, r3
 80009a6:	08db      	lsrs	r3, r3, #3
 80009a8:	823b      	strh	r3, [r7, #16]
	while(N3)
 80009aa:	8a3b      	ldrh	r3, [r7, #16]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d1e1      	bne.n	8000974 <send_distance+0x1a8>
	}
	HAL_UART_Transmit(&huart4, &x1,sizeof(x),20);
 80009b0:	f107 010a 	add.w	r1, r7, #10
 80009b4:	2314      	movs	r3, #20
 80009b6:	2201      	movs	r2, #1
 80009b8:	4803      	ldr	r0, [pc, #12]	; (80009c8 <send_distance+0x1fc>)
 80009ba:	f004 fe6f 	bl	800569c <HAL_UART_Transmit>
	////////////////////////////////////////////////
}
 80009be:	bf00      	nop
 80009c0:	3718      	adds	r7, #24
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	200001d4 	.word	0x200001d4
 80009cc:	20000044 	.word	0x20000044
 80009d0:	cccccccd 	.word	0xcccccccd

080009d4 <control_car>:
uint8_t Data;
void control_car(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
	if(Data == 'R'){
 80009d8:	4b28      	ldr	r3, [pc, #160]	; (8000a7c <control_car+0xa8>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	2b52      	cmp	r3, #82	; 0x52
 80009de:	d103      	bne.n	80009e8 <control_car+0x14>
		Set_motor_RL_direction(Right);
 80009e0:	2000      	movs	r0, #0
 80009e2:	f7ff fbf7 	bl	80001d4 <Set_motor_RL_direction>
	}
	else{
		Stop_motor_FR();
		Stop_motor_RL();
	}
}
 80009e6:	e047      	b.n	8000a78 <control_car+0xa4>
	}else if(Data == 'L'){
 80009e8:	4b24      	ldr	r3, [pc, #144]	; (8000a7c <control_car+0xa8>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	2b4c      	cmp	r3, #76	; 0x4c
 80009ee:	d103      	bne.n	80009f8 <control_car+0x24>
		Set_motor_RL_direction(Left);
 80009f0:	2001      	movs	r0, #1
 80009f2:	f7ff fbef 	bl	80001d4 <Set_motor_RL_direction>
}
 80009f6:	e03f      	b.n	8000a78 <control_car+0xa4>
	}else if(Data == 'F'){
 80009f8:	4b20      	ldr	r3, [pc, #128]	; (8000a7c <control_car+0xa8>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	2b46      	cmp	r3, #70	; 0x46
 80009fe:	d103      	bne.n	8000a08 <control_car+0x34>
		Set_motor_FR_direction(Forward);
 8000a00:	2000      	movs	r0, #0
 8000a02:	f7ff fc11 	bl	8000228 <Set_motor_FR_direction>
}
 8000a06:	e037      	b.n	8000a78 <control_car+0xa4>
	}else if(Data == 'B'){
 8000a08:	4b1c      	ldr	r3, [pc, #112]	; (8000a7c <control_car+0xa8>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	2b42      	cmp	r3, #66	; 0x42
 8000a0e:	d103      	bne.n	8000a18 <control_car+0x44>
		Set_motor_FR_direction(Reverse);
 8000a10:	2001      	movs	r0, #1
 8000a12:	f7ff fc09 	bl	8000228 <Set_motor_FR_direction>
}
 8000a16:	e02f      	b.n	8000a78 <control_car+0xa4>
	}else if(Data == 'G'){
 8000a18:	4b18      	ldr	r3, [pc, #96]	; (8000a7c <control_car+0xa8>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	2b47      	cmp	r3, #71	; 0x47
 8000a1e:	d106      	bne.n	8000a2e <control_car+0x5a>
		Set_motor_FR_direction(Forward);
 8000a20:	2000      	movs	r0, #0
 8000a22:	f7ff fc01 	bl	8000228 <Set_motor_FR_direction>
		Set_motor_RL_direction(Left);
 8000a26:	2001      	movs	r0, #1
 8000a28:	f7ff fbd4 	bl	80001d4 <Set_motor_RL_direction>
}
 8000a2c:	e024      	b.n	8000a78 <control_car+0xa4>
	}else if(Data == 'I'){
 8000a2e:	4b13      	ldr	r3, [pc, #76]	; (8000a7c <control_car+0xa8>)
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	2b49      	cmp	r3, #73	; 0x49
 8000a34:	d106      	bne.n	8000a44 <control_car+0x70>
		Set_motor_FR_direction(Forward);
 8000a36:	2000      	movs	r0, #0
 8000a38:	f7ff fbf6 	bl	8000228 <Set_motor_FR_direction>
		Set_motor_RL_direction(Right);
 8000a3c:	2000      	movs	r0, #0
 8000a3e:	f7ff fbc9 	bl	80001d4 <Set_motor_RL_direction>
}
 8000a42:	e019      	b.n	8000a78 <control_car+0xa4>
	}else if(Data == 'H'){
 8000a44:	4b0d      	ldr	r3, [pc, #52]	; (8000a7c <control_car+0xa8>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	2b48      	cmp	r3, #72	; 0x48
 8000a4a:	d106      	bne.n	8000a5a <control_car+0x86>
		Set_motor_FR_direction(Reverse);
 8000a4c:	2001      	movs	r0, #1
 8000a4e:	f7ff fbeb 	bl	8000228 <Set_motor_FR_direction>
		Set_motor_RL_direction(Left);
 8000a52:	2001      	movs	r0, #1
 8000a54:	f7ff fbbe 	bl	80001d4 <Set_motor_RL_direction>
}
 8000a58:	e00e      	b.n	8000a78 <control_car+0xa4>
	}else if(Data == 'J'){
 8000a5a:	4b08      	ldr	r3, [pc, #32]	; (8000a7c <control_car+0xa8>)
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	2b4a      	cmp	r3, #74	; 0x4a
 8000a60:	d106      	bne.n	8000a70 <control_car+0x9c>
		Set_motor_FR_direction(Reverse);
 8000a62:	2001      	movs	r0, #1
 8000a64:	f7ff fbe0 	bl	8000228 <Set_motor_FR_direction>
		Set_motor_RL_direction(Right);
 8000a68:	2000      	movs	r0, #0
 8000a6a:	f7ff fbb3 	bl	80001d4 <Set_motor_RL_direction>
}
 8000a6e:	e003      	b.n	8000a78 <control_car+0xa4>
		Stop_motor_FR();
 8000a70:	f7ff fc18 	bl	80002a4 <Stop_motor_FR>
		Stop_motor_RL();
 8000a74:	f7ff fc06 	bl	8000284 <Stop_motor_RL>
}
 8000a78:	bf00      	nop
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	2000004e 	.word	0x2000004e

08000a80 <find_park>:
uint8_t Mode_Flag=0;
void find_park(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
	//		Set_pwm_duty_FR_motor(&htim1, TIM_CHANNEL_1, 40, 0.96);
	//		Set_motor_FR_direction(Forward);
	//		HAL_Delay(5);
	//		Set_pwm_duty_FR_motor(&htim1, TIM_CHANNEL_1,40, 0.90);
	//	}
	if((d[1]>=20)&&(d[2]>=20))
 8000a84:	4b24      	ldr	r3, [pc, #144]	; (8000b18 <find_park+0x98>)
 8000a86:	885b      	ldrh	r3, [r3, #2]
 8000a88:	2b13      	cmp	r3, #19
 8000a8a:	d90a      	bls.n	8000aa2 <find_park+0x22>
 8000a8c:	4b22      	ldr	r3, [pc, #136]	; (8000b18 <find_park+0x98>)
 8000a8e:	889b      	ldrh	r3, [r3, #4]
 8000a90:	2b13      	cmp	r3, #19
 8000a92:	d906      	bls.n	8000aa2 <find_park+0x22>
	{
		count++;
 8000a94:	4b21      	ldr	r3, [pc, #132]	; (8000b1c <find_park+0x9c>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	3301      	adds	r3, #1
 8000a9a:	b2da      	uxtb	r2, r3
 8000a9c:	4b1f      	ldr	r3, [pc, #124]	; (8000b1c <find_park+0x9c>)
 8000a9e:	701a      	strb	r2, [r3, #0]
 8000aa0:	e025      	b.n	8000aee <find_park+0x6e>
	}
	else if(park_not_found==0	&&(	(d[1]<20)	||	(d[2]<20)	))
 8000aa2:	4b1f      	ldr	r3, [pc, #124]	; (8000b20 <find_park+0xa0>)
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d121      	bne.n	8000aee <find_park+0x6e>
 8000aaa:	4b1b      	ldr	r3, [pc, #108]	; (8000b18 <find_park+0x98>)
 8000aac:	885b      	ldrh	r3, [r3, #2]
 8000aae:	2b13      	cmp	r3, #19
 8000ab0:	d903      	bls.n	8000aba <find_park+0x3a>
 8000ab2:	4b19      	ldr	r3, [pc, #100]	; (8000b18 <find_park+0x98>)
 8000ab4:	889b      	ldrh	r3, [r3, #4]
 8000ab6:	2b13      	cmp	r3, #19
 8000ab8:	d819      	bhi.n	8000aee <find_park+0x6e>
	{
		park_not_found=1;
 8000aba:	4b19      	ldr	r3, [pc, #100]	; (8000b20 <find_park+0xa0>)
 8000abc:	2201      	movs	r2, #1
 8000abe:	701a      	strb	r2, [r3, #0]
		Set_pwm_duty_FR_motor(&htim1, TIM_CHANNEL_1, 100, 1);
 8000ac0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000ac4:	2264      	movs	r2, #100	; 0x64
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	4816      	ldr	r0, [pc, #88]	; (8000b24 <find_park+0xa4>)
 8000aca:	f7ff fbfd 	bl	80002c8 <Set_pwm_duty_FR_motor>
		Set_motor_FR_direction(Forward);
 8000ace:	2000      	movs	r0, #0
 8000ad0:	f7ff fbaa 	bl	8000228 <Set_motor_FR_direction>
		HAL_Delay(5);
 8000ad4:	2005      	movs	r0, #5
 8000ad6:	f000 ffb3 	bl	8001a40 <HAL_Delay>
		Set_pwm_duty_FR_motor(&htim1, TIM_CHANNEL_1,100, 0.93);
 8000ada:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8000b28 <find_park+0xa8>
 8000ade:	2264      	movs	r2, #100	; 0x64
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	4810      	ldr	r0, [pc, #64]	; (8000b24 <find_park+0xa4>)
 8000ae4:	f7ff fbf0 	bl	80002c8 <Set_pwm_duty_FR_motor>
		count=0;
 8000ae8:	4b0c      	ldr	r3, [pc, #48]	; (8000b1c <find_park+0x9c>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	701a      	strb	r2, [r3, #0]
	}
	if(count>=50||(d[1]<=12&&count>5)) //45 is a good value //
 8000aee:	4b0b      	ldr	r3, [pc, #44]	; (8000b1c <find_park+0x9c>)
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	2b31      	cmp	r3, #49	; 0x31
 8000af4:	d807      	bhi.n	8000b06 <find_park+0x86>
 8000af6:	4b08      	ldr	r3, [pc, #32]	; (8000b18 <find_park+0x98>)
 8000af8:	885b      	ldrh	r3, [r3, #2]
 8000afa:	2b0c      	cmp	r3, #12
 8000afc:	d80a      	bhi.n	8000b14 <find_park+0x94>
 8000afe:	4b07      	ldr	r3, [pc, #28]	; (8000b1c <find_park+0x9c>)
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	2b05      	cmp	r3, #5
 8000b04:	d906      	bls.n	8000b14 <find_park+0x94>
	{
		//park_not_found=0;
		//HAL_Delay(120);
		Stop_motor_FR();
 8000b06:	f7ff fbcd 	bl	80002a4 <Stop_motor_FR>
		Stop_motor_RL();
 8000b0a:	f7ff fbbb 	bl	8000284 <Stop_motor_RL>
		Mode_Flag=2;
 8000b0e:	4b07      	ldr	r3, [pc, #28]	; (8000b2c <find_park+0xac>)
 8000b10:	2202      	movs	r2, #2
 8000b12:	701a      	strb	r2, [r3, #0]
	}
}
 8000b14:	bf00      	nop
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	20000044 	.word	0x20000044
 8000b1c:	20000050 	.word	0x20000050
 8000b20:	20000051 	.word	0x20000051
 8000b24:	20000058 	.word	0x20000058
 8000b28:	3f6e147b 	.word	0x3f6e147b
 8000b2c:	2000004f 	.word	0x2000004f

08000b30 <start_parking>:

void start_parking()
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
	static  uint8_t IR_handle_flag=0;
	//static  uint8_t phase_6_time_out=0;
	static  uint8_t kareem_counter=0;
	static  uint8_t kareem_flag=0;

	TimerToStop++;
 8000b34:	4b76      	ldr	r3, [pc, #472]	; (8000d10 <start_parking+0x1e0>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	3301      	adds	r3, #1
 8000b3a:	b2da      	uxtb	r2, r3
 8000b3c:	4b74      	ldr	r3, [pc, #464]	; (8000d10 <start_parking+0x1e0>)
 8000b3e:	701a      	strb	r2, [r3, #0]
	if((HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5)==1))
 8000b40:	2120      	movs	r1, #32
 8000b42:	4874      	ldr	r0, [pc, #464]	; (8000d14 <start_parking+0x1e4>)
 8000b44:	f001 fa3c 	bl	8001fc0 <HAL_GPIO_ReadPin>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b01      	cmp	r3, #1
 8000b4c:	d102      	bne.n	8000b54 <start_parking+0x24>
	{
		IR_handle_flag=1;
 8000b4e:	4b72      	ldr	r3, [pc, #456]	; (8000d18 <start_parking+0x1e8>)
 8000b50:	2201      	movs	r2, #1
 8000b52:	701a      	strb	r2, [r3, #0]
	}
	if(TimerToStop>=60)
 8000b54:	4b6e      	ldr	r3, [pc, #440]	; (8000d10 <start_parking+0x1e0>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	2b3b      	cmp	r3, #59	; 0x3b
 8000b5a:	f240 80d6 	bls.w	8000d0a <start_parking+0x1da>
	{
		if(phase==0)
 8000b5e:	4b6f      	ldr	r3, [pc, #444]	; (8000d1c <start_parking+0x1ec>)
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d110      	bne.n	8000b88 <start_parking+0x58>
		{
			Set_motor_RL_direction(Right);
 8000b66:	2000      	movs	r0, #0
 8000b68:	f7ff fb34 	bl	80001d4 <Set_motor_RL_direction>
			Set_pwm_duty_FR_motor(&htim1, TIM_CHANNEL_1,100, 0.75);//795
 8000b6c:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 8000b70:	2264      	movs	r2, #100	; 0x64
 8000b72:	2100      	movs	r1, #0
 8000b74:	486a      	ldr	r0, [pc, #424]	; (8000d20 <start_parking+0x1f0>)
 8000b76:	f7ff fba7 	bl	80002c8 <Set_pwm_duty_FR_motor>
			Set_motor_FR_direction(Reverse);
 8000b7a:	2001      	movs	r0, #1
 8000b7c:	f7ff fb54 	bl	8000228 <Set_motor_FR_direction>
			phase=1;
 8000b80:	4b66      	ldr	r3, [pc, #408]	; (8000d1c <start_parking+0x1ec>)
 8000b82:	2201      	movs	r2, #1
 8000b84:	701a      	strb	r2, [r3, #0]
 8000b86:	e0bd      	b.n	8000d04 <start_parking+0x1d4>
		}
		else if(	( phase== 1 )   && (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5)==0) && IR_handle_flag==1)
 8000b88:	4b64      	ldr	r3, [pc, #400]	; (8000d1c <start_parking+0x1ec>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	2b01      	cmp	r3, #1
 8000b8e:	d112      	bne.n	8000bb6 <start_parking+0x86>
 8000b90:	2120      	movs	r1, #32
 8000b92:	4860      	ldr	r0, [pc, #384]	; (8000d14 <start_parking+0x1e4>)
 8000b94:	f001 fa14 	bl	8001fc0 <HAL_GPIO_ReadPin>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d10b      	bne.n	8000bb6 <start_parking+0x86>
 8000b9e:	4b5e      	ldr	r3, [pc, #376]	; (8000d18 <start_parking+0x1e8>)
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	d107      	bne.n	8000bb6 <start_parking+0x86>
		{
			Stop_motor_FR();
 8000ba6:	f7ff fb7d 	bl	80002a4 <Stop_motor_FR>
			Stop_motor_RL();
 8000baa:	f7ff fb6b 	bl	8000284 <Stop_motor_RL>
			//Set_motor_FR_direction(Forward);
			phase=2;
 8000bae:	4b5b      	ldr	r3, [pc, #364]	; (8000d1c <start_parking+0x1ec>)
 8000bb0:	2202      	movs	r2, #2
 8000bb2:	701a      	strb	r2, [r3, #0]
 8000bb4:	e0a6      	b.n	8000d04 <start_parking+0x1d4>
		}
		else if(phase==2)
 8000bb6:	4b59      	ldr	r3, [pc, #356]	; (8000d1c <start_parking+0x1ec>)
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	2b02      	cmp	r3, #2
 8000bbc:	d11e      	bne.n	8000bfc <start_parking+0xcc>
		{
			HAL_Delay(100);
 8000bbe:	2064      	movs	r0, #100	; 0x64
 8000bc0:	f000 ff3e 	bl	8001a40 <HAL_Delay>
			Set_motor_RL_direction(Right);
 8000bc4:	2000      	movs	r0, #0
 8000bc6:	f7ff fb05 	bl	80001d4 <Set_motor_RL_direction>
			HAL_Delay(50);
 8000bca:	2032      	movs	r0, #50	; 0x32
 8000bcc:	f000 ff38 	bl	8001a40 <HAL_Delay>
			Set_pwm_duty_FR_motor(&htim1, TIM_CHANNEL_1,100, 0.978);//0.98
 8000bd0:	ed9f 0a54 	vldr	s0, [pc, #336]	; 8000d24 <start_parking+0x1f4>
 8000bd4:	2264      	movs	r2, #100	; 0x64
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	4851      	ldr	r0, [pc, #324]	; (8000d20 <start_parking+0x1f0>)
 8000bda:	f7ff fb75 	bl	80002c8 <Set_pwm_duty_FR_motor>
			Set_motor_FR_direction(Forward);
 8000bde:	2000      	movs	r0, #0
 8000be0:	f7ff fb22 	bl	8000228 <Set_motor_FR_direction>
			HAL_Delay(900);
 8000be4:	f44f 7061 	mov.w	r0, #900	; 0x384
 8000be8:	f000 ff2a 	bl	8001a40 <HAL_Delay>
			Stop_motor_FR();
 8000bec:	f7ff fb5a 	bl	80002a4 <Stop_motor_FR>
			Stop_motor_RL();
 8000bf0:	f7ff fb48 	bl	8000284 <Stop_motor_RL>
			phase=3;
 8000bf4:	4b49      	ldr	r3, [pc, #292]	; (8000d1c <start_parking+0x1ec>)
 8000bf6:	2203      	movs	r2, #3
 8000bf8:	701a      	strb	r2, [r3, #0]
 8000bfa:	e083      	b.n	8000d04 <start_parking+0x1d4>
		}
		else if(phase==3)
 8000bfc:	4b47      	ldr	r3, [pc, #284]	; (8000d1c <start_parking+0x1ec>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	2b03      	cmp	r3, #3
 8000c02:	d116      	bne.n	8000c32 <start_parking+0x102>
		{
			HAL_Delay(100);
 8000c04:	2064      	movs	r0, #100	; 0x64
 8000c06:	f000 ff1b 	bl	8001a40 <HAL_Delay>
			Set_motor_RL_direction(Left);
 8000c0a:	2001      	movs	r0, #1
 8000c0c:	f7ff fae2 	bl	80001d4 <Set_motor_RL_direction>
			HAL_Delay(50);
 8000c10:	2032      	movs	r0, #50	; 0x32
 8000c12:	f000 ff15 	bl	8001a40 <HAL_Delay>
			Set_pwm_duty_FR_motor(&htim1, TIM_CHANNEL_1,100, 0.83);
 8000c16:	ed9f 0a44 	vldr	s0, [pc, #272]	; 8000d28 <start_parking+0x1f8>
 8000c1a:	2264      	movs	r2, #100	; 0x64
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	4840      	ldr	r0, [pc, #256]	; (8000d20 <start_parking+0x1f0>)
 8000c20:	f7ff fb52 	bl	80002c8 <Set_pwm_duty_FR_motor>
			Set_motor_FR_direction(Reverse);
 8000c24:	2001      	movs	r0, #1
 8000c26:	f7ff faff 	bl	8000228 <Set_motor_FR_direction>

			phase=4;
 8000c2a:	4b3c      	ldr	r3, [pc, #240]	; (8000d1c <start_parking+0x1ec>)
 8000c2c:	2204      	movs	r2, #4
 8000c2e:	701a      	strb	r2, [r3, #0]
 8000c30:	e068      	b.n	8000d04 <start_parking+0x1d4>
		}
		else if(phase==4&&((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)==0)||t5mesa_timer>=28))//35
 8000c32:	4b3a      	ldr	r3, [pc, #232]	; (8000d1c <start_parking+0x1ec>)
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	2b04      	cmp	r3, #4
 8000c38:	d125      	bne.n	8000c86 <start_parking+0x156>
 8000c3a:	2102      	movs	r1, #2
 8000c3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c40:	f001 f9be 	bl	8001fc0 <HAL_GPIO_ReadPin>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d003      	beq.n	8000c52 <start_parking+0x122>
 8000c4a:	4b38      	ldr	r3, [pc, #224]	; (8000d2c <start_parking+0x1fc>)
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	2b1b      	cmp	r3, #27
 8000c50:	d919      	bls.n	8000c86 <start_parking+0x156>
		{
			Stop_motor_RL();
 8000c52:	f7ff fb17 	bl	8000284 <Stop_motor_RL>
			Set_pwm_duty_FR_motor(&htim1, TIM_CHANNEL_1,100, 1);
 8000c56:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000c5a:	2264      	movs	r2, #100	; 0x64
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	4830      	ldr	r0, [pc, #192]	; (8000d20 <start_parking+0x1f0>)
 8000c60:	f7ff fb32 	bl	80002c8 <Set_pwm_duty_FR_motor>
			Set_motor_FR_direction(Forward);
 8000c64:	2000      	movs	r0, #0
 8000c66:	f7ff fadf 	bl	8000228 <Set_motor_FR_direction>
			Set_motor_RL_direction(Right);
 8000c6a:	2000      	movs	r0, #0
 8000c6c:	f7ff fab2 	bl	80001d4 <Set_motor_RL_direction>
			HAL_Delay(150);
 8000c70:	2096      	movs	r0, #150	; 0x96
 8000c72:	f000 fee5 	bl	8001a40 <HAL_Delay>
			Stop_motor_FR();
 8000c76:	f7ff fb15 	bl	80002a4 <Stop_motor_FR>
			Stop_motor_RL();
 8000c7a:	f7ff fb03 	bl	8000284 <Stop_motor_RL>
			phase=5;
 8000c7e:	4b27      	ldr	r3, [pc, #156]	; (8000d1c <start_parking+0x1ec>)
 8000c80:	2205      	movs	r2, #5
 8000c82:	701a      	strb	r2, [r3, #0]
 8000c84:	e03e      	b.n	8000d04 <start_parking+0x1d4>

		}
		else if(phase==4)
 8000c86:	4b25      	ldr	r3, [pc, #148]	; (8000d1c <start_parking+0x1ec>)
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	2b04      	cmp	r3, #4
 8000c8c:	d106      	bne.n	8000c9c <start_parking+0x16c>
		{
			t5mesa_timer++;
 8000c8e:	4b27      	ldr	r3, [pc, #156]	; (8000d2c <start_parking+0x1fc>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	3301      	adds	r3, #1
 8000c94:	b2da      	uxtb	r2, r3
 8000c96:	4b25      	ldr	r3, [pc, #148]	; (8000d2c <start_parking+0x1fc>)
 8000c98:	701a      	strb	r2, [r3, #0]
 8000c9a:	e033      	b.n	8000d04 <start_parking+0x1d4>
		}
		else if(phase==5)
 8000c9c:	4b1f      	ldr	r3, [pc, #124]	; (8000d1c <start_parking+0x1ec>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	2b05      	cmp	r3, #5
 8000ca2:	d124      	bne.n	8000cee <start_parking+0x1be>
		{
			if(kareem_flag==0)
 8000ca4:	4b22      	ldr	r3, [pc, #136]	; (8000d30 <start_parking+0x200>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d106      	bne.n	8000cba <start_parking+0x18a>
			{

				phase = 2 ;
 8000cac:	4b1b      	ldr	r3, [pc, #108]	; (8000d1c <start_parking+0x1ec>)
 8000cae:	2202      	movs	r2, #2
 8000cb0:	701a      	strb	r2, [r3, #0]
				kareem_flag=1;
 8000cb2:	4b1f      	ldr	r3, [pc, #124]	; (8000d30 <start_parking+0x200>)
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	701a      	strb	r2, [r3, #0]
 8000cb8:	e024      	b.n	8000d04 <start_parking+0x1d4>
			}
			else if(kareem_counter !=1)
 8000cba:	4b1e      	ldr	r3, [pc, #120]	; (8000d34 <start_parking+0x204>)
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d020      	beq.n	8000d04 <start_parking+0x1d4>
			{
				if(d[1]>8 && d[2]>8 )
 8000cc2:	4b1d      	ldr	r3, [pc, #116]	; (8000d38 <start_parking+0x208>)
 8000cc4:	885b      	ldrh	r3, [r3, #2]
 8000cc6:	2b08      	cmp	r3, #8
 8000cc8:	d90d      	bls.n	8000ce6 <start_parking+0x1b6>
 8000cca:	4b1b      	ldr	r3, [pc, #108]	; (8000d38 <start_parking+0x208>)
 8000ccc:	889b      	ldrh	r3, [r3, #4]
 8000cce:	2b08      	cmp	r3, #8
 8000cd0:	d909      	bls.n	8000ce6 <start_parking+0x1b6>
				{
					phase =3;
 8000cd2:	4b12      	ldr	r3, [pc, #72]	; (8000d1c <start_parking+0x1ec>)
 8000cd4:	2203      	movs	r2, #3
 8000cd6:	701a      	strb	r2, [r3, #0]
					kareem_counter++;
 8000cd8:	4b16      	ldr	r3, [pc, #88]	; (8000d34 <start_parking+0x204>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	3301      	adds	r3, #1
 8000cde:	b2da      	uxtb	r2, r3
 8000ce0:	4b14      	ldr	r3, [pc, #80]	; (8000d34 <start_parking+0x204>)
 8000ce2:	701a      	strb	r2, [r3, #0]
 8000ce4:	e00e      	b.n	8000d04 <start_parking+0x1d4>
				}
				else {
								phase=6;
 8000ce6:	4b0d      	ldr	r3, [pc, #52]	; (8000d1c <start_parking+0x1ec>)
 8000ce8:	2206      	movs	r2, #6
 8000cea:	701a      	strb	r2, [r3, #0]
 8000cec:	e00a      	b.n	8000d04 <start_parking+0x1d4>
			//			Set_motor_RL_direction(Right);
			//			Set_motor_FR_direction(Forward);


		}
		else if(phase==6)//&&(phase_6_time_out>=20))
 8000cee:	4b0b      	ldr	r3, [pc, #44]	; (8000d1c <start_parking+0x1ec>)
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	2b06      	cmp	r3, #6
 8000cf4:	d106      	bne.n	8000d04 <start_parking+0x1d4>
		{
			Stop_motor_FR();
 8000cf6:	f7ff fad5 	bl	80002a4 <Stop_motor_FR>
			Stop_motor_RL();
 8000cfa:	f7ff fac3 	bl	8000284 <Stop_motor_RL>
			Mode_Flag=3;
 8000cfe:	4b0f      	ldr	r3, [pc, #60]	; (8000d3c <start_parking+0x20c>)
 8000d00:	2203      	movs	r2, #3
 8000d02:	701a      	strb	r2, [r3, #0]
		}
		//		else if(phase==6)
		//		{
		//			phase_6_time_out++;
		//		}
		TimerToStop=100;
 8000d04:	4b02      	ldr	r3, [pc, #8]	; (8000d10 <start_parking+0x1e0>)
 8000d06:	2264      	movs	r2, #100	; 0x64
 8000d08:	701a      	strb	r2, [r3, #0]
	//}




}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	20000052 	.word	0x20000052
 8000d14:	48000800 	.word	0x48000800
 8000d18:	20000053 	.word	0x20000053
 8000d1c:	20000054 	.word	0x20000054
 8000d20:	20000058 	.word	0x20000058
 8000d24:	3f7a5e35 	.word	0x3f7a5e35
 8000d28:	3f547ae1 	.word	0x3f547ae1
 8000d2c:	20000055 	.word	0x20000055
 8000d30:	20000056 	.word	0x20000056
 8000d34:	20000057 	.word	0x20000057
 8000d38:	20000044 	.word	0x20000044
 8000d3c:	2000004f 	.word	0x2000004f

08000d40 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000d44:	f000 fe16 	bl	8001974 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000d48:	f000 f864 	bl	8000e14 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000d4c:	f7ff fae0 	bl	8000310 <MX_GPIO_Init>
	MX_TIM1_Init();
 8000d50:	f000 f952 	bl	8000ff8 <MX_TIM1_Init>
	MX_TIM2_Init();
 8000d54:	f000 f9fc 	bl	8001150 <MX_TIM2_Init>
	MX_TIM3_Init();
 8000d58:	f000 fa6a 	bl	8001230 <MX_TIM3_Init>
	MX_TIM4_Init();
 8000d5c:	f000 fada 	bl	8001314 <MX_TIM4_Init>
	MX_TIM15_Init();
 8000d60:	f000 fb4a 	bl	80013f8 <MX_TIM15_Init>
	MX_UART4_Init();
 8000d64:	f000 fd06 	bl	8001774 <MX_UART4_Init>
	MX_USART2_UART_Init();
 8000d68:	f000 fd34 	bl	80017d4 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4821      	ldr	r0, [pc, #132]	; (8000df4 <main+0xb4>)
 8000d70:	f003 f83e 	bl	8003df0 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000d74:	2100      	movs	r1, #0
 8000d76:	4820      	ldr	r0, [pc, #128]	; (8000df8 <main+0xb8>)
 8000d78:	f003 f83a 	bl	8003df0 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	481f      	ldr	r0, [pc, #124]	; (8000dfc <main+0xbc>)
 8000d80:	f003 f836 	bl	8003df0 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_1);
 8000d84:	2100      	movs	r1, #0
 8000d86:	481e      	ldr	r0, [pc, #120]	; (8000e00 <main+0xc0>)
 8000d88:	f003 f832 	bl	8003df0 <HAL_TIM_IC_Start_IT>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	Set_pwm_duty_FR_motor(&htim1, TIM_CHANNEL_1, 40, 1);
 8000d8c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000d90:	2228      	movs	r2, #40	; 0x28
 8000d92:	2100      	movs	r1, #0
 8000d94:	481b      	ldr	r0, [pc, #108]	; (8000e04 <main+0xc4>)
 8000d96:	f7ff fa97 	bl	80002c8 <Set_pwm_duty_FR_motor>
	//	Mode_Flag=2;
	while (1)
	{
		Ultrasonic_Runable();
 8000d9a:	f7ff fcb9 	bl	8000710 <Ultrasonic_Runable>
		send_distance();
 8000d9e:	f7ff fd15 	bl	80007cc <send_distance>
		//		uint8_t IR=HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)+'0';
		//		HAL_UART_Transmit(&huart4,&IR,sizeof(IR),20);
		//		uint8_t IR=HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)+'0';
		//		HAL_UART_Transmit(&huart4,&IR,sizeof(IR),20);
		HAL_UART_Receive(&huart4, &Data, sizeof(Data), 10);
 8000da2:	230a      	movs	r3, #10
 8000da4:	2201      	movs	r2, #1
 8000da6:	4918      	ldr	r1, [pc, #96]	; (8000e08 <main+0xc8>)
 8000da8:	4818      	ldr	r0, [pc, #96]	; (8000e0c <main+0xcc>)
 8000daa:	f004 fd01 	bl	80057b0 <HAL_UART_Receive>
		if(Data=='V')
 8000dae:	4b16      	ldr	r3, [pc, #88]	; (8000e08 <main+0xc8>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	2b56      	cmp	r3, #86	; 0x56
 8000db4:	d103      	bne.n	8000dbe <main+0x7e>
		{
			//			Set_pwm_duty_FR_motor(&htim1, TIM_CHANNEL_1, 40, 0.93 );
			Mode_Flag=1;
 8000db6:	4b16      	ldr	r3, [pc, #88]	; (8000e10 <main+0xd0>)
 8000db8:	2201      	movs	r2, #1
 8000dba:	701a      	strb	r2, [r3, #0]
 8000dbc:	e006      	b.n	8000dcc <main+0x8c>
		}
		else if(Data=='v')
 8000dbe:	4b12      	ldr	r3, [pc, #72]	; (8000e08 <main+0xc8>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	2b76      	cmp	r3, #118	; 0x76
 8000dc4:	d102      	bne.n	8000dcc <main+0x8c>
		{
			Mode_Flag=0;
 8000dc6:	4b12      	ldr	r3, [pc, #72]	; (8000e10 <main+0xd0>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	701a      	strb	r2, [r3, #0]
		}

		//-----------------------------------

		if(Mode_Flag==0)
 8000dcc:	4b10      	ldr	r3, [pc, #64]	; (8000e10 <main+0xd0>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d101      	bne.n	8000dd8 <main+0x98>
		{
			control_car();
 8000dd4:	f7ff fdfe 	bl	80009d4 <control_car>
		}
		if(Mode_Flag==1)
 8000dd8:	4b0d      	ldr	r3, [pc, #52]	; (8000e10 <main+0xd0>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d102      	bne.n	8000de6 <main+0xa6>
		{
			find_park();
 8000de0:	f7ff fe4e 	bl	8000a80 <find_park>
 8000de4:	e7d9      	b.n	8000d9a <main+0x5a>
		}
		else if(Mode_Flag==2)
 8000de6:	4b0a      	ldr	r3, [pc, #40]	; (8000e10 <main+0xd0>)
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	2b02      	cmp	r3, #2
 8000dec:	d1d5      	bne.n	8000d9a <main+0x5a>
		{
			start_parking();
 8000dee:	f7ff fe9f 	bl	8000b30 <start_parking>
		Ultrasonic_Runable();
 8000df2:	e7d2      	b.n	8000d9a <main+0x5a>
 8000df4:	200000a4 	.word	0x200000a4
 8000df8:	200000f0 	.word	0x200000f0
 8000dfc:	2000013c 	.word	0x2000013c
 8000e00:	20000188 	.word	0x20000188
 8000e04:	20000058 	.word	0x20000058
 8000e08:	2000004e 	.word	0x2000004e
 8000e0c:	200001d4 	.word	0x200001d4
 8000e10:	2000004f 	.word	0x2000004f

08000e14 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b0a6      	sub	sp, #152	; 0x98
 8000e18:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e1a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000e1e:	2228      	movs	r2, #40	; 0x28
 8000e20:	2100      	movs	r1, #0
 8000e22:	4618      	mov	r0, r3
 8000e24:	f005 f977 	bl	8006116 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e28:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	609a      	str	r2, [r3, #8]
 8000e34:	60da      	str	r2, [r3, #12]
 8000e36:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e38:	1d3b      	adds	r3, r7, #4
 8000e3a:	2258      	movs	r2, #88	; 0x58
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f005 f969 	bl	8006116 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e44:	2302      	movs	r3, #2
 8000e46:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	67fb      	str	r3, [r7, #124]	; 0x7c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e4c:	2310      	movs	r3, #16
 8000e4e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e52:	2300      	movs	r3, #0
 8000e54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e58:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f001 f8f9 	bl	8002054 <HAL_RCC_OscConfig>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <SystemClock_Config+0x58>
	{
		Error_Handler();
 8000e68:	f000 f834 	bl	8000ed4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e6c:	230f      	movs	r3, #15
 8000e6e:	65fb      	str	r3, [r7, #92]	; 0x5c
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e70:	2300      	movs	r3, #0
 8000e72:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e74:	2300      	movs	r3, #0
 8000e76:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e7c:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	66fb      	str	r3, [r7, #108]	; 0x6c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e82:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000e86:	2100      	movs	r1, #0
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f002 f937 	bl	80030fc <HAL_RCC_ClockConfig>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <SystemClock_Config+0x84>
	{
		Error_Handler();
 8000e94:	f000 f81e 	bl	8000ed4 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_UART4
 8000e98:	4b0d      	ldr	r3, [pc, #52]	; (8000ed0 <SystemClock_Config+0xbc>)
 8000e9a:	607b      	str	r3, [r7, #4]
			|RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM15
			|RCC_PERIPHCLK_TIM2|RCC_PERIPHCLK_TIM34;
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	613b      	str	r3, [r7, #16]
	PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	61bb      	str	r3, [r7, #24]
	PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	63bb      	str	r3, [r7, #56]	; 0x38
	PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLK_HCLK;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	64bb      	str	r3, [r7, #72]	; 0x48
	PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8000eac:	2300      	movs	r3, #0
 8000eae:	63fb      	str	r3, [r7, #60]	; 0x3c
	PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	643b      	str	r3, [r7, #64]	; 0x40
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000eb4:	1d3b      	adds	r3, r7, #4
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f002 fb56 	bl	8003568 <HAL_RCCEx_PeriphCLKConfig>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <SystemClock_Config+0xb2>
	{
		Error_Handler();
 8000ec2:	f000 f807 	bl	8000ed4 <Error_Handler>
	}
}
 8000ec6:	bf00      	nop
 8000ec8:	3798      	adds	r7, #152	; 0x98
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	0070100a 	.word	0x0070100a

08000ed4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ed8:	b672      	cpsid	i
}
 8000eda:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000edc:	e7fe      	b.n	8000edc <Error_Handler+0x8>
	...

08000ee0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ee6:	4b0f      	ldr	r3, [pc, #60]	; (8000f24 <HAL_MspInit+0x44>)
 8000ee8:	699b      	ldr	r3, [r3, #24]
 8000eea:	4a0e      	ldr	r2, [pc, #56]	; (8000f24 <HAL_MspInit+0x44>)
 8000eec:	f043 0301 	orr.w	r3, r3, #1
 8000ef0:	6193      	str	r3, [r2, #24]
 8000ef2:	4b0c      	ldr	r3, [pc, #48]	; (8000f24 <HAL_MspInit+0x44>)
 8000ef4:	699b      	ldr	r3, [r3, #24]
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	607b      	str	r3, [r7, #4]
 8000efc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000efe:	4b09      	ldr	r3, [pc, #36]	; (8000f24 <HAL_MspInit+0x44>)
 8000f00:	69db      	ldr	r3, [r3, #28]
 8000f02:	4a08      	ldr	r2, [pc, #32]	; (8000f24 <HAL_MspInit+0x44>)
 8000f04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f08:	61d3      	str	r3, [r2, #28]
 8000f0a:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <HAL_MspInit+0x44>)
 8000f0c:	69db      	ldr	r3, [r3, #28]
 8000f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f12:	603b      	str	r3, [r7, #0]
 8000f14:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f16:	2007      	movs	r0, #7
 8000f18:	f000 fe86 	bl	8001c28 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f1c:	bf00      	nop
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	40021000 	.word	0x40021000

08000f28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f2c:	e7fe      	b.n	8000f2c <NMI_Handler+0x4>

08000f2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f32:	e7fe      	b.n	8000f32 <HardFault_Handler+0x4>

08000f34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f38:	e7fe      	b.n	8000f38 <MemManage_Handler+0x4>

08000f3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f3e:	e7fe      	b.n	8000f3e <BusFault_Handler+0x4>

08000f40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f44:	e7fe      	b.n	8000f44 <UsageFault_Handler+0x4>

08000f46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f46:	b480      	push	{r7}
 8000f48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr

08000f62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f62:	b480      	push	{r7}
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f74:	f000 fd44 	bl	8001a00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f78:	bf00      	nop
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f80:	4803      	ldr	r0, [pc, #12]	; (8000f90 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 8000f82:	f003 f87f 	bl	8004084 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8000f86:	4803      	ldr	r0, [pc, #12]	; (8000f94 <TIM1_BRK_TIM15_IRQHandler+0x18>)
 8000f88:	f003 f87c 	bl	8004084 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8000f8c:	bf00      	nop
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	20000058 	.word	0x20000058
 8000f94:	20000188 	.word	0x20000188

08000f98 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f9c:	4802      	ldr	r0, [pc, #8]	; (8000fa8 <TIM2_IRQHandler+0x10>)
 8000f9e:	f003 f871 	bl	8004084 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	200000a4 	.word	0x200000a4

08000fac <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000fb0:	4802      	ldr	r0, [pc, #8]	; (8000fbc <TIM3_IRQHandler+0x10>)
 8000fb2:	f003 f867 	bl	8004084 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	200000f0 	.word	0x200000f0

08000fc0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000fc4:	4802      	ldr	r0, [pc, #8]	; (8000fd0 <TIM4_IRQHandler+0x10>)
 8000fc6:	f003 f85d 	bl	8004084 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	2000013c 	.word	0x2000013c

08000fd4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fd8:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <SystemInit+0x20>)
 8000fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fde:	4a05      	ldr	r2, [pc, #20]	; (8000ff4 <SystemInit+0x20>)
 8000fe0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fe4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	e000ed00 	.word	0xe000ed00

08000ff8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim15;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b09a      	sub	sp, #104	; 0x68
 8000ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ffe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	605a      	str	r2, [r3, #4]
 8001008:	609a      	str	r2, [r3, #8]
 800100a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800100c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001018:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]
 8001026:	611a      	str	r2, [r3, #16]
 8001028:	615a      	str	r2, [r3, #20]
 800102a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800102c:	1d3b      	adds	r3, r7, #4
 800102e:	222c      	movs	r2, #44	; 0x2c
 8001030:	2100      	movs	r1, #0
 8001032:	4618      	mov	r0, r3
 8001034:	f005 f86f 	bl	8006116 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001038:	4b43      	ldr	r3, [pc, #268]	; (8001148 <MX_TIM1_Init+0x150>)
 800103a:	4a44      	ldr	r2, [pc, #272]	; (800114c <MX_TIM1_Init+0x154>)
 800103c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7;
 800103e:	4b42      	ldr	r3, [pc, #264]	; (8001148 <MX_TIM1_Init+0x150>)
 8001040:	2207      	movs	r2, #7
 8001042:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001044:	4b40      	ldr	r3, [pc, #256]	; (8001148 <MX_TIM1_Init+0x150>)
 8001046:	2200      	movs	r2, #0
 8001048:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 800104a:	4b3f      	ldr	r3, [pc, #252]	; (8001148 <MX_TIM1_Init+0x150>)
 800104c:	2264      	movs	r2, #100	; 0x64
 800104e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001050:	4b3d      	ldr	r3, [pc, #244]	; (8001148 <MX_TIM1_Init+0x150>)
 8001052:	2200      	movs	r2, #0
 8001054:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001056:	4b3c      	ldr	r3, [pc, #240]	; (8001148 <MX_TIM1_Init+0x150>)
 8001058:	2200      	movs	r2, #0
 800105a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800105c:	4b3a      	ldr	r3, [pc, #232]	; (8001148 <MX_TIM1_Init+0x150>)
 800105e:	2200      	movs	r2, #0
 8001060:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001062:	4839      	ldr	r0, [pc, #228]	; (8001148 <MX_TIM1_Init+0x150>)
 8001064:	f002 fc9e 	bl	80039a4 <HAL_TIM_Base_Init>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800106e:	f7ff ff31 	bl	8000ed4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001072:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001076:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001078:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800107c:	4619      	mov	r1, r3
 800107e:	4832      	ldr	r0, [pc, #200]	; (8001148 <MX_TIM1_Init+0x150>)
 8001080:	f003 fad0 	bl	8004624 <HAL_TIM_ConfigClockSource>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800108a:	f7ff ff23 	bl	8000ed4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800108e:	482e      	ldr	r0, [pc, #184]	; (8001148 <MX_TIM1_Init+0x150>)
 8001090:	f002 fcdf 	bl	8003a52 <HAL_TIM_PWM_Init>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800109a:	f7ff ff1b 	bl	8000ed4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800109e:	2300      	movs	r3, #0
 80010a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80010a2:	2300      	movs	r3, #0
 80010a4:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010a6:	2300      	movs	r3, #0
 80010a8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010aa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80010ae:	4619      	mov	r1, r3
 80010b0:	4825      	ldr	r0, [pc, #148]	; (8001148 <MX_TIM1_Init+0x150>)
 80010b2:	f004 f975 	bl	80053a0 <HAL_TIMEx_MasterConfigSynchronization>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80010bc:	f7ff ff0a 	bl	8000ed4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010c0:	2360      	movs	r3, #96	; 0x60
 80010c2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 20;
 80010c4:	2314      	movs	r3, #20
 80010c6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010c8:	2300      	movs	r3, #0
 80010ca:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010cc:	2300      	movs	r3, #0
 80010ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80010d0:	2304      	movs	r3, #4
 80010d2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010d4:	2300      	movs	r3, #0
 80010d6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010d8:	2300      	movs	r3, #0
 80010da:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010e0:	2200      	movs	r2, #0
 80010e2:	4619      	mov	r1, r3
 80010e4:	4818      	ldr	r0, [pc, #96]	; (8001148 <MX_TIM1_Init+0x150>)
 80010e6:	f003 f989 	bl	80043fc <HAL_TIM_PWM_ConfigChannel>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80010f0:	f7ff fef0 	bl	8000ed4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010f4:	2300      	movs	r3, #0
 80010f6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010f8:	2300      	movs	r3, #0
 80010fa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010fc:	2300      	movs	r3, #0
 80010fe:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001100:	2300      	movs	r3, #0
 8001102:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001104:	2300      	movs	r3, #0
 8001106:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001108:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800110c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800110e:	2300      	movs	r3, #0
 8001110:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001112:	2300      	movs	r3, #0
 8001114:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001116:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800111a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800111c:	2300      	movs	r3, #0
 800111e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001120:	2300      	movs	r3, #0
 8001122:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001124:	1d3b      	adds	r3, r7, #4
 8001126:	4619      	mov	r1, r3
 8001128:	4807      	ldr	r0, [pc, #28]	; (8001148 <MX_TIM1_Init+0x150>)
 800112a:	f004 f9c5 	bl	80054b8 <HAL_TIMEx_ConfigBreakDeadTime>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001134:	f7ff fece 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001138:	4803      	ldr	r0, [pc, #12]	; (8001148 <MX_TIM1_Init+0x150>)
 800113a:	f000 fae3 	bl	8001704 <HAL_TIM_MspPostInit>

}
 800113e:	bf00      	nop
 8001140:	3768      	adds	r7, #104	; 0x68
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20000058 	.word	0x20000058
 800114c:	40012c00 	.word	0x40012c00

08001150 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08c      	sub	sp, #48	; 0x30
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001156:	f107 0320 	add.w	r3, r7, #32
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	605a      	str	r2, [r3, #4]
 8001160:	609a      	str	r2, [r3, #8]
 8001162:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001164:	f107 0314 	add.w	r3, r7, #20
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001170:	1d3b      	adds	r3, r7, #4
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	605a      	str	r2, [r3, #4]
 8001178:	609a      	str	r2, [r3, #8]
 800117a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800117c:	4b2b      	ldr	r3, [pc, #172]	; (800122c <MX_TIM2_Init+0xdc>)
 800117e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001182:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 8001184:	4b29      	ldr	r3, [pc, #164]	; (800122c <MX_TIM2_Init+0xdc>)
 8001186:	2207      	movs	r2, #7
 8001188:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800118a:	4b28      	ldr	r3, [pc, #160]	; (800122c <MX_TIM2_Init+0xdc>)
 800118c:	2200      	movs	r2, #0
 800118e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001190:	4b26      	ldr	r3, [pc, #152]	; (800122c <MX_TIM2_Init+0xdc>)
 8001192:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001196:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001198:	4b24      	ldr	r3, [pc, #144]	; (800122c <MX_TIM2_Init+0xdc>)
 800119a:	2200      	movs	r2, #0
 800119c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800119e:	4b23      	ldr	r3, [pc, #140]	; (800122c <MX_TIM2_Init+0xdc>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011a4:	4821      	ldr	r0, [pc, #132]	; (800122c <MX_TIM2_Init+0xdc>)
 80011a6:	f002 fbfd 	bl	80039a4 <HAL_TIM_Base_Init>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 80011b0:	f7ff fe90 	bl	8000ed4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011b8:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011ba:	f107 0320 	add.w	r3, r7, #32
 80011be:	4619      	mov	r1, r3
 80011c0:	481a      	ldr	r0, [pc, #104]	; (800122c <MX_TIM2_Init+0xdc>)
 80011c2:	f003 fa2f 	bl	8004624 <HAL_TIM_ConfigClockSource>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80011cc:	f7ff fe82 	bl	8000ed4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80011d0:	4816      	ldr	r0, [pc, #88]	; (800122c <MX_TIM2_Init+0xdc>)
 80011d2:	f002 fdab 	bl	8003d2c <HAL_TIM_IC_Init>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80011dc:	f7ff fe7a 	bl	8000ed4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011e0:	2300      	movs	r3, #0
 80011e2:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011e4:	2300      	movs	r3, #0
 80011e6:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011e8:	f107 0314 	add.w	r3, r7, #20
 80011ec:	4619      	mov	r1, r3
 80011ee:	480f      	ldr	r0, [pc, #60]	; (800122c <MX_TIM2_Init+0xdc>)
 80011f0:	f004 f8d6 	bl	80053a0 <HAL_TIMEx_MasterConfigSynchronization>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 80011fa:	f7ff fe6b 	bl	8000ed4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80011fe:	230a      	movs	r3, #10
 8001200:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001202:	2301      	movs	r3, #1
 8001204:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001206:	2300      	movs	r3, #0
 8001208:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800120a:	2300      	movs	r3, #0
 800120c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800120e:	1d3b      	adds	r3, r7, #4
 8001210:	2200      	movs	r2, #0
 8001212:	4619      	mov	r1, r3
 8001214:	4805      	ldr	r0, [pc, #20]	; (800122c <MX_TIM2_Init+0xdc>)
 8001216:	f003 f854 	bl	80042c2 <HAL_TIM_IC_ConfigChannel>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8001220:	f7ff fe58 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001224:	bf00      	nop
 8001226:	3730      	adds	r7, #48	; 0x30
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	200000a4 	.word	0x200000a4

08001230 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b08c      	sub	sp, #48	; 0x30
 8001234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001236:	f107 0320 	add.w	r3, r7, #32
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	605a      	str	r2, [r3, #4]
 8001240:	609a      	str	r2, [r3, #8]
 8001242:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001244:	f107 0314 	add.w	r3, r7, #20
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001250:	1d3b      	adds	r3, r7, #4
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	605a      	str	r2, [r3, #4]
 8001258:	609a      	str	r2, [r3, #8]
 800125a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800125c:	4b2b      	ldr	r3, [pc, #172]	; (800130c <MX_TIM3_Init+0xdc>)
 800125e:	4a2c      	ldr	r2, [pc, #176]	; (8001310 <MX_TIM3_Init+0xe0>)
 8001260:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7;
 8001262:	4b2a      	ldr	r3, [pc, #168]	; (800130c <MX_TIM3_Init+0xdc>)
 8001264:	2207      	movs	r2, #7
 8001266:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001268:	4b28      	ldr	r3, [pc, #160]	; (800130c <MX_TIM3_Init+0xdc>)
 800126a:	2200      	movs	r2, #0
 800126c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800126e:	4b27      	ldr	r3, [pc, #156]	; (800130c <MX_TIM3_Init+0xdc>)
 8001270:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001274:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001276:	4b25      	ldr	r3, [pc, #148]	; (800130c <MX_TIM3_Init+0xdc>)
 8001278:	2200      	movs	r2, #0
 800127a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800127c:	4b23      	ldr	r3, [pc, #140]	; (800130c <MX_TIM3_Init+0xdc>)
 800127e:	2200      	movs	r2, #0
 8001280:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001282:	4822      	ldr	r0, [pc, #136]	; (800130c <MX_TIM3_Init+0xdc>)
 8001284:	f002 fb8e 	bl	80039a4 <HAL_TIM_Base_Init>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 800128e:	f7ff fe21 	bl	8000ed4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001292:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001296:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001298:	f107 0320 	add.w	r3, r7, #32
 800129c:	4619      	mov	r1, r3
 800129e:	481b      	ldr	r0, [pc, #108]	; (800130c <MX_TIM3_Init+0xdc>)
 80012a0:	f003 f9c0 	bl	8004624 <HAL_TIM_ConfigClockSource>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80012aa:	f7ff fe13 	bl	8000ed4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80012ae:	4817      	ldr	r0, [pc, #92]	; (800130c <MX_TIM3_Init+0xdc>)
 80012b0:	f002 fd3c 	bl	8003d2c <HAL_TIM_IC_Init>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80012ba:	f7ff fe0b 	bl	8000ed4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012be:	2300      	movs	r3, #0
 80012c0:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012c2:	2300      	movs	r3, #0
 80012c4:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012c6:	f107 0314 	add.w	r3, r7, #20
 80012ca:	4619      	mov	r1, r3
 80012cc:	480f      	ldr	r0, [pc, #60]	; (800130c <MX_TIM3_Init+0xdc>)
 80012ce:	f004 f867 	bl	80053a0 <HAL_TIMEx_MasterConfigSynchronization>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 80012d8:	f7ff fdfc 	bl	8000ed4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80012dc:	230a      	movs	r3, #10
 80012de:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80012e0:	2301      	movs	r3, #1
 80012e2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80012e4:	2300      	movs	r3, #0
 80012e6:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80012e8:	2300      	movs	r3, #0
 80012ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80012ec:	1d3b      	adds	r3, r7, #4
 80012ee:	2200      	movs	r2, #0
 80012f0:	4619      	mov	r1, r3
 80012f2:	4806      	ldr	r0, [pc, #24]	; (800130c <MX_TIM3_Init+0xdc>)
 80012f4:	f002 ffe5 	bl	80042c2 <HAL_TIM_IC_ConfigChannel>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 80012fe:	f7ff fde9 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001302:	bf00      	nop
 8001304:	3730      	adds	r7, #48	; 0x30
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	200000f0 	.word	0x200000f0
 8001310:	40000400 	.word	0x40000400

08001314 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b08c      	sub	sp, #48	; 0x30
 8001318:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800131a:	f107 0320 	add.w	r3, r7, #32
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	605a      	str	r2, [r3, #4]
 8001324:	609a      	str	r2, [r3, #8]
 8001326:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001328:	f107 0314 	add.w	r3, r7, #20
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001334:	1d3b      	adds	r3, r7, #4
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	605a      	str	r2, [r3, #4]
 800133c:	609a      	str	r2, [r3, #8]
 800133e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001340:	4b2b      	ldr	r3, [pc, #172]	; (80013f0 <MX_TIM4_Init+0xdc>)
 8001342:	4a2c      	ldr	r2, [pc, #176]	; (80013f4 <MX_TIM4_Init+0xe0>)
 8001344:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7;
 8001346:	4b2a      	ldr	r3, [pc, #168]	; (80013f0 <MX_TIM4_Init+0xdc>)
 8001348:	2207      	movs	r2, #7
 800134a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800134c:	4b28      	ldr	r3, [pc, #160]	; (80013f0 <MX_TIM4_Init+0xdc>)
 800134e:	2200      	movs	r2, #0
 8001350:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001352:	4b27      	ldr	r3, [pc, #156]	; (80013f0 <MX_TIM4_Init+0xdc>)
 8001354:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001358:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800135a:	4b25      	ldr	r3, [pc, #148]	; (80013f0 <MX_TIM4_Init+0xdc>)
 800135c:	2200      	movs	r2, #0
 800135e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001360:	4b23      	ldr	r3, [pc, #140]	; (80013f0 <MX_TIM4_Init+0xdc>)
 8001362:	2200      	movs	r2, #0
 8001364:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001366:	4822      	ldr	r0, [pc, #136]	; (80013f0 <MX_TIM4_Init+0xdc>)
 8001368:	f002 fb1c 	bl	80039a4 <HAL_TIM_Base_Init>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 8001372:	f7ff fdaf 	bl	8000ed4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001376:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800137a:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800137c:	f107 0320 	add.w	r3, r7, #32
 8001380:	4619      	mov	r1, r3
 8001382:	481b      	ldr	r0, [pc, #108]	; (80013f0 <MX_TIM4_Init+0xdc>)
 8001384:	f003 f94e 	bl	8004624 <HAL_TIM_ConfigClockSource>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800138e:	f7ff fda1 	bl	8000ed4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001392:	4817      	ldr	r0, [pc, #92]	; (80013f0 <MX_TIM4_Init+0xdc>)
 8001394:	f002 fcca 	bl	8003d2c <HAL_TIM_IC_Init>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 800139e:	f7ff fd99 	bl	8000ed4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013a2:	2300      	movs	r3, #0
 80013a4:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013a6:	2300      	movs	r3, #0
 80013a8:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80013aa:	f107 0314 	add.w	r3, r7, #20
 80013ae:	4619      	mov	r1, r3
 80013b0:	480f      	ldr	r0, [pc, #60]	; (80013f0 <MX_TIM4_Init+0xdc>)
 80013b2:	f003 fff5 	bl	80053a0 <HAL_TIMEx_MasterConfigSynchronization>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 80013bc:	f7ff fd8a 	bl	8000ed4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80013c0:	230a      	movs	r3, #10
 80013c2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80013c4:	2301      	movs	r3, #1
 80013c6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80013c8:	2300      	movs	r3, #0
 80013ca:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80013cc:	2300      	movs	r3, #0
 80013ce:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80013d0:	1d3b      	adds	r3, r7, #4
 80013d2:	2200      	movs	r2, #0
 80013d4:	4619      	mov	r1, r3
 80013d6:	4806      	ldr	r0, [pc, #24]	; (80013f0 <MX_TIM4_Init+0xdc>)
 80013d8:	f002 ff73 	bl	80042c2 <HAL_TIM_IC_ConfigChannel>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 80013e2:	f7ff fd77 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80013e6:	bf00      	nop
 80013e8:	3730      	adds	r7, #48	; 0x30
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	2000013c 	.word	0x2000013c
 80013f4:	40000800 	.word	0x40000800

080013f8 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b08c      	sub	sp, #48	; 0x30
 80013fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013fe:	f107 0320 	add.w	r3, r7, #32
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	605a      	str	r2, [r3, #4]
 8001408:	609a      	str	r2, [r3, #8]
 800140a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800140c:	f107 0314 	add.w	r3, r7, #20
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001418:	1d3b      	adds	r3, r7, #4
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	605a      	str	r2, [r3, #4]
 8001420:	609a      	str	r2, [r3, #8]
 8001422:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001424:	4b2c      	ldr	r3, [pc, #176]	; (80014d8 <MX_TIM15_Init+0xe0>)
 8001426:	4a2d      	ldr	r2, [pc, #180]	; (80014dc <MX_TIM15_Init+0xe4>)
 8001428:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 7;
 800142a:	4b2b      	ldr	r3, [pc, #172]	; (80014d8 <MX_TIM15_Init+0xe0>)
 800142c:	2207      	movs	r2, #7
 800142e:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001430:	4b29      	ldr	r3, [pc, #164]	; (80014d8 <MX_TIM15_Init+0xe0>)
 8001432:	2200      	movs	r2, #0
 8001434:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001436:	4b28      	ldr	r3, [pc, #160]	; (80014d8 <MX_TIM15_Init+0xe0>)
 8001438:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800143c:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800143e:	4b26      	ldr	r3, [pc, #152]	; (80014d8 <MX_TIM15_Init+0xe0>)
 8001440:	2200      	movs	r2, #0
 8001442:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001444:	4b24      	ldr	r3, [pc, #144]	; (80014d8 <MX_TIM15_Init+0xe0>)
 8001446:	2200      	movs	r2, #0
 8001448:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800144a:	4b23      	ldr	r3, [pc, #140]	; (80014d8 <MX_TIM15_Init+0xe0>)
 800144c:	2200      	movs	r2, #0
 800144e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001450:	4821      	ldr	r0, [pc, #132]	; (80014d8 <MX_TIM15_Init+0xe0>)
 8001452:	f002 faa7 	bl	80039a4 <HAL_TIM_Base_Init>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_TIM15_Init+0x68>
  {
    Error_Handler();
 800145c:	f7ff fd3a 	bl	8000ed4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001460:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001464:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001466:	f107 0320 	add.w	r3, r7, #32
 800146a:	4619      	mov	r1, r3
 800146c:	481a      	ldr	r0, [pc, #104]	; (80014d8 <MX_TIM15_Init+0xe0>)
 800146e:	f003 f8d9 	bl	8004624 <HAL_TIM_ConfigClockSource>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_TIM15_Init+0x84>
  {
    Error_Handler();
 8001478:	f7ff fd2c 	bl	8000ed4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 800147c:	4816      	ldr	r0, [pc, #88]	; (80014d8 <MX_TIM15_Init+0xe0>)
 800147e:	f002 fc55 	bl	8003d2c <HAL_TIM_IC_Init>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8001488:	f7ff fd24 	bl	8000ed4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800148c:	2300      	movs	r3, #0
 800148e:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001490:	2300      	movs	r3, #0
 8001492:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001494:	f107 0314 	add.w	r3, r7, #20
 8001498:	4619      	mov	r1, r3
 800149a:	480f      	ldr	r0, [pc, #60]	; (80014d8 <MX_TIM15_Init+0xe0>)
 800149c:	f003 ff80 	bl	80053a0 <HAL_TIMEx_MasterConfigSynchronization>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_TIM15_Init+0xb2>
  {
    Error_Handler();
 80014a6:	f7ff fd15 	bl	8000ed4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80014aa:	230a      	movs	r3, #10
 80014ac:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80014ae:	2301      	movs	r3, #1
 80014b0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80014b2:	2300      	movs	r3, #0
 80014b4:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80014b6:	2300      	movs	r3, #0
 80014b8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80014ba:	1d3b      	adds	r3, r7, #4
 80014bc:	2200      	movs	r2, #0
 80014be:	4619      	mov	r1, r3
 80014c0:	4805      	ldr	r0, [pc, #20]	; (80014d8 <MX_TIM15_Init+0xe0>)
 80014c2:	f002 fefe 	bl	80042c2 <HAL_TIM_IC_ConfigChannel>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 80014cc:	f7ff fd02 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80014d0:	bf00      	nop
 80014d2:	3730      	adds	r7, #48	; 0x30
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	20000188 	.word	0x20000188
 80014dc:	40014000 	.word	0x40014000

080014e0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b090      	sub	sp, #64	; 0x40
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	60da      	str	r2, [r3, #12]
 80014f6:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a7b      	ldr	r2, [pc, #492]	; (80016ec <HAL_TIM_Base_MspInit+0x20c>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d114      	bne.n	800152c <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001502:	4b7b      	ldr	r3, [pc, #492]	; (80016f0 <HAL_TIM_Base_MspInit+0x210>)
 8001504:	699b      	ldr	r3, [r3, #24]
 8001506:	4a7a      	ldr	r2, [pc, #488]	; (80016f0 <HAL_TIM_Base_MspInit+0x210>)
 8001508:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800150c:	6193      	str	r3, [r2, #24]
 800150e:	4b78      	ldr	r3, [pc, #480]	; (80016f0 <HAL_TIM_Base_MspInit+0x210>)
 8001510:	699b      	ldr	r3, [r3, #24]
 8001512:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001516:	62bb      	str	r3, [r7, #40]	; 0x28
 8001518:	6abb      	ldr	r3, [r7, #40]	; 0x28

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800151a:	2200      	movs	r2, #0
 800151c:	2100      	movs	r1, #0
 800151e:	2018      	movs	r0, #24
 8001520:	f000 fb8d 	bl	8001c3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001524:	2018      	movs	r0, #24
 8001526:	f000 fba6 	bl	8001c76 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 800152a:	e0db      	b.n	80016e4 <HAL_TIM_Base_MspInit+0x204>
  else if(tim_baseHandle->Instance==TIM2)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001534:	d131      	bne.n	800159a <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001536:	4b6e      	ldr	r3, [pc, #440]	; (80016f0 <HAL_TIM_Base_MspInit+0x210>)
 8001538:	69db      	ldr	r3, [r3, #28]
 800153a:	4a6d      	ldr	r2, [pc, #436]	; (80016f0 <HAL_TIM_Base_MspInit+0x210>)
 800153c:	f043 0301 	orr.w	r3, r3, #1
 8001540:	61d3      	str	r3, [r2, #28]
 8001542:	4b6b      	ldr	r3, [pc, #428]	; (80016f0 <HAL_TIM_Base_MspInit+0x210>)
 8001544:	69db      	ldr	r3, [r3, #28]
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	627b      	str	r3, [r7, #36]	; 0x24
 800154c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800154e:	4b68      	ldr	r3, [pc, #416]	; (80016f0 <HAL_TIM_Base_MspInit+0x210>)
 8001550:	695b      	ldr	r3, [r3, #20]
 8001552:	4a67      	ldr	r2, [pc, #412]	; (80016f0 <HAL_TIM_Base_MspInit+0x210>)
 8001554:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001558:	6153      	str	r3, [r2, #20]
 800155a:	4b65      	ldr	r3, [pc, #404]	; (80016f0 <HAL_TIM_Base_MspInit+0x210>)
 800155c:	695b      	ldr	r3, [r3, #20]
 800155e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001562:	623b      	str	r3, [r7, #32]
 8001564:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001566:	2301      	movs	r3, #1
 8001568:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156a:	2302      	movs	r3, #2
 800156c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156e:	2300      	movs	r3, #0
 8001570:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001572:	2300      	movs	r3, #0
 8001574:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001576:	2301      	movs	r3, #1
 8001578:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800157a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800157e:	4619      	mov	r1, r3
 8001580:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001584:	f000 fb92 	bl	8001cac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001588:	2200      	movs	r2, #0
 800158a:	2100      	movs	r1, #0
 800158c:	201c      	movs	r0, #28
 800158e:	f000 fb56 	bl	8001c3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001592:	201c      	movs	r0, #28
 8001594:	f000 fb6f 	bl	8001c76 <HAL_NVIC_EnableIRQ>
}
 8001598:	e0a4      	b.n	80016e4 <HAL_TIM_Base_MspInit+0x204>
  else if(tim_baseHandle->Instance==TIM3)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a55      	ldr	r2, [pc, #340]	; (80016f4 <HAL_TIM_Base_MspInit+0x214>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d131      	bne.n	8001608 <HAL_TIM_Base_MspInit+0x128>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80015a4:	4b52      	ldr	r3, [pc, #328]	; (80016f0 <HAL_TIM_Base_MspInit+0x210>)
 80015a6:	69db      	ldr	r3, [r3, #28]
 80015a8:	4a51      	ldr	r2, [pc, #324]	; (80016f0 <HAL_TIM_Base_MspInit+0x210>)
 80015aa:	f043 0302 	orr.w	r3, r3, #2
 80015ae:	61d3      	str	r3, [r2, #28]
 80015b0:	4b4f      	ldr	r3, [pc, #316]	; (80016f0 <HAL_TIM_Base_MspInit+0x210>)
 80015b2:	69db      	ldr	r3, [r3, #28]
 80015b4:	f003 0302 	and.w	r3, r3, #2
 80015b8:	61fb      	str	r3, [r7, #28]
 80015ba:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015bc:	4b4c      	ldr	r3, [pc, #304]	; (80016f0 <HAL_TIM_Base_MspInit+0x210>)
 80015be:	695b      	ldr	r3, [r3, #20]
 80015c0:	4a4b      	ldr	r2, [pc, #300]	; (80016f0 <HAL_TIM_Base_MspInit+0x210>)
 80015c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015c6:	6153      	str	r3, [r2, #20]
 80015c8:	4b49      	ldr	r3, [pc, #292]	; (80016f0 <HAL_TIM_Base_MspInit+0x210>)
 80015ca:	695b      	ldr	r3, [r3, #20]
 80015cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d0:	61bb      	str	r3, [r7, #24]
 80015d2:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80015d4:	2340      	movs	r3, #64	; 0x40
 80015d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d8:	2302      	movs	r3, #2
 80015da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015dc:	2300      	movs	r3, #0
 80015de:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e0:	2300      	movs	r3, #0
 80015e2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80015e4:	2302      	movs	r3, #2
 80015e6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015ec:	4619      	mov	r1, r3
 80015ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015f2:	f000 fb5b 	bl	8001cac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80015f6:	2200      	movs	r2, #0
 80015f8:	2100      	movs	r1, #0
 80015fa:	201d      	movs	r0, #29
 80015fc:	f000 fb1f 	bl	8001c3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001600:	201d      	movs	r0, #29
 8001602:	f000 fb38 	bl	8001c76 <HAL_NVIC_EnableIRQ>
}
 8001606:	e06d      	b.n	80016e4 <HAL_TIM_Base_MspInit+0x204>
  else if(tim_baseHandle->Instance==TIM4)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a3a      	ldr	r2, [pc, #232]	; (80016f8 <HAL_TIM_Base_MspInit+0x218>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d132      	bne.n	8001678 <HAL_TIM_Base_MspInit+0x198>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001612:	4b37      	ldr	r3, [pc, #220]	; (80016f0 <HAL_TIM_Base_MspInit+0x210>)
 8001614:	69db      	ldr	r3, [r3, #28]
 8001616:	4a36      	ldr	r2, [pc, #216]	; (80016f0 <HAL_TIM_Base_MspInit+0x210>)
 8001618:	f043 0304 	orr.w	r3, r3, #4
 800161c:	61d3      	str	r3, [r2, #28]
 800161e:	4b34      	ldr	r3, [pc, #208]	; (80016f0 <HAL_TIM_Base_MspInit+0x210>)
 8001620:	69db      	ldr	r3, [r3, #28]
 8001622:	f003 0304 	and.w	r3, r3, #4
 8001626:	617b      	str	r3, [r7, #20]
 8001628:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800162a:	4b31      	ldr	r3, [pc, #196]	; (80016f0 <HAL_TIM_Base_MspInit+0x210>)
 800162c:	695b      	ldr	r3, [r3, #20]
 800162e:	4a30      	ldr	r2, [pc, #192]	; (80016f0 <HAL_TIM_Base_MspInit+0x210>)
 8001630:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001634:	6153      	str	r3, [r2, #20]
 8001636:	4b2e      	ldr	r3, [pc, #184]	; (80016f0 <HAL_TIM_Base_MspInit+0x210>)
 8001638:	695b      	ldr	r3, [r3, #20]
 800163a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163e:	613b      	str	r3, [r7, #16]
 8001640:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001642:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001646:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001648:	2302      	movs	r3, #2
 800164a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164c:	2300      	movs	r3, #0
 800164e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001650:	2300      	movs	r3, #0
 8001652:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001654:	230a      	movs	r3, #10
 8001656:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001658:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800165c:	4619      	mov	r1, r3
 800165e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001662:	f000 fb23 	bl	8001cac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001666:	2200      	movs	r2, #0
 8001668:	2100      	movs	r1, #0
 800166a:	201e      	movs	r0, #30
 800166c:	f000 fae7 	bl	8001c3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001670:	201e      	movs	r0, #30
 8001672:	f000 fb00 	bl	8001c76 <HAL_NVIC_EnableIRQ>
}
 8001676:	e035      	b.n	80016e4 <HAL_TIM_Base_MspInit+0x204>
  else if(tim_baseHandle->Instance==TIM15)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a1f      	ldr	r2, [pc, #124]	; (80016fc <HAL_TIM_Base_MspInit+0x21c>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d130      	bne.n	80016e4 <HAL_TIM_Base_MspInit+0x204>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001682:	4b1b      	ldr	r3, [pc, #108]	; (80016f0 <HAL_TIM_Base_MspInit+0x210>)
 8001684:	699b      	ldr	r3, [r3, #24]
 8001686:	4a1a      	ldr	r2, [pc, #104]	; (80016f0 <HAL_TIM_Base_MspInit+0x210>)
 8001688:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800168c:	6193      	str	r3, [r2, #24]
 800168e:	4b18      	ldr	r3, [pc, #96]	; (80016f0 <HAL_TIM_Base_MspInit+0x210>)
 8001690:	699b      	ldr	r3, [r3, #24]
 8001692:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001696:	60fb      	str	r3, [r7, #12]
 8001698:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800169a:	4b15      	ldr	r3, [pc, #84]	; (80016f0 <HAL_TIM_Base_MspInit+0x210>)
 800169c:	695b      	ldr	r3, [r3, #20]
 800169e:	4a14      	ldr	r2, [pc, #80]	; (80016f0 <HAL_TIM_Base_MspInit+0x210>)
 80016a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016a4:	6153      	str	r3, [r2, #20]
 80016a6:	4b12      	ldr	r3, [pc, #72]	; (80016f0 <HAL_TIM_Base_MspInit+0x210>)
 80016a8:	695b      	ldr	r3, [r3, #20]
 80016aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016ae:	60bb      	str	r3, [r7, #8]
 80016b0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80016b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b8:	2302      	movs	r3, #2
 80016ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016bc:	2300      	movs	r3, #0
 80016be:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c0:	2300      	movs	r3, #0
 80016c2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 80016c4:	2301      	movs	r3, #1
 80016c6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016cc:	4619      	mov	r1, r3
 80016ce:	480c      	ldr	r0, [pc, #48]	; (8001700 <HAL_TIM_Base_MspInit+0x220>)
 80016d0:	f000 faec 	bl	8001cac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80016d4:	2200      	movs	r2, #0
 80016d6:	2100      	movs	r1, #0
 80016d8:	2018      	movs	r0, #24
 80016da:	f000 fab0 	bl	8001c3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80016de:	2018      	movs	r0, #24
 80016e0:	f000 fac9 	bl	8001c76 <HAL_NVIC_EnableIRQ>
}
 80016e4:	bf00      	nop
 80016e6:	3740      	adds	r7, #64	; 0x40
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	40012c00 	.word	0x40012c00
 80016f0:	40021000 	.word	0x40021000
 80016f4:	40000400 	.word	0x40000400
 80016f8:	40000800 	.word	0x40000800
 80016fc:	40014000 	.word	0x40014000
 8001700:	48000400 	.word	0x48000400

08001704 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b088      	sub	sp, #32
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170c:	f107 030c 	add.w	r3, r7, #12
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	605a      	str	r2, [r3, #4]
 8001716:	609a      	str	r2, [r3, #8]
 8001718:	60da      	str	r2, [r3, #12]
 800171a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a11      	ldr	r2, [pc, #68]	; (8001768 <HAL_TIM_MspPostInit+0x64>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d11b      	bne.n	800175e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001726:	4b11      	ldr	r3, [pc, #68]	; (800176c <HAL_TIM_MspPostInit+0x68>)
 8001728:	695b      	ldr	r3, [r3, #20]
 800172a:	4a10      	ldr	r2, [pc, #64]	; (800176c <HAL_TIM_MspPostInit+0x68>)
 800172c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001730:	6153      	str	r3, [r2, #20]
 8001732:	4b0e      	ldr	r3, [pc, #56]	; (800176c <HAL_TIM_MspPostInit+0x68>)
 8001734:	695b      	ldr	r3, [r3, #20]
 8001736:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800173a:	60bb      	str	r3, [r7, #8]
 800173c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800173e:	2301      	movs	r3, #1
 8001740:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001742:	2302      	movs	r3, #2
 8001744:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001746:	2300      	movs	r3, #0
 8001748:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174a:	2300      	movs	r3, #0
 800174c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800174e:	2302      	movs	r3, #2
 8001750:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001752:	f107 030c 	add.w	r3, r7, #12
 8001756:	4619      	mov	r1, r3
 8001758:	4805      	ldr	r0, [pc, #20]	; (8001770 <HAL_TIM_MspPostInit+0x6c>)
 800175a:	f000 faa7 	bl	8001cac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800175e:	bf00      	nop
 8001760:	3720      	adds	r7, #32
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	40012c00 	.word	0x40012c00
 800176c:	40021000 	.word	0x40021000
 8001770:	48000800 	.word	0x48000800

08001774 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart2;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001778:	4b14      	ldr	r3, [pc, #80]	; (80017cc <MX_UART4_Init+0x58>)
 800177a:	4a15      	ldr	r2, [pc, #84]	; (80017d0 <MX_UART4_Init+0x5c>)
 800177c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800177e:	4b13      	ldr	r3, [pc, #76]	; (80017cc <MX_UART4_Init+0x58>)
 8001780:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001784:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001786:	4b11      	ldr	r3, [pc, #68]	; (80017cc <MX_UART4_Init+0x58>)
 8001788:	2200      	movs	r2, #0
 800178a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800178c:	4b0f      	ldr	r3, [pc, #60]	; (80017cc <MX_UART4_Init+0x58>)
 800178e:	2200      	movs	r2, #0
 8001790:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001792:	4b0e      	ldr	r3, [pc, #56]	; (80017cc <MX_UART4_Init+0x58>)
 8001794:	2200      	movs	r2, #0
 8001796:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001798:	4b0c      	ldr	r3, [pc, #48]	; (80017cc <MX_UART4_Init+0x58>)
 800179a:	220c      	movs	r2, #12
 800179c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800179e:	4b0b      	ldr	r3, [pc, #44]	; (80017cc <MX_UART4_Init+0x58>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_8;
 80017a4:	4b09      	ldr	r3, [pc, #36]	; (80017cc <MX_UART4_Init+0x58>)
 80017a6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80017aa:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017ac:	4b07      	ldr	r3, [pc, #28]	; (80017cc <MX_UART4_Init+0x58>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017b2:	4b06      	ldr	r3, [pc, #24]	; (80017cc <MX_UART4_Init+0x58>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80017b8:	4804      	ldr	r0, [pc, #16]	; (80017cc <MX_UART4_Init+0x58>)
 80017ba:	f003 ff21 	bl	8005600 <HAL_UART_Init>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <MX_UART4_Init+0x54>
  {
    Error_Handler();
 80017c4:	f7ff fb86 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80017c8:	bf00      	nop
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	200001d4 	.word	0x200001d4
 80017d0:	40004c00 	.word	0x40004c00

080017d4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017d8:	4b14      	ldr	r3, [pc, #80]	; (800182c <MX_USART2_UART_Init+0x58>)
 80017da:	4a15      	ldr	r2, [pc, #84]	; (8001830 <MX_USART2_UART_Init+0x5c>)
 80017dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80017de:	4b13      	ldr	r3, [pc, #76]	; (800182c <MX_USART2_UART_Init+0x58>)
 80017e0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80017e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017e6:	4b11      	ldr	r3, [pc, #68]	; (800182c <MX_USART2_UART_Init+0x58>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017ec:	4b0f      	ldr	r3, [pc, #60]	; (800182c <MX_USART2_UART_Init+0x58>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017f2:	4b0e      	ldr	r3, [pc, #56]	; (800182c <MX_USART2_UART_Init+0x58>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017f8:	4b0c      	ldr	r3, [pc, #48]	; (800182c <MX_USART2_UART_Init+0x58>)
 80017fa:	220c      	movs	r2, #12
 80017fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017fe:	4b0b      	ldr	r3, [pc, #44]	; (800182c <MX_USART2_UART_Init+0x58>)
 8001800:	2200      	movs	r2, #0
 8001802:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001804:	4b09      	ldr	r3, [pc, #36]	; (800182c <MX_USART2_UART_Init+0x58>)
 8001806:	2200      	movs	r2, #0
 8001808:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800180a:	4b08      	ldr	r3, [pc, #32]	; (800182c <MX_USART2_UART_Init+0x58>)
 800180c:	2200      	movs	r2, #0
 800180e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001810:	4b06      	ldr	r3, [pc, #24]	; (800182c <MX_USART2_UART_Init+0x58>)
 8001812:	2200      	movs	r2, #0
 8001814:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001816:	4805      	ldr	r0, [pc, #20]	; (800182c <MX_USART2_UART_Init+0x58>)
 8001818:	f003 fef2 	bl	8005600 <HAL_UART_Init>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001822:	f7ff fb57 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	2000025c 	.word	0x2000025c
 8001830:	40004400 	.word	0x40004400

08001834 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b08c      	sub	sp, #48	; 0x30
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183c:	f107 031c 	add.w	r3, r7, #28
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	605a      	str	r2, [r3, #4]
 8001846:	609a      	str	r2, [r3, #8]
 8001848:	60da      	str	r2, [r3, #12]
 800184a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a2f      	ldr	r2, [pc, #188]	; (8001910 <HAL_UART_MspInit+0xdc>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d129      	bne.n	80018aa <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001856:	4b2f      	ldr	r3, [pc, #188]	; (8001914 <HAL_UART_MspInit+0xe0>)
 8001858:	69db      	ldr	r3, [r3, #28]
 800185a:	4a2e      	ldr	r2, [pc, #184]	; (8001914 <HAL_UART_MspInit+0xe0>)
 800185c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001860:	61d3      	str	r3, [r2, #28]
 8001862:	4b2c      	ldr	r3, [pc, #176]	; (8001914 <HAL_UART_MspInit+0xe0>)
 8001864:	69db      	ldr	r3, [r3, #28]
 8001866:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800186a:	61bb      	str	r3, [r7, #24]
 800186c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800186e:	4b29      	ldr	r3, [pc, #164]	; (8001914 <HAL_UART_MspInit+0xe0>)
 8001870:	695b      	ldr	r3, [r3, #20]
 8001872:	4a28      	ldr	r2, [pc, #160]	; (8001914 <HAL_UART_MspInit+0xe0>)
 8001874:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001878:	6153      	str	r3, [r2, #20]
 800187a:	4b26      	ldr	r3, [pc, #152]	; (8001914 <HAL_UART_MspInit+0xe0>)
 800187c:	695b      	ldr	r3, [r3, #20]
 800187e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001882:	617b      	str	r3, [r7, #20]
 8001884:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001886:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800188a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188c:	2302      	movs	r3, #2
 800188e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001890:	2300      	movs	r3, #0
 8001892:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001894:	2303      	movs	r3, #3
 8001896:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8001898:	2305      	movs	r3, #5
 800189a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800189c:	f107 031c 	add.w	r3, r7, #28
 80018a0:	4619      	mov	r1, r3
 80018a2:	481d      	ldr	r0, [pc, #116]	; (8001918 <HAL_UART_MspInit+0xe4>)
 80018a4:	f000 fa02 	bl	8001cac <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80018a8:	e02d      	b.n	8001906 <HAL_UART_MspInit+0xd2>
  else if(uartHandle->Instance==USART2)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a1b      	ldr	r2, [pc, #108]	; (800191c <HAL_UART_MspInit+0xe8>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d128      	bne.n	8001906 <HAL_UART_MspInit+0xd2>
    __HAL_RCC_USART2_CLK_ENABLE();
 80018b4:	4b17      	ldr	r3, [pc, #92]	; (8001914 <HAL_UART_MspInit+0xe0>)
 80018b6:	69db      	ldr	r3, [r3, #28]
 80018b8:	4a16      	ldr	r2, [pc, #88]	; (8001914 <HAL_UART_MspInit+0xe0>)
 80018ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018be:	61d3      	str	r3, [r2, #28]
 80018c0:	4b14      	ldr	r3, [pc, #80]	; (8001914 <HAL_UART_MspInit+0xe0>)
 80018c2:	69db      	ldr	r3, [r3, #28]
 80018c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c8:	613b      	str	r3, [r7, #16]
 80018ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018cc:	4b11      	ldr	r3, [pc, #68]	; (8001914 <HAL_UART_MspInit+0xe0>)
 80018ce:	695b      	ldr	r3, [r3, #20]
 80018d0:	4a10      	ldr	r2, [pc, #64]	; (8001914 <HAL_UART_MspInit+0xe0>)
 80018d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018d6:	6153      	str	r3, [r2, #20]
 80018d8:	4b0e      	ldr	r3, [pc, #56]	; (8001914 <HAL_UART_MspInit+0xe0>)
 80018da:	695b      	ldr	r3, [r3, #20]
 80018dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e0:	60fb      	str	r3, [r7, #12]
 80018e2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80018e4:	230c      	movs	r3, #12
 80018e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e8:	2302      	movs	r3, #2
 80018ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ec:	2300      	movs	r3, #0
 80018ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f0:	2300      	movs	r3, #0
 80018f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018f4:	2307      	movs	r3, #7
 80018f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f8:	f107 031c 	add.w	r3, r7, #28
 80018fc:	4619      	mov	r1, r3
 80018fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001902:	f000 f9d3 	bl	8001cac <HAL_GPIO_Init>
}
 8001906:	bf00      	nop
 8001908:	3730      	adds	r7, #48	; 0x30
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	40004c00 	.word	0x40004c00
 8001914:	40021000 	.word	0x40021000
 8001918:	48000800 	.word	0x48000800
 800191c:	40004400 	.word	0x40004400

08001920 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001920:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001958 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001924:	f7ff fb56 	bl	8000fd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001928:	480c      	ldr	r0, [pc, #48]	; (800195c <LoopForever+0x6>)
  ldr r1, =_edata
 800192a:	490d      	ldr	r1, [pc, #52]	; (8001960 <LoopForever+0xa>)
  ldr r2, =_sidata
 800192c:	4a0d      	ldr	r2, [pc, #52]	; (8001964 <LoopForever+0xe>)
  movs r3, #0
 800192e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001930:	e002      	b.n	8001938 <LoopCopyDataInit>

08001932 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001932:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001934:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001936:	3304      	adds	r3, #4

08001938 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001938:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800193a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800193c:	d3f9      	bcc.n	8001932 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800193e:	4a0a      	ldr	r2, [pc, #40]	; (8001968 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001940:	4c0a      	ldr	r4, [pc, #40]	; (800196c <LoopForever+0x16>)
  movs r3, #0
 8001942:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001944:	e001      	b.n	800194a <LoopFillZerobss>

08001946 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001946:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001948:	3204      	adds	r2, #4

0800194a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800194a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800194c:	d3fb      	bcc.n	8001946 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800194e:	f004 fbeb 	bl	8006128 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001952:	f7ff f9f5 	bl	8000d40 <main>

08001956 <LoopForever>:

LoopForever:
    b LoopForever
 8001956:	e7fe      	b.n	8001956 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001958:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800195c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001960:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001964:	080061c8 	.word	0x080061c8
  ldr r2, =_sbss
 8001968:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800196c:	200002e8 	.word	0x200002e8

08001970 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001970:	e7fe      	b.n	8001970 <ADC1_2_IRQHandler>
	...

08001974 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001978:	4b08      	ldr	r3, [pc, #32]	; (800199c <HAL_Init+0x28>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a07      	ldr	r2, [pc, #28]	; (800199c <HAL_Init+0x28>)
 800197e:	f043 0310 	orr.w	r3, r3, #16
 8001982:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001984:	2003      	movs	r0, #3
 8001986:	f000 f94f 	bl	8001c28 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800198a:	2000      	movs	r0, #0
 800198c:	f000 f808 	bl	80019a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001990:	f7ff faa6 	bl	8000ee0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40022000 	.word	0x40022000

080019a0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019a8:	4b12      	ldr	r3, [pc, #72]	; (80019f4 <HAL_InitTick+0x54>)
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	4b12      	ldr	r3, [pc, #72]	; (80019f8 <HAL_InitTick+0x58>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	4619      	mov	r1, r3
 80019b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80019ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80019be:	4618      	mov	r0, r3
 80019c0:	f000 f967 	bl	8001c92 <HAL_SYSTICK_Config>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e00e      	b.n	80019ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2b0f      	cmp	r3, #15
 80019d2:	d80a      	bhi.n	80019ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019d4:	2200      	movs	r2, #0
 80019d6:	6879      	ldr	r1, [r7, #4]
 80019d8:	f04f 30ff 	mov.w	r0, #4294967295
 80019dc:	f000 f92f 	bl	8001c3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019e0:	4a06      	ldr	r2, [pc, #24]	; (80019fc <HAL_InitTick+0x5c>)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80019e6:	2300      	movs	r3, #0
 80019e8:	e000      	b.n	80019ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	20000000 	.word	0x20000000
 80019f8:	20000008 	.word	0x20000008
 80019fc:	20000004 	.word	0x20000004

08001a00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a04:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <HAL_IncTick+0x20>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	461a      	mov	r2, r3
 8001a0a:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <HAL_IncTick+0x24>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4413      	add	r3, r2
 8001a10:	4a04      	ldr	r2, [pc, #16]	; (8001a24 <HAL_IncTick+0x24>)
 8001a12:	6013      	str	r3, [r2, #0]
}
 8001a14:	bf00      	nop
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	20000008 	.word	0x20000008
 8001a24:	200002e4 	.word	0x200002e4

08001a28 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  return uwTick;  
 8001a2c:	4b03      	ldr	r3, [pc, #12]	; (8001a3c <HAL_GetTick+0x14>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	200002e4 	.word	0x200002e4

08001a40 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a48:	f7ff ffee 	bl	8001a28 <HAL_GetTick>
 8001a4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a58:	d005      	beq.n	8001a66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a5a:	4b0a      	ldr	r3, [pc, #40]	; (8001a84 <HAL_Delay+0x44>)
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	461a      	mov	r2, r3
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	4413      	add	r3, r2
 8001a64:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001a66:	bf00      	nop
 8001a68:	f7ff ffde 	bl	8001a28 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	68fa      	ldr	r2, [r7, #12]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d8f7      	bhi.n	8001a68 <HAL_Delay+0x28>
  {
  }
}
 8001a78:	bf00      	nop
 8001a7a:	bf00      	nop
 8001a7c:	3710      	adds	r7, #16
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	20000008 	.word	0x20000008

08001a88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f003 0307 	and.w	r3, r3, #7
 8001a96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a98:	4b0c      	ldr	r3, [pc, #48]	; (8001acc <__NVIC_SetPriorityGrouping+0x44>)
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a9e:	68ba      	ldr	r2, [r7, #8]
 8001aa0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ab0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ab4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ab8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aba:	4a04      	ldr	r2, [pc, #16]	; (8001acc <__NVIC_SetPriorityGrouping+0x44>)
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	60d3      	str	r3, [r2, #12]
}
 8001ac0:	bf00      	nop
 8001ac2:	3714      	adds	r7, #20
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr
 8001acc:	e000ed00 	.word	0xe000ed00

08001ad0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ad4:	4b04      	ldr	r3, [pc, #16]	; (8001ae8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	0a1b      	lsrs	r3, r3, #8
 8001ada:	f003 0307 	and.w	r3, r3, #7
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr
 8001ae8:	e000ed00 	.word	0xe000ed00

08001aec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	4603      	mov	r3, r0
 8001af4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	db0b      	blt.n	8001b16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001afe:	79fb      	ldrb	r3, [r7, #7]
 8001b00:	f003 021f 	and.w	r2, r3, #31
 8001b04:	4907      	ldr	r1, [pc, #28]	; (8001b24 <__NVIC_EnableIRQ+0x38>)
 8001b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0a:	095b      	lsrs	r3, r3, #5
 8001b0c:	2001      	movs	r0, #1
 8001b0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b16:	bf00      	nop
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	e000e100 	.word	0xe000e100

08001b28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	4603      	mov	r3, r0
 8001b30:	6039      	str	r1, [r7, #0]
 8001b32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	db0a      	blt.n	8001b52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	b2da      	uxtb	r2, r3
 8001b40:	490c      	ldr	r1, [pc, #48]	; (8001b74 <__NVIC_SetPriority+0x4c>)
 8001b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b46:	0112      	lsls	r2, r2, #4
 8001b48:	b2d2      	uxtb	r2, r2
 8001b4a:	440b      	add	r3, r1
 8001b4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b50:	e00a      	b.n	8001b68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	b2da      	uxtb	r2, r3
 8001b56:	4908      	ldr	r1, [pc, #32]	; (8001b78 <__NVIC_SetPriority+0x50>)
 8001b58:	79fb      	ldrb	r3, [r7, #7]
 8001b5a:	f003 030f 	and.w	r3, r3, #15
 8001b5e:	3b04      	subs	r3, #4
 8001b60:	0112      	lsls	r2, r2, #4
 8001b62:	b2d2      	uxtb	r2, r2
 8001b64:	440b      	add	r3, r1
 8001b66:	761a      	strb	r2, [r3, #24]
}
 8001b68:	bf00      	nop
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr
 8001b74:	e000e100 	.word	0xe000e100
 8001b78:	e000ed00 	.word	0xe000ed00

08001b7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b089      	sub	sp, #36	; 0x24
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	60b9      	str	r1, [r7, #8]
 8001b86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f003 0307 	and.w	r3, r3, #7
 8001b8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	f1c3 0307 	rsb	r3, r3, #7
 8001b96:	2b04      	cmp	r3, #4
 8001b98:	bf28      	it	cs
 8001b9a:	2304      	movcs	r3, #4
 8001b9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	3304      	adds	r3, #4
 8001ba2:	2b06      	cmp	r3, #6
 8001ba4:	d902      	bls.n	8001bac <NVIC_EncodePriority+0x30>
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	3b03      	subs	r3, #3
 8001baa:	e000      	b.n	8001bae <NVIC_EncodePriority+0x32>
 8001bac:	2300      	movs	r3, #0
 8001bae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bba:	43da      	mvns	r2, r3
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	401a      	ands	r2, r3
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bc4:	f04f 31ff 	mov.w	r1, #4294967295
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	fa01 f303 	lsl.w	r3, r1, r3
 8001bce:	43d9      	mvns	r1, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bd4:	4313      	orrs	r3, r2
         );
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3724      	adds	r7, #36	; 0x24
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
	...

08001be4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bf4:	d301      	bcc.n	8001bfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e00f      	b.n	8001c1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bfa:	4a0a      	ldr	r2, [pc, #40]	; (8001c24 <SysTick_Config+0x40>)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	3b01      	subs	r3, #1
 8001c00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c02:	210f      	movs	r1, #15
 8001c04:	f04f 30ff 	mov.w	r0, #4294967295
 8001c08:	f7ff ff8e 	bl	8001b28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c0c:	4b05      	ldr	r3, [pc, #20]	; (8001c24 <SysTick_Config+0x40>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c12:	4b04      	ldr	r3, [pc, #16]	; (8001c24 <SysTick_Config+0x40>)
 8001c14:	2207      	movs	r2, #7
 8001c16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	e000e010 	.word	0xe000e010

08001c28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f7ff ff29 	bl	8001a88 <__NVIC_SetPriorityGrouping>
}
 8001c36:	bf00      	nop
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b086      	sub	sp, #24
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	4603      	mov	r3, r0
 8001c46:	60b9      	str	r1, [r7, #8]
 8001c48:	607a      	str	r2, [r7, #4]
 8001c4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c50:	f7ff ff3e 	bl	8001ad0 <__NVIC_GetPriorityGrouping>
 8001c54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	68b9      	ldr	r1, [r7, #8]
 8001c5a:	6978      	ldr	r0, [r7, #20]
 8001c5c:	f7ff ff8e 	bl	8001b7c <NVIC_EncodePriority>
 8001c60:	4602      	mov	r2, r0
 8001c62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c66:	4611      	mov	r1, r2
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff ff5d 	bl	8001b28 <__NVIC_SetPriority>
}
 8001c6e:	bf00      	nop
 8001c70:	3718      	adds	r7, #24
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b082      	sub	sp, #8
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff ff31 	bl	8001aec <__NVIC_EnableIRQ>
}
 8001c8a:	bf00      	nop
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b082      	sub	sp, #8
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f7ff ffa2 	bl	8001be4 <SysTick_Config>
 8001ca0:	4603      	mov	r3, r0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
	...

08001cac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b087      	sub	sp, #28
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cba:	e160      	b.n	8001f7e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	2101      	movs	r1, #1
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc8:	4013      	ands	r3, r2
 8001cca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	f000 8152 	beq.w	8001f78 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f003 0303 	and.w	r3, r3, #3
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d005      	beq.n	8001cec <HAL_GPIO_Init+0x40>
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f003 0303 	and.w	r3, r3, #3
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d130      	bne.n	8001d4e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	2203      	movs	r2, #3
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	4013      	ands	r3, r2
 8001d02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	68da      	ldr	r2, [r3, #12]
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	693a      	ldr	r2, [r7, #16]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	693a      	ldr	r2, [r7, #16]
 8001d1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d22:	2201      	movs	r2, #1
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2a:	43db      	mvns	r3, r3
 8001d2c:	693a      	ldr	r2, [r7, #16]
 8001d2e:	4013      	ands	r3, r2
 8001d30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	091b      	lsrs	r3, r3, #4
 8001d38:	f003 0201 	and.w	r2, r3, #1
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	693a      	ldr	r2, [r7, #16]
 8001d4c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f003 0303 	and.w	r3, r3, #3
 8001d56:	2b03      	cmp	r3, #3
 8001d58:	d017      	beq.n	8001d8a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	2203      	movs	r2, #3
 8001d66:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6a:	43db      	mvns	r3, r3
 8001d6c:	693a      	ldr	r2, [r7, #16]
 8001d6e:	4013      	ands	r3, r2
 8001d70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	689a      	ldr	r2, [r3, #8]
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	693a      	ldr	r2, [r7, #16]
 8001d88:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f003 0303 	and.w	r3, r3, #3
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d123      	bne.n	8001dde <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	08da      	lsrs	r2, r3, #3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	3208      	adds	r2, #8
 8001d9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001da2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	f003 0307 	and.w	r3, r3, #7
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	220f      	movs	r2, #15
 8001dae:	fa02 f303 	lsl.w	r3, r2, r3
 8001db2:	43db      	mvns	r3, r3
 8001db4:	693a      	ldr	r2, [r7, #16]
 8001db6:	4013      	ands	r3, r2
 8001db8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	691a      	ldr	r2, [r3, #16]
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	f003 0307 	and.w	r3, r3, #7
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	693a      	ldr	r2, [r7, #16]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	08da      	lsrs	r2, r3, #3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	3208      	adds	r2, #8
 8001dd8:	6939      	ldr	r1, [r7, #16]
 8001dda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	2203      	movs	r2, #3
 8001dea:	fa02 f303 	lsl.w	r3, r2, r3
 8001dee:	43db      	mvns	r3, r3
 8001df0:	693a      	ldr	r2, [r7, #16]
 8001df2:	4013      	ands	r3, r2
 8001df4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f003 0203 	and.w	r2, r3, #3
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	fa02 f303 	lsl.w	r3, r2, r3
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	693a      	ldr	r2, [r7, #16]
 8001e10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	f000 80ac 	beq.w	8001f78 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e20:	4b5e      	ldr	r3, [pc, #376]	; (8001f9c <HAL_GPIO_Init+0x2f0>)
 8001e22:	699b      	ldr	r3, [r3, #24]
 8001e24:	4a5d      	ldr	r2, [pc, #372]	; (8001f9c <HAL_GPIO_Init+0x2f0>)
 8001e26:	f043 0301 	orr.w	r3, r3, #1
 8001e2a:	6193      	str	r3, [r2, #24]
 8001e2c:	4b5b      	ldr	r3, [pc, #364]	; (8001f9c <HAL_GPIO_Init+0x2f0>)
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	f003 0301 	and.w	r3, r3, #1
 8001e34:	60bb      	str	r3, [r7, #8]
 8001e36:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e38:	4a59      	ldr	r2, [pc, #356]	; (8001fa0 <HAL_GPIO_Init+0x2f4>)
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	089b      	lsrs	r3, r3, #2
 8001e3e:	3302      	adds	r3, #2
 8001e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e44:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	f003 0303 	and.w	r3, r3, #3
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	220f      	movs	r2, #15
 8001e50:	fa02 f303 	lsl.w	r3, r2, r3
 8001e54:	43db      	mvns	r3, r3
 8001e56:	693a      	ldr	r2, [r7, #16]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e62:	d025      	beq.n	8001eb0 <HAL_GPIO_Init+0x204>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	4a4f      	ldr	r2, [pc, #316]	; (8001fa4 <HAL_GPIO_Init+0x2f8>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d01f      	beq.n	8001eac <HAL_GPIO_Init+0x200>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	4a4e      	ldr	r2, [pc, #312]	; (8001fa8 <HAL_GPIO_Init+0x2fc>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d019      	beq.n	8001ea8 <HAL_GPIO_Init+0x1fc>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4a4d      	ldr	r2, [pc, #308]	; (8001fac <HAL_GPIO_Init+0x300>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d013      	beq.n	8001ea4 <HAL_GPIO_Init+0x1f8>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4a4c      	ldr	r2, [pc, #304]	; (8001fb0 <HAL_GPIO_Init+0x304>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d00d      	beq.n	8001ea0 <HAL_GPIO_Init+0x1f4>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	4a4b      	ldr	r2, [pc, #300]	; (8001fb4 <HAL_GPIO_Init+0x308>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d007      	beq.n	8001e9c <HAL_GPIO_Init+0x1f0>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4a4a      	ldr	r2, [pc, #296]	; (8001fb8 <HAL_GPIO_Init+0x30c>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d101      	bne.n	8001e98 <HAL_GPIO_Init+0x1ec>
 8001e94:	2306      	movs	r3, #6
 8001e96:	e00c      	b.n	8001eb2 <HAL_GPIO_Init+0x206>
 8001e98:	2307      	movs	r3, #7
 8001e9a:	e00a      	b.n	8001eb2 <HAL_GPIO_Init+0x206>
 8001e9c:	2305      	movs	r3, #5
 8001e9e:	e008      	b.n	8001eb2 <HAL_GPIO_Init+0x206>
 8001ea0:	2304      	movs	r3, #4
 8001ea2:	e006      	b.n	8001eb2 <HAL_GPIO_Init+0x206>
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e004      	b.n	8001eb2 <HAL_GPIO_Init+0x206>
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	e002      	b.n	8001eb2 <HAL_GPIO_Init+0x206>
 8001eac:	2301      	movs	r3, #1
 8001eae:	e000      	b.n	8001eb2 <HAL_GPIO_Init+0x206>
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	697a      	ldr	r2, [r7, #20]
 8001eb4:	f002 0203 	and.w	r2, r2, #3
 8001eb8:	0092      	lsls	r2, r2, #2
 8001eba:	4093      	lsls	r3, r2
 8001ebc:	693a      	ldr	r2, [r7, #16]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ec2:	4937      	ldr	r1, [pc, #220]	; (8001fa0 <HAL_GPIO_Init+0x2f4>)
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	089b      	lsrs	r3, r3, #2
 8001ec8:	3302      	adds	r3, #2
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ed0:	4b3a      	ldr	r3, [pc, #232]	; (8001fbc <HAL_GPIO_Init+0x310>)
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	43db      	mvns	r3, r3
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	4013      	ands	r3, r2
 8001ede:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d003      	beq.n	8001ef4 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001eec:	693a      	ldr	r2, [r7, #16]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001ef4:	4a31      	ldr	r2, [pc, #196]	; (8001fbc <HAL_GPIO_Init+0x310>)
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001efa:	4b30      	ldr	r3, [pc, #192]	; (8001fbc <HAL_GPIO_Init+0x310>)
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	43db      	mvns	r3, r3
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	4013      	ands	r3, r2
 8001f08:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d003      	beq.n	8001f1e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001f16:	693a      	ldr	r2, [r7, #16]
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001f1e:	4a27      	ldr	r2, [pc, #156]	; (8001fbc <HAL_GPIO_Init+0x310>)
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f24:	4b25      	ldr	r3, [pc, #148]	; (8001fbc <HAL_GPIO_Init+0x310>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	43db      	mvns	r3, r3
 8001f2e:	693a      	ldr	r2, [r7, #16]
 8001f30:	4013      	ands	r3, r2
 8001f32:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d003      	beq.n	8001f48 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001f40:	693a      	ldr	r2, [r7, #16]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001f48:	4a1c      	ldr	r2, [pc, #112]	; (8001fbc <HAL_GPIO_Init+0x310>)
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f4e:	4b1b      	ldr	r3, [pc, #108]	; (8001fbc <HAL_GPIO_Init+0x310>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	43db      	mvns	r3, r3
 8001f58:	693a      	ldr	r2, [r7, #16]
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d003      	beq.n	8001f72 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001f6a:	693a      	ldr	r2, [r7, #16]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001f72:	4a12      	ldr	r2, [pc, #72]	; (8001fbc <HAL_GPIO_Init+0x310>)
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	fa22 f303 	lsr.w	r3, r2, r3
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	f47f ae97 	bne.w	8001cbc <HAL_GPIO_Init+0x10>
  }
}
 8001f8e:	bf00      	nop
 8001f90:	bf00      	nop
 8001f92:	371c      	adds	r7, #28
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	40010000 	.word	0x40010000
 8001fa4:	48000400 	.word	0x48000400
 8001fa8:	48000800 	.word	0x48000800
 8001fac:	48000c00 	.word	0x48000c00
 8001fb0:	48001000 	.word	0x48001000
 8001fb4:	48001400 	.word	0x48001400
 8001fb8:	48001800 	.word	0x48001800
 8001fbc:	40010400 	.word	0x40010400

08001fc0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b085      	sub	sp, #20
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	460b      	mov	r3, r1
 8001fca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	691a      	ldr	r2, [r3, #16]
 8001fd0:	887b      	ldrh	r3, [r7, #2]
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d002      	beq.n	8001fde <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	73fb      	strb	r3, [r7, #15]
 8001fdc:	e001      	b.n	8001fe2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3714      	adds	r7, #20
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	807b      	strh	r3, [r7, #2]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002000:	787b      	ldrb	r3, [r7, #1]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d003      	beq.n	800200e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002006:	887a      	ldrh	r2, [r7, #2]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800200c:	e002      	b.n	8002014 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800200e:	887a      	ldrh	r2, [r7, #2]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002014:	bf00      	nop
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002020:	b480      	push	{r7}
 8002022:	b085      	sub	sp, #20
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	460b      	mov	r3, r1
 800202a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	695b      	ldr	r3, [r3, #20]
 8002030:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002032:	887a      	ldrh	r2, [r7, #2]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	4013      	ands	r3, r2
 8002038:	041a      	lsls	r2, r3, #16
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	43d9      	mvns	r1, r3
 800203e:	887b      	ldrh	r3, [r7, #2]
 8002040:	400b      	ands	r3, r1
 8002042:	431a      	orrs	r2, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	619a      	str	r2, [r3, #24]
}
 8002048:	bf00      	nop
 800204a:	3714      	adds	r7, #20
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800205a:	af00      	add	r7, sp, #0
 800205c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002060:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002064:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002066:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800206a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d102      	bne.n	800207a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	f001 b83a 	b.w	80030ee <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800207a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800207e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	2b00      	cmp	r3, #0
 800208c:	f000 816f 	beq.w	800236e <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002090:	4bb5      	ldr	r3, [pc, #724]	; (8002368 <HAL_RCC_OscConfig+0x314>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f003 030c 	and.w	r3, r3, #12
 8002098:	2b04      	cmp	r3, #4
 800209a:	d00c      	beq.n	80020b6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800209c:	4bb2      	ldr	r3, [pc, #712]	; (8002368 <HAL_RCC_OscConfig+0x314>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f003 030c 	and.w	r3, r3, #12
 80020a4:	2b08      	cmp	r3, #8
 80020a6:	d15c      	bne.n	8002162 <HAL_RCC_OscConfig+0x10e>
 80020a8:	4baf      	ldr	r3, [pc, #700]	; (8002368 <HAL_RCC_OscConfig+0x314>)
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80020b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020b4:	d155      	bne.n	8002162 <HAL_RCC_OscConfig+0x10e>
 80020b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020ba:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020be:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80020c2:	fa93 f3a3 	rbit	r3, r3
 80020c6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80020ca:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020ce:	fab3 f383 	clz	r3, r3
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	095b      	lsrs	r3, r3, #5
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	f043 0301 	orr.w	r3, r3, #1
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d102      	bne.n	80020e8 <HAL_RCC_OscConfig+0x94>
 80020e2:	4ba1      	ldr	r3, [pc, #644]	; (8002368 <HAL_RCC_OscConfig+0x314>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	e015      	b.n	8002114 <HAL_RCC_OscConfig+0xc0>
 80020e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020ec:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80020f4:	fa93 f3a3 	rbit	r3, r3
 80020f8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80020fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002100:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002104:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8002108:	fa93 f3a3 	rbit	r3, r3
 800210c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002110:	4b95      	ldr	r3, [pc, #596]	; (8002368 <HAL_RCC_OscConfig+0x314>)
 8002112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002114:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002118:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800211c:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8002120:	fa92 f2a2 	rbit	r2, r2
 8002124:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8002128:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800212c:	fab2 f282 	clz	r2, r2
 8002130:	b2d2      	uxtb	r2, r2
 8002132:	f042 0220 	orr.w	r2, r2, #32
 8002136:	b2d2      	uxtb	r2, r2
 8002138:	f002 021f 	and.w	r2, r2, #31
 800213c:	2101      	movs	r1, #1
 800213e:	fa01 f202 	lsl.w	r2, r1, r2
 8002142:	4013      	ands	r3, r2
 8002144:	2b00      	cmp	r3, #0
 8002146:	f000 8111 	beq.w	800236c <HAL_RCC_OscConfig+0x318>
 800214a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800214e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	2b00      	cmp	r3, #0
 8002158:	f040 8108 	bne.w	800236c <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	f000 bfc6 	b.w	80030ee <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002162:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002166:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002172:	d106      	bne.n	8002182 <HAL_RCC_OscConfig+0x12e>
 8002174:	4b7c      	ldr	r3, [pc, #496]	; (8002368 <HAL_RCC_OscConfig+0x314>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a7b      	ldr	r2, [pc, #492]	; (8002368 <HAL_RCC_OscConfig+0x314>)
 800217a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800217e:	6013      	str	r3, [r2, #0]
 8002180:	e036      	b.n	80021f0 <HAL_RCC_OscConfig+0x19c>
 8002182:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002186:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d10c      	bne.n	80021ac <HAL_RCC_OscConfig+0x158>
 8002192:	4b75      	ldr	r3, [pc, #468]	; (8002368 <HAL_RCC_OscConfig+0x314>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a74      	ldr	r2, [pc, #464]	; (8002368 <HAL_RCC_OscConfig+0x314>)
 8002198:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800219c:	6013      	str	r3, [r2, #0]
 800219e:	4b72      	ldr	r3, [pc, #456]	; (8002368 <HAL_RCC_OscConfig+0x314>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a71      	ldr	r2, [pc, #452]	; (8002368 <HAL_RCC_OscConfig+0x314>)
 80021a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021a8:	6013      	str	r3, [r2, #0]
 80021aa:	e021      	b.n	80021f0 <HAL_RCC_OscConfig+0x19c>
 80021ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021b0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021bc:	d10c      	bne.n	80021d8 <HAL_RCC_OscConfig+0x184>
 80021be:	4b6a      	ldr	r3, [pc, #424]	; (8002368 <HAL_RCC_OscConfig+0x314>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a69      	ldr	r2, [pc, #420]	; (8002368 <HAL_RCC_OscConfig+0x314>)
 80021c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021c8:	6013      	str	r3, [r2, #0]
 80021ca:	4b67      	ldr	r3, [pc, #412]	; (8002368 <HAL_RCC_OscConfig+0x314>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a66      	ldr	r2, [pc, #408]	; (8002368 <HAL_RCC_OscConfig+0x314>)
 80021d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021d4:	6013      	str	r3, [r2, #0]
 80021d6:	e00b      	b.n	80021f0 <HAL_RCC_OscConfig+0x19c>
 80021d8:	4b63      	ldr	r3, [pc, #396]	; (8002368 <HAL_RCC_OscConfig+0x314>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a62      	ldr	r2, [pc, #392]	; (8002368 <HAL_RCC_OscConfig+0x314>)
 80021de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021e2:	6013      	str	r3, [r2, #0]
 80021e4:	4b60      	ldr	r3, [pc, #384]	; (8002368 <HAL_RCC_OscConfig+0x314>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a5f      	ldr	r2, [pc, #380]	; (8002368 <HAL_RCC_OscConfig+0x314>)
 80021ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021ee:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021f4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d059      	beq.n	80022b4 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002200:	f7ff fc12 	bl	8001a28 <HAL_GetTick>
 8002204:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002208:	e00a      	b.n	8002220 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800220a:	f7ff fc0d 	bl	8001a28 <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2b64      	cmp	r3, #100	; 0x64
 8002218:	d902      	bls.n	8002220 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	f000 bf67 	b.w	80030ee <HAL_RCC_OscConfig+0x109a>
 8002220:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002224:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002228:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800222c:	fa93 f3a3 	rbit	r3, r3
 8002230:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8002234:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002238:	fab3 f383 	clz	r3, r3
 800223c:	b2db      	uxtb	r3, r3
 800223e:	095b      	lsrs	r3, r3, #5
 8002240:	b2db      	uxtb	r3, r3
 8002242:	f043 0301 	orr.w	r3, r3, #1
 8002246:	b2db      	uxtb	r3, r3
 8002248:	2b01      	cmp	r3, #1
 800224a:	d102      	bne.n	8002252 <HAL_RCC_OscConfig+0x1fe>
 800224c:	4b46      	ldr	r3, [pc, #280]	; (8002368 <HAL_RCC_OscConfig+0x314>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	e015      	b.n	800227e <HAL_RCC_OscConfig+0x22a>
 8002252:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002256:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800225a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800225e:	fa93 f3a3 	rbit	r3, r3
 8002262:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8002266:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800226a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800226e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002272:	fa93 f3a3 	rbit	r3, r3
 8002276:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800227a:	4b3b      	ldr	r3, [pc, #236]	; (8002368 <HAL_RCC_OscConfig+0x314>)
 800227c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002282:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8002286:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800228a:	fa92 f2a2 	rbit	r2, r2
 800228e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8002292:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002296:	fab2 f282 	clz	r2, r2
 800229a:	b2d2      	uxtb	r2, r2
 800229c:	f042 0220 	orr.w	r2, r2, #32
 80022a0:	b2d2      	uxtb	r2, r2
 80022a2:	f002 021f 	and.w	r2, r2, #31
 80022a6:	2101      	movs	r1, #1
 80022a8:	fa01 f202 	lsl.w	r2, r1, r2
 80022ac:	4013      	ands	r3, r2
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d0ab      	beq.n	800220a <HAL_RCC_OscConfig+0x1b6>
 80022b2:	e05c      	b.n	800236e <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b4:	f7ff fbb8 	bl	8001a28 <HAL_GetTick>
 80022b8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022bc:	e00a      	b.n	80022d4 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022be:	f7ff fbb3 	bl	8001a28 <HAL_GetTick>
 80022c2:	4602      	mov	r2, r0
 80022c4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b64      	cmp	r3, #100	; 0x64
 80022cc:	d902      	bls.n	80022d4 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	f000 bf0d 	b.w	80030ee <HAL_RCC_OscConfig+0x109a>
 80022d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022d8:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022dc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80022e0:	fa93 f3a3 	rbit	r3, r3
 80022e4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80022e8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ec:	fab3 f383 	clz	r3, r3
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	095b      	lsrs	r3, r3, #5
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	f043 0301 	orr.w	r3, r3, #1
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d102      	bne.n	8002306 <HAL_RCC_OscConfig+0x2b2>
 8002300:	4b19      	ldr	r3, [pc, #100]	; (8002368 <HAL_RCC_OscConfig+0x314>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	e015      	b.n	8002332 <HAL_RCC_OscConfig+0x2de>
 8002306:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800230a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002312:	fa93 f3a3 	rbit	r3, r3
 8002316:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800231a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800231e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002322:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002326:	fa93 f3a3 	rbit	r3, r3
 800232a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800232e:	4b0e      	ldr	r3, [pc, #56]	; (8002368 <HAL_RCC_OscConfig+0x314>)
 8002330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002332:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002336:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800233a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800233e:	fa92 f2a2 	rbit	r2, r2
 8002342:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8002346:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800234a:	fab2 f282 	clz	r2, r2
 800234e:	b2d2      	uxtb	r2, r2
 8002350:	f042 0220 	orr.w	r2, r2, #32
 8002354:	b2d2      	uxtb	r2, r2
 8002356:	f002 021f 	and.w	r2, r2, #31
 800235a:	2101      	movs	r1, #1
 800235c:	fa01 f202 	lsl.w	r2, r1, r2
 8002360:	4013      	ands	r3, r2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d1ab      	bne.n	80022be <HAL_RCC_OscConfig+0x26a>
 8002366:	e002      	b.n	800236e <HAL_RCC_OscConfig+0x31a>
 8002368:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800236c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800236e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002372:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0302 	and.w	r3, r3, #2
 800237e:	2b00      	cmp	r3, #0
 8002380:	f000 817f 	beq.w	8002682 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002384:	4ba7      	ldr	r3, [pc, #668]	; (8002624 <HAL_RCC_OscConfig+0x5d0>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f003 030c 	and.w	r3, r3, #12
 800238c:	2b00      	cmp	r3, #0
 800238e:	d00c      	beq.n	80023aa <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002390:	4ba4      	ldr	r3, [pc, #656]	; (8002624 <HAL_RCC_OscConfig+0x5d0>)
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f003 030c 	and.w	r3, r3, #12
 8002398:	2b08      	cmp	r3, #8
 800239a:	d173      	bne.n	8002484 <HAL_RCC_OscConfig+0x430>
 800239c:	4ba1      	ldr	r3, [pc, #644]	; (8002624 <HAL_RCC_OscConfig+0x5d0>)
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80023a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023a8:	d16c      	bne.n	8002484 <HAL_RCC_OscConfig+0x430>
 80023aa:	2302      	movs	r3, #2
 80023ac:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b0:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80023b4:	fa93 f3a3 	rbit	r3, r3
 80023b8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80023bc:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023c0:	fab3 f383 	clz	r3, r3
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	095b      	lsrs	r3, r3, #5
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	f043 0301 	orr.w	r3, r3, #1
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d102      	bne.n	80023da <HAL_RCC_OscConfig+0x386>
 80023d4:	4b93      	ldr	r3, [pc, #588]	; (8002624 <HAL_RCC_OscConfig+0x5d0>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	e013      	b.n	8002402 <HAL_RCC_OscConfig+0x3ae>
 80023da:	2302      	movs	r3, #2
 80023dc:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80023e4:	fa93 f3a3 	rbit	r3, r3
 80023e8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80023ec:	2302      	movs	r3, #2
 80023ee:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80023f2:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80023f6:	fa93 f3a3 	rbit	r3, r3
 80023fa:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80023fe:	4b89      	ldr	r3, [pc, #548]	; (8002624 <HAL_RCC_OscConfig+0x5d0>)
 8002400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002402:	2202      	movs	r2, #2
 8002404:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8002408:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800240c:	fa92 f2a2 	rbit	r2, r2
 8002410:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8002414:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002418:	fab2 f282 	clz	r2, r2
 800241c:	b2d2      	uxtb	r2, r2
 800241e:	f042 0220 	orr.w	r2, r2, #32
 8002422:	b2d2      	uxtb	r2, r2
 8002424:	f002 021f 	and.w	r2, r2, #31
 8002428:	2101      	movs	r1, #1
 800242a:	fa01 f202 	lsl.w	r2, r1, r2
 800242e:	4013      	ands	r3, r2
 8002430:	2b00      	cmp	r3, #0
 8002432:	d00a      	beq.n	800244a <HAL_RCC_OscConfig+0x3f6>
 8002434:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002438:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	2b01      	cmp	r3, #1
 8002442:	d002      	beq.n	800244a <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	f000 be52 	b.w	80030ee <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800244a:	4b76      	ldr	r3, [pc, #472]	; (8002624 <HAL_RCC_OscConfig+0x5d0>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002452:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002456:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	691b      	ldr	r3, [r3, #16]
 800245e:	21f8      	movs	r1, #248	; 0xf8
 8002460:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002464:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8002468:	fa91 f1a1 	rbit	r1, r1
 800246c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8002470:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002474:	fab1 f181 	clz	r1, r1
 8002478:	b2c9      	uxtb	r1, r1
 800247a:	408b      	lsls	r3, r1
 800247c:	4969      	ldr	r1, [pc, #420]	; (8002624 <HAL_RCC_OscConfig+0x5d0>)
 800247e:	4313      	orrs	r3, r2
 8002480:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002482:	e0fe      	b.n	8002682 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002484:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002488:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	2b00      	cmp	r3, #0
 8002492:	f000 8088 	beq.w	80025a6 <HAL_RCC_OscConfig+0x552>
 8002496:	2301      	movs	r3, #1
 8002498:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80024a0:	fa93 f3a3 	rbit	r3, r3
 80024a4:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80024a8:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024ac:	fab3 f383 	clz	r3, r3
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80024b6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	461a      	mov	r2, r3
 80024be:	2301      	movs	r3, #1
 80024c0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c2:	f7ff fab1 	bl	8001a28 <HAL_GetTick>
 80024c6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ca:	e00a      	b.n	80024e2 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024cc:	f7ff faac 	bl	8001a28 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d902      	bls.n	80024e2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	f000 be06 	b.w	80030ee <HAL_RCC_OscConfig+0x109a>
 80024e2:	2302      	movs	r3, #2
 80024e4:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80024ec:	fa93 f3a3 	rbit	r3, r3
 80024f0:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80024f4:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024f8:	fab3 f383 	clz	r3, r3
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	095b      	lsrs	r3, r3, #5
 8002500:	b2db      	uxtb	r3, r3
 8002502:	f043 0301 	orr.w	r3, r3, #1
 8002506:	b2db      	uxtb	r3, r3
 8002508:	2b01      	cmp	r3, #1
 800250a:	d102      	bne.n	8002512 <HAL_RCC_OscConfig+0x4be>
 800250c:	4b45      	ldr	r3, [pc, #276]	; (8002624 <HAL_RCC_OscConfig+0x5d0>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	e013      	b.n	800253a <HAL_RCC_OscConfig+0x4e6>
 8002512:	2302      	movs	r3, #2
 8002514:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002518:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800251c:	fa93 f3a3 	rbit	r3, r3
 8002520:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002524:	2302      	movs	r3, #2
 8002526:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800252a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800252e:	fa93 f3a3 	rbit	r3, r3
 8002532:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002536:	4b3b      	ldr	r3, [pc, #236]	; (8002624 <HAL_RCC_OscConfig+0x5d0>)
 8002538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253a:	2202      	movs	r2, #2
 800253c:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002540:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002544:	fa92 f2a2 	rbit	r2, r2
 8002548:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 800254c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002550:	fab2 f282 	clz	r2, r2
 8002554:	b2d2      	uxtb	r2, r2
 8002556:	f042 0220 	orr.w	r2, r2, #32
 800255a:	b2d2      	uxtb	r2, r2
 800255c:	f002 021f 	and.w	r2, r2, #31
 8002560:	2101      	movs	r1, #1
 8002562:	fa01 f202 	lsl.w	r2, r1, r2
 8002566:	4013      	ands	r3, r2
 8002568:	2b00      	cmp	r3, #0
 800256a:	d0af      	beq.n	80024cc <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800256c:	4b2d      	ldr	r3, [pc, #180]	; (8002624 <HAL_RCC_OscConfig+0x5d0>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002574:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002578:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	691b      	ldr	r3, [r3, #16]
 8002580:	21f8      	movs	r1, #248	; 0xf8
 8002582:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002586:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800258a:	fa91 f1a1 	rbit	r1, r1
 800258e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8002592:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002596:	fab1 f181 	clz	r1, r1
 800259a:	b2c9      	uxtb	r1, r1
 800259c:	408b      	lsls	r3, r1
 800259e:	4921      	ldr	r1, [pc, #132]	; (8002624 <HAL_RCC_OscConfig+0x5d0>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	600b      	str	r3, [r1, #0]
 80025a4:	e06d      	b.n	8002682 <HAL_RCC_OscConfig+0x62e>
 80025a6:	2301      	movs	r3, #1
 80025a8:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ac:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80025b0:	fa93 f3a3 	rbit	r3, r3
 80025b4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80025b8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025bc:	fab3 f383 	clz	r3, r3
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80025c6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	461a      	mov	r2, r3
 80025ce:	2300      	movs	r3, #0
 80025d0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d2:	f7ff fa29 	bl	8001a28 <HAL_GetTick>
 80025d6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025da:	e00a      	b.n	80025f2 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025dc:	f7ff fa24 	bl	8001a28 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d902      	bls.n	80025f2 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	f000 bd7e 	b.w	80030ee <HAL_RCC_OscConfig+0x109a>
 80025f2:	2302      	movs	r3, #2
 80025f4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80025fc:	fa93 f3a3 	rbit	r3, r3
 8002600:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8002604:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002608:	fab3 f383 	clz	r3, r3
 800260c:	b2db      	uxtb	r3, r3
 800260e:	095b      	lsrs	r3, r3, #5
 8002610:	b2db      	uxtb	r3, r3
 8002612:	f043 0301 	orr.w	r3, r3, #1
 8002616:	b2db      	uxtb	r3, r3
 8002618:	2b01      	cmp	r3, #1
 800261a:	d105      	bne.n	8002628 <HAL_RCC_OscConfig+0x5d4>
 800261c:	4b01      	ldr	r3, [pc, #4]	; (8002624 <HAL_RCC_OscConfig+0x5d0>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	e016      	b.n	8002650 <HAL_RCC_OscConfig+0x5fc>
 8002622:	bf00      	nop
 8002624:	40021000 	.word	0x40021000
 8002628:	2302      	movs	r3, #2
 800262a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002632:	fa93 f3a3 	rbit	r3, r3
 8002636:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800263a:	2302      	movs	r3, #2
 800263c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002640:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002644:	fa93 f3a3 	rbit	r3, r3
 8002648:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800264c:	4bbf      	ldr	r3, [pc, #764]	; (800294c <HAL_RCC_OscConfig+0x8f8>)
 800264e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002650:	2202      	movs	r2, #2
 8002652:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002656:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800265a:	fa92 f2a2 	rbit	r2, r2
 800265e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8002662:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002666:	fab2 f282 	clz	r2, r2
 800266a:	b2d2      	uxtb	r2, r2
 800266c:	f042 0220 	orr.w	r2, r2, #32
 8002670:	b2d2      	uxtb	r2, r2
 8002672:	f002 021f 	and.w	r2, r2, #31
 8002676:	2101      	movs	r1, #1
 8002678:	fa01 f202 	lsl.w	r2, r1, r2
 800267c:	4013      	ands	r3, r2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d1ac      	bne.n	80025dc <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002682:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002686:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0308 	and.w	r3, r3, #8
 8002692:	2b00      	cmp	r3, #0
 8002694:	f000 8113 	beq.w	80028be <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002698:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800269c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	695b      	ldr	r3, [r3, #20]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d07c      	beq.n	80027a2 <HAL_RCC_OscConfig+0x74e>
 80026a8:	2301      	movs	r3, #1
 80026aa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80026b2:	fa93 f3a3 	rbit	r3, r3
 80026b6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80026ba:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026be:	fab3 f383 	clz	r3, r3
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	461a      	mov	r2, r3
 80026c6:	4ba2      	ldr	r3, [pc, #648]	; (8002950 <HAL_RCC_OscConfig+0x8fc>)
 80026c8:	4413      	add	r3, r2
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	461a      	mov	r2, r3
 80026ce:	2301      	movs	r3, #1
 80026d0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026d2:	f7ff f9a9 	bl	8001a28 <HAL_GetTick>
 80026d6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026da:	e00a      	b.n	80026f2 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026dc:	f7ff f9a4 	bl	8001a28 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d902      	bls.n	80026f2 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	f000 bcfe 	b.w	80030ee <HAL_RCC_OscConfig+0x109a>
 80026f2:	2302      	movs	r3, #2
 80026f4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026fc:	fa93 f2a3 	rbit	r2, r3
 8002700:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002704:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002708:	601a      	str	r2, [r3, #0]
 800270a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800270e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002712:	2202      	movs	r2, #2
 8002714:	601a      	str	r2, [r3, #0]
 8002716:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800271a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	fa93 f2a3 	rbit	r2, r3
 8002724:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002728:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800272c:	601a      	str	r2, [r3, #0]
 800272e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002732:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002736:	2202      	movs	r2, #2
 8002738:	601a      	str	r2, [r3, #0]
 800273a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800273e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	fa93 f2a3 	rbit	r2, r3
 8002748:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800274c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002750:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002752:	4b7e      	ldr	r3, [pc, #504]	; (800294c <HAL_RCC_OscConfig+0x8f8>)
 8002754:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002756:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800275a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800275e:	2102      	movs	r1, #2
 8002760:	6019      	str	r1, [r3, #0]
 8002762:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002766:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	fa93 f1a3 	rbit	r1, r3
 8002770:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002774:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002778:	6019      	str	r1, [r3, #0]
  return result;
 800277a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800277e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	fab3 f383 	clz	r3, r3
 8002788:	b2db      	uxtb	r3, r3
 800278a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800278e:	b2db      	uxtb	r3, r3
 8002790:	f003 031f 	and.w	r3, r3, #31
 8002794:	2101      	movs	r1, #1
 8002796:	fa01 f303 	lsl.w	r3, r1, r3
 800279a:	4013      	ands	r3, r2
 800279c:	2b00      	cmp	r3, #0
 800279e:	d09d      	beq.n	80026dc <HAL_RCC_OscConfig+0x688>
 80027a0:	e08d      	b.n	80028be <HAL_RCC_OscConfig+0x86a>
 80027a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027a6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80027aa:	2201      	movs	r2, #1
 80027ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027b2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	fa93 f2a3 	rbit	r2, r3
 80027bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027c0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80027c4:	601a      	str	r2, [r3, #0]
  return result;
 80027c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027ca:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80027ce:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027d0:	fab3 f383 	clz	r3, r3
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	461a      	mov	r2, r3
 80027d8:	4b5d      	ldr	r3, [pc, #372]	; (8002950 <HAL_RCC_OscConfig+0x8fc>)
 80027da:	4413      	add	r3, r2
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	461a      	mov	r2, r3
 80027e0:	2300      	movs	r3, #0
 80027e2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027e4:	f7ff f920 	bl	8001a28 <HAL_GetTick>
 80027e8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027ec:	e00a      	b.n	8002804 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027ee:	f7ff f91b 	bl	8001a28 <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d902      	bls.n	8002804 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	f000 bc75 	b.w	80030ee <HAL_RCC_OscConfig+0x109a>
 8002804:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002808:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800280c:	2202      	movs	r2, #2
 800280e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002810:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002814:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	fa93 f2a3 	rbit	r2, r3
 800281e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002822:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002826:	601a      	str	r2, [r3, #0]
 8002828:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800282c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002830:	2202      	movs	r2, #2
 8002832:	601a      	str	r2, [r3, #0]
 8002834:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002838:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	fa93 f2a3 	rbit	r2, r3
 8002842:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002846:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800284a:	601a      	str	r2, [r3, #0]
 800284c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002850:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002854:	2202      	movs	r2, #2
 8002856:	601a      	str	r2, [r3, #0]
 8002858:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800285c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	fa93 f2a3 	rbit	r2, r3
 8002866:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800286a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800286e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002870:	4b36      	ldr	r3, [pc, #216]	; (800294c <HAL_RCC_OscConfig+0x8f8>)
 8002872:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002874:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002878:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800287c:	2102      	movs	r1, #2
 800287e:	6019      	str	r1, [r3, #0]
 8002880:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002884:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	fa93 f1a3 	rbit	r1, r3
 800288e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002892:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002896:	6019      	str	r1, [r3, #0]
  return result;
 8002898:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800289c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	fab3 f383 	clz	r3, r3
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	f003 031f 	and.w	r3, r3, #31
 80028b2:	2101      	movs	r1, #1
 80028b4:	fa01 f303 	lsl.w	r3, r1, r3
 80028b8:	4013      	ands	r3, r2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d197      	bne.n	80027ee <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028c2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0304 	and.w	r3, r3, #4
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	f000 81a5 	beq.w	8002c1e <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028d4:	2300      	movs	r3, #0
 80028d6:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028da:	4b1c      	ldr	r3, [pc, #112]	; (800294c <HAL_RCC_OscConfig+0x8f8>)
 80028dc:	69db      	ldr	r3, [r3, #28]
 80028de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d116      	bne.n	8002914 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028e6:	4b19      	ldr	r3, [pc, #100]	; (800294c <HAL_RCC_OscConfig+0x8f8>)
 80028e8:	69db      	ldr	r3, [r3, #28]
 80028ea:	4a18      	ldr	r2, [pc, #96]	; (800294c <HAL_RCC_OscConfig+0x8f8>)
 80028ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028f0:	61d3      	str	r3, [r2, #28]
 80028f2:	4b16      	ldr	r3, [pc, #88]	; (800294c <HAL_RCC_OscConfig+0x8f8>)
 80028f4:	69db      	ldr	r3, [r3, #28]
 80028f6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80028fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002902:	601a      	str	r2, [r3, #0]
 8002904:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002908:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800290c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800290e:	2301      	movs	r3, #1
 8002910:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002914:	4b0f      	ldr	r3, [pc, #60]	; (8002954 <HAL_RCC_OscConfig+0x900>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800291c:	2b00      	cmp	r3, #0
 800291e:	d121      	bne.n	8002964 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002920:	4b0c      	ldr	r3, [pc, #48]	; (8002954 <HAL_RCC_OscConfig+0x900>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a0b      	ldr	r2, [pc, #44]	; (8002954 <HAL_RCC_OscConfig+0x900>)
 8002926:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800292a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800292c:	f7ff f87c 	bl	8001a28 <HAL_GetTick>
 8002930:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002934:	e010      	b.n	8002958 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002936:	f7ff f877 	bl	8001a28 <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	2b64      	cmp	r3, #100	; 0x64
 8002944:	d908      	bls.n	8002958 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e3d1      	b.n	80030ee <HAL_RCC_OscConfig+0x109a>
 800294a:	bf00      	nop
 800294c:	40021000 	.word	0x40021000
 8002950:	10908120 	.word	0x10908120
 8002954:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002958:	4b8d      	ldr	r3, [pc, #564]	; (8002b90 <HAL_RCC_OscConfig+0xb3c>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002960:	2b00      	cmp	r3, #0
 8002962:	d0e8      	beq.n	8002936 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002964:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002968:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	2b01      	cmp	r3, #1
 8002972:	d106      	bne.n	8002982 <HAL_RCC_OscConfig+0x92e>
 8002974:	4b87      	ldr	r3, [pc, #540]	; (8002b94 <HAL_RCC_OscConfig+0xb40>)
 8002976:	6a1b      	ldr	r3, [r3, #32]
 8002978:	4a86      	ldr	r2, [pc, #536]	; (8002b94 <HAL_RCC_OscConfig+0xb40>)
 800297a:	f043 0301 	orr.w	r3, r3, #1
 800297e:	6213      	str	r3, [r2, #32]
 8002980:	e035      	b.n	80029ee <HAL_RCC_OscConfig+0x99a>
 8002982:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002986:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d10c      	bne.n	80029ac <HAL_RCC_OscConfig+0x958>
 8002992:	4b80      	ldr	r3, [pc, #512]	; (8002b94 <HAL_RCC_OscConfig+0xb40>)
 8002994:	6a1b      	ldr	r3, [r3, #32]
 8002996:	4a7f      	ldr	r2, [pc, #508]	; (8002b94 <HAL_RCC_OscConfig+0xb40>)
 8002998:	f023 0301 	bic.w	r3, r3, #1
 800299c:	6213      	str	r3, [r2, #32]
 800299e:	4b7d      	ldr	r3, [pc, #500]	; (8002b94 <HAL_RCC_OscConfig+0xb40>)
 80029a0:	6a1b      	ldr	r3, [r3, #32]
 80029a2:	4a7c      	ldr	r2, [pc, #496]	; (8002b94 <HAL_RCC_OscConfig+0xb40>)
 80029a4:	f023 0304 	bic.w	r3, r3, #4
 80029a8:	6213      	str	r3, [r2, #32]
 80029aa:	e020      	b.n	80029ee <HAL_RCC_OscConfig+0x99a>
 80029ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029b0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	2b05      	cmp	r3, #5
 80029ba:	d10c      	bne.n	80029d6 <HAL_RCC_OscConfig+0x982>
 80029bc:	4b75      	ldr	r3, [pc, #468]	; (8002b94 <HAL_RCC_OscConfig+0xb40>)
 80029be:	6a1b      	ldr	r3, [r3, #32]
 80029c0:	4a74      	ldr	r2, [pc, #464]	; (8002b94 <HAL_RCC_OscConfig+0xb40>)
 80029c2:	f043 0304 	orr.w	r3, r3, #4
 80029c6:	6213      	str	r3, [r2, #32]
 80029c8:	4b72      	ldr	r3, [pc, #456]	; (8002b94 <HAL_RCC_OscConfig+0xb40>)
 80029ca:	6a1b      	ldr	r3, [r3, #32]
 80029cc:	4a71      	ldr	r2, [pc, #452]	; (8002b94 <HAL_RCC_OscConfig+0xb40>)
 80029ce:	f043 0301 	orr.w	r3, r3, #1
 80029d2:	6213      	str	r3, [r2, #32]
 80029d4:	e00b      	b.n	80029ee <HAL_RCC_OscConfig+0x99a>
 80029d6:	4b6f      	ldr	r3, [pc, #444]	; (8002b94 <HAL_RCC_OscConfig+0xb40>)
 80029d8:	6a1b      	ldr	r3, [r3, #32]
 80029da:	4a6e      	ldr	r2, [pc, #440]	; (8002b94 <HAL_RCC_OscConfig+0xb40>)
 80029dc:	f023 0301 	bic.w	r3, r3, #1
 80029e0:	6213      	str	r3, [r2, #32]
 80029e2:	4b6c      	ldr	r3, [pc, #432]	; (8002b94 <HAL_RCC_OscConfig+0xb40>)
 80029e4:	6a1b      	ldr	r3, [r3, #32]
 80029e6:	4a6b      	ldr	r2, [pc, #428]	; (8002b94 <HAL_RCC_OscConfig+0xb40>)
 80029e8:	f023 0304 	bic.w	r3, r3, #4
 80029ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029f2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	f000 8081 	beq.w	8002b02 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a00:	f7ff f812 	bl	8001a28 <HAL_GetTick>
 8002a04:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a08:	e00b      	b.n	8002a22 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a0a:	f7ff f80d 	bl	8001a28 <HAL_GetTick>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e365      	b.n	80030ee <HAL_RCC_OscConfig+0x109a>
 8002a22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a26:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002a2a:	2202      	movs	r2, #2
 8002a2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a32:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	fa93 f2a3 	rbit	r2, r3
 8002a3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a40:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002a44:	601a      	str	r2, [r3, #0]
 8002a46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a4a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002a4e:	2202      	movs	r2, #2
 8002a50:	601a      	str	r2, [r3, #0]
 8002a52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a56:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	fa93 f2a3 	rbit	r2, r3
 8002a60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a64:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002a68:	601a      	str	r2, [r3, #0]
  return result;
 8002a6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a6e:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002a72:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a74:	fab3 f383 	clz	r3, r3
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	095b      	lsrs	r3, r3, #5
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	f043 0302 	orr.w	r3, r3, #2
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d102      	bne.n	8002a8e <HAL_RCC_OscConfig+0xa3a>
 8002a88:	4b42      	ldr	r3, [pc, #264]	; (8002b94 <HAL_RCC_OscConfig+0xb40>)
 8002a8a:	6a1b      	ldr	r3, [r3, #32]
 8002a8c:	e013      	b.n	8002ab6 <HAL_RCC_OscConfig+0xa62>
 8002a8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a92:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002a96:	2202      	movs	r2, #2
 8002a98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a9e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	fa93 f2a3 	rbit	r2, r3
 8002aa8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002aac:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8002ab0:	601a      	str	r2, [r3, #0]
 8002ab2:	4b38      	ldr	r3, [pc, #224]	; (8002b94 <HAL_RCC_OscConfig+0xb40>)
 8002ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002aba:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002abe:	2102      	movs	r1, #2
 8002ac0:	6011      	str	r1, [r2, #0]
 8002ac2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002ac6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002aca:	6812      	ldr	r2, [r2, #0]
 8002acc:	fa92 f1a2 	rbit	r1, r2
 8002ad0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002ad4:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8002ad8:	6011      	str	r1, [r2, #0]
  return result;
 8002ada:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002ade:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8002ae2:	6812      	ldr	r2, [r2, #0]
 8002ae4:	fab2 f282 	clz	r2, r2
 8002ae8:	b2d2      	uxtb	r2, r2
 8002aea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002aee:	b2d2      	uxtb	r2, r2
 8002af0:	f002 021f 	and.w	r2, r2, #31
 8002af4:	2101      	movs	r1, #1
 8002af6:	fa01 f202 	lsl.w	r2, r1, r2
 8002afa:	4013      	ands	r3, r2
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d084      	beq.n	8002a0a <HAL_RCC_OscConfig+0x9b6>
 8002b00:	e083      	b.n	8002c0a <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b02:	f7fe ff91 	bl	8001a28 <HAL_GetTick>
 8002b06:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b0a:	e00b      	b.n	8002b24 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b0c:	f7fe ff8c 	bl	8001a28 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d901      	bls.n	8002b24 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	e2e4      	b.n	80030ee <HAL_RCC_OscConfig+0x109a>
 8002b24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b28:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002b2c:	2202      	movs	r2, #2
 8002b2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b34:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	fa93 f2a3 	rbit	r2, r3
 8002b3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b42:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002b46:	601a      	str	r2, [r3, #0]
 8002b48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b4c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002b50:	2202      	movs	r2, #2
 8002b52:	601a      	str	r2, [r3, #0]
 8002b54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b58:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	fa93 f2a3 	rbit	r2, r3
 8002b62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b66:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002b6a:	601a      	str	r2, [r3, #0]
  return result;
 8002b6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b70:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002b74:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b76:	fab3 f383 	clz	r3, r3
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	095b      	lsrs	r3, r3, #5
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	f043 0302 	orr.w	r3, r3, #2
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d106      	bne.n	8002b98 <HAL_RCC_OscConfig+0xb44>
 8002b8a:	4b02      	ldr	r3, [pc, #8]	; (8002b94 <HAL_RCC_OscConfig+0xb40>)
 8002b8c:	6a1b      	ldr	r3, [r3, #32]
 8002b8e:	e017      	b.n	8002bc0 <HAL_RCC_OscConfig+0xb6c>
 8002b90:	40007000 	.word	0x40007000
 8002b94:	40021000 	.word	0x40021000
 8002b98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b9c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002ba0:	2202      	movs	r2, #2
 8002ba2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ba8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	fa93 f2a3 	rbit	r2, r3
 8002bb2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bb6:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8002bba:	601a      	str	r2, [r3, #0]
 8002bbc:	4bb3      	ldr	r3, [pc, #716]	; (8002e8c <HAL_RCC_OscConfig+0xe38>)
 8002bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002bc4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002bc8:	2102      	movs	r1, #2
 8002bca:	6011      	str	r1, [r2, #0]
 8002bcc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002bd0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002bd4:	6812      	ldr	r2, [r2, #0]
 8002bd6:	fa92 f1a2 	rbit	r1, r2
 8002bda:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002bde:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002be2:	6011      	str	r1, [r2, #0]
  return result;
 8002be4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002be8:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002bec:	6812      	ldr	r2, [r2, #0]
 8002bee:	fab2 f282 	clz	r2, r2
 8002bf2:	b2d2      	uxtb	r2, r2
 8002bf4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bf8:	b2d2      	uxtb	r2, r2
 8002bfa:	f002 021f 	and.w	r2, r2, #31
 8002bfe:	2101      	movs	r1, #1
 8002c00:	fa01 f202 	lsl.w	r2, r1, r2
 8002c04:	4013      	ands	r3, r2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d180      	bne.n	8002b0c <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c0a:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d105      	bne.n	8002c1e <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c12:	4b9e      	ldr	r3, [pc, #632]	; (8002e8c <HAL_RCC_OscConfig+0xe38>)
 8002c14:	69db      	ldr	r3, [r3, #28]
 8002c16:	4a9d      	ldr	r2, [pc, #628]	; (8002e8c <HAL_RCC_OscConfig+0xe38>)
 8002c18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c1c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c22:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	f000 825e 	beq.w	80030ec <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c30:	4b96      	ldr	r3, [pc, #600]	; (8002e8c <HAL_RCC_OscConfig+0xe38>)
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f003 030c 	and.w	r3, r3, #12
 8002c38:	2b08      	cmp	r3, #8
 8002c3a:	f000 821f 	beq.w	800307c <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c42:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	f040 8170 	bne.w	8002f30 <HAL_RCC_OscConfig+0xedc>
 8002c50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c54:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002c58:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002c5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c62:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	fa93 f2a3 	rbit	r2, r3
 8002c6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c70:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002c74:	601a      	str	r2, [r3, #0]
  return result;
 8002c76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c7a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002c7e:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c80:	fab3 f383 	clz	r3, r3
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c8a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	461a      	mov	r2, r3
 8002c92:	2300      	movs	r3, #0
 8002c94:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c96:	f7fe fec7 	bl	8001a28 <HAL_GetTick>
 8002c9a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c9e:	e009      	b.n	8002cb4 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ca0:	f7fe fec2 	bl	8001a28 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d901      	bls.n	8002cb4 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e21c      	b.n	80030ee <HAL_RCC_OscConfig+0x109a>
 8002cb4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cb8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002cbc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cc0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cc6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	fa93 f2a3 	rbit	r2, r3
 8002cd0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cd4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002cd8:	601a      	str	r2, [r3, #0]
  return result;
 8002cda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cde:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002ce2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ce4:	fab3 f383 	clz	r3, r3
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	095b      	lsrs	r3, r3, #5
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	f043 0301 	orr.w	r3, r3, #1
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d102      	bne.n	8002cfe <HAL_RCC_OscConfig+0xcaa>
 8002cf8:	4b64      	ldr	r3, [pc, #400]	; (8002e8c <HAL_RCC_OscConfig+0xe38>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	e027      	b.n	8002d4e <HAL_RCC_OscConfig+0xcfa>
 8002cfe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d02:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002d06:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d10:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	fa93 f2a3 	rbit	r2, r3
 8002d1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d1e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002d22:	601a      	str	r2, [r3, #0]
 8002d24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d28:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002d2c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d30:	601a      	str	r2, [r3, #0]
 8002d32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d36:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	fa93 f2a3 	rbit	r2, r3
 8002d40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d44:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8002d48:	601a      	str	r2, [r3, #0]
 8002d4a:	4b50      	ldr	r3, [pc, #320]	; (8002e8c <HAL_RCC_OscConfig+0xe38>)
 8002d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002d52:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002d56:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002d5a:	6011      	str	r1, [r2, #0]
 8002d5c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002d60:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002d64:	6812      	ldr	r2, [r2, #0]
 8002d66:	fa92 f1a2 	rbit	r1, r2
 8002d6a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002d6e:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002d72:	6011      	str	r1, [r2, #0]
  return result;
 8002d74:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002d78:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002d7c:	6812      	ldr	r2, [r2, #0]
 8002d7e:	fab2 f282 	clz	r2, r2
 8002d82:	b2d2      	uxtb	r2, r2
 8002d84:	f042 0220 	orr.w	r2, r2, #32
 8002d88:	b2d2      	uxtb	r2, r2
 8002d8a:	f002 021f 	and.w	r2, r2, #31
 8002d8e:	2101      	movs	r1, #1
 8002d90:	fa01 f202 	lsl.w	r2, r1, r2
 8002d94:	4013      	ands	r3, r2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d182      	bne.n	8002ca0 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d9a:	4b3c      	ldr	r3, [pc, #240]	; (8002e8c <HAL_RCC_OscConfig+0xe38>)
 8002d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d9e:	f023 020f 	bic.w	r2, r3, #15
 8002da2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002da6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dae:	4937      	ldr	r1, [pc, #220]	; (8002e8c <HAL_RCC_OscConfig+0xe38>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002db4:	4b35      	ldr	r3, [pc, #212]	; (8002e8c <HAL_RCC_OscConfig+0xe38>)
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002dbc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dc0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	6a19      	ldr	r1, [r3, #32]
 8002dc8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dcc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	69db      	ldr	r3, [r3, #28]
 8002dd4:	430b      	orrs	r3, r1
 8002dd6:	492d      	ldr	r1, [pc, #180]	; (8002e8c <HAL_RCC_OscConfig+0xe38>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	604b      	str	r3, [r1, #4]
 8002ddc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002de0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002de4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002de8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dee:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	fa93 f2a3 	rbit	r2, r3
 8002df8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dfc:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002e00:	601a      	str	r2, [r3, #0]
  return result;
 8002e02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e06:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002e0a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e0c:	fab3 f383 	clz	r3, r3
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e16:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	2301      	movs	r3, #1
 8002e20:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e22:	f7fe fe01 	bl	8001a28 <HAL_GetTick>
 8002e26:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e2a:	e009      	b.n	8002e40 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e2c:	f7fe fdfc 	bl	8001a28 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d901      	bls.n	8002e40 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e156      	b.n	80030ee <HAL_RCC_OscConfig+0x109a>
 8002e40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e44:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002e48:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e52:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	fa93 f2a3 	rbit	r2, r3
 8002e5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e60:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002e64:	601a      	str	r2, [r3, #0]
  return result;
 8002e66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e6a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002e6e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e70:	fab3 f383 	clz	r3, r3
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	095b      	lsrs	r3, r3, #5
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	f043 0301 	orr.w	r3, r3, #1
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d105      	bne.n	8002e90 <HAL_RCC_OscConfig+0xe3c>
 8002e84:	4b01      	ldr	r3, [pc, #4]	; (8002e8c <HAL_RCC_OscConfig+0xe38>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	e02a      	b.n	8002ee0 <HAL_RCC_OscConfig+0xe8c>
 8002e8a:	bf00      	nop
 8002e8c:	40021000 	.word	0x40021000
 8002e90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e94:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002e98:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ea2:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	fa93 f2a3 	rbit	r2, r3
 8002eac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002eb0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002eb4:	601a      	str	r2, [r3, #0]
 8002eb6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002eba:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002ebe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ec2:	601a      	str	r2, [r3, #0]
 8002ec4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ec8:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	fa93 f2a3 	rbit	r2, r3
 8002ed2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ed6:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8002eda:	601a      	str	r2, [r3, #0]
 8002edc:	4b86      	ldr	r3, [pc, #536]	; (80030f8 <HAL_RCC_OscConfig+0x10a4>)
 8002ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002ee4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002ee8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002eec:	6011      	str	r1, [r2, #0]
 8002eee:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002ef2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002ef6:	6812      	ldr	r2, [r2, #0]
 8002ef8:	fa92 f1a2 	rbit	r1, r2
 8002efc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002f00:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002f04:	6011      	str	r1, [r2, #0]
  return result;
 8002f06:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002f0a:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002f0e:	6812      	ldr	r2, [r2, #0]
 8002f10:	fab2 f282 	clz	r2, r2
 8002f14:	b2d2      	uxtb	r2, r2
 8002f16:	f042 0220 	orr.w	r2, r2, #32
 8002f1a:	b2d2      	uxtb	r2, r2
 8002f1c:	f002 021f 	and.w	r2, r2, #31
 8002f20:	2101      	movs	r1, #1
 8002f22:	fa01 f202 	lsl.w	r2, r1, r2
 8002f26:	4013      	ands	r3, r2
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	f43f af7f 	beq.w	8002e2c <HAL_RCC_OscConfig+0xdd8>
 8002f2e:	e0dd      	b.n	80030ec <HAL_RCC_OscConfig+0x1098>
 8002f30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f34:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002f38:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f42:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	fa93 f2a3 	rbit	r2, r3
 8002f4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f50:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002f54:	601a      	str	r2, [r3, #0]
  return result;
 8002f56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f5a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002f5e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f60:	fab3 f383 	clz	r3, r3
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f6a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	461a      	mov	r2, r3
 8002f72:	2300      	movs	r3, #0
 8002f74:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f76:	f7fe fd57 	bl	8001a28 <HAL_GetTick>
 8002f7a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f7e:	e009      	b.n	8002f94 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f80:	f7fe fd52 	bl	8001a28 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d901      	bls.n	8002f94 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	e0ac      	b.n	80030ee <HAL_RCC_OscConfig+0x109a>
 8002f94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f98:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002f9c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fa0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fa6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	fa93 f2a3 	rbit	r2, r3
 8002fb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fb4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002fb8:	601a      	str	r2, [r3, #0]
  return result;
 8002fba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fbe:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002fc2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fc4:	fab3 f383 	clz	r3, r3
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	095b      	lsrs	r3, r3, #5
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	f043 0301 	orr.w	r3, r3, #1
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d102      	bne.n	8002fde <HAL_RCC_OscConfig+0xf8a>
 8002fd8:	4b47      	ldr	r3, [pc, #284]	; (80030f8 <HAL_RCC_OscConfig+0x10a4>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	e027      	b.n	800302e <HAL_RCC_OscConfig+0xfda>
 8002fde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fe2:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002fe6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ff0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	fa93 f2a3 	rbit	r2, r3
 8002ffa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ffe:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003002:	601a      	str	r2, [r3, #0]
 8003004:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003008:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800300c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003010:	601a      	str	r2, [r3, #0]
 8003012:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003016:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	fa93 f2a3 	rbit	r2, r3
 8003020:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003024:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8003028:	601a      	str	r2, [r3, #0]
 800302a:	4b33      	ldr	r3, [pc, #204]	; (80030f8 <HAL_RCC_OscConfig+0x10a4>)
 800302c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003032:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003036:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800303a:	6011      	str	r1, [r2, #0]
 800303c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003040:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003044:	6812      	ldr	r2, [r2, #0]
 8003046:	fa92 f1a2 	rbit	r1, r2
 800304a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800304e:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8003052:	6011      	str	r1, [r2, #0]
  return result;
 8003054:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003058:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 800305c:	6812      	ldr	r2, [r2, #0]
 800305e:	fab2 f282 	clz	r2, r2
 8003062:	b2d2      	uxtb	r2, r2
 8003064:	f042 0220 	orr.w	r2, r2, #32
 8003068:	b2d2      	uxtb	r2, r2
 800306a:	f002 021f 	and.w	r2, r2, #31
 800306e:	2101      	movs	r1, #1
 8003070:	fa01 f202 	lsl.w	r2, r1, r2
 8003074:	4013      	ands	r3, r2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d182      	bne.n	8002f80 <HAL_RCC_OscConfig+0xf2c>
 800307a:	e037      	b.n	80030ec <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800307c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003080:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	699b      	ldr	r3, [r3, #24]
 8003088:	2b01      	cmp	r3, #1
 800308a:	d101      	bne.n	8003090 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e02e      	b.n	80030ee <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003090:	4b19      	ldr	r3, [pc, #100]	; (80030f8 <HAL_RCC_OscConfig+0x10a4>)
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003098:	4b17      	ldr	r3, [pc, #92]	; (80030f8 <HAL_RCC_OscConfig+0x10a4>)
 800309a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800309c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80030a0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80030a4:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80030a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030ac:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	69db      	ldr	r3, [r3, #28]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d117      	bne.n	80030e8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80030b8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80030bc:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80030c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030c4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d10b      	bne.n	80030e8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80030d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80030d4:	f003 020f 	and.w	r2, r3, #15
 80030d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030dc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d001      	beq.n	80030ec <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e000      	b.n	80030ee <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	40021000 	.word	0x40021000

080030fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b09e      	sub	sp, #120	; 0x78
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003106:	2300      	movs	r3, #0
 8003108:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d101      	bne.n	8003114 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e162      	b.n	80033da <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003114:	4b90      	ldr	r3, [pc, #576]	; (8003358 <HAL_RCC_ClockConfig+0x25c>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0307 	and.w	r3, r3, #7
 800311c:	683a      	ldr	r2, [r7, #0]
 800311e:	429a      	cmp	r2, r3
 8003120:	d910      	bls.n	8003144 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003122:	4b8d      	ldr	r3, [pc, #564]	; (8003358 <HAL_RCC_ClockConfig+0x25c>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f023 0207 	bic.w	r2, r3, #7
 800312a:	498b      	ldr	r1, [pc, #556]	; (8003358 <HAL_RCC_ClockConfig+0x25c>)
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	4313      	orrs	r3, r2
 8003130:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003132:	4b89      	ldr	r3, [pc, #548]	; (8003358 <HAL_RCC_ClockConfig+0x25c>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0307 	and.w	r3, r3, #7
 800313a:	683a      	ldr	r2, [r7, #0]
 800313c:	429a      	cmp	r2, r3
 800313e:	d001      	beq.n	8003144 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e14a      	b.n	80033da <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0302 	and.w	r3, r3, #2
 800314c:	2b00      	cmp	r3, #0
 800314e:	d008      	beq.n	8003162 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003150:	4b82      	ldr	r3, [pc, #520]	; (800335c <HAL_RCC_ClockConfig+0x260>)
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	497f      	ldr	r1, [pc, #508]	; (800335c <HAL_RCC_ClockConfig+0x260>)
 800315e:	4313      	orrs	r3, r2
 8003160:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	2b00      	cmp	r3, #0
 800316c:	f000 80dc 	beq.w	8003328 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	2b01      	cmp	r3, #1
 8003176:	d13c      	bne.n	80031f2 <HAL_RCC_ClockConfig+0xf6>
 8003178:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800317c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800317e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003180:	fa93 f3a3 	rbit	r3, r3
 8003184:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003186:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003188:	fab3 f383 	clz	r3, r3
 800318c:	b2db      	uxtb	r3, r3
 800318e:	095b      	lsrs	r3, r3, #5
 8003190:	b2db      	uxtb	r3, r3
 8003192:	f043 0301 	orr.w	r3, r3, #1
 8003196:	b2db      	uxtb	r3, r3
 8003198:	2b01      	cmp	r3, #1
 800319a:	d102      	bne.n	80031a2 <HAL_RCC_ClockConfig+0xa6>
 800319c:	4b6f      	ldr	r3, [pc, #444]	; (800335c <HAL_RCC_ClockConfig+0x260>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	e00f      	b.n	80031c2 <HAL_RCC_ClockConfig+0xc6>
 80031a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031a6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80031aa:	fa93 f3a3 	rbit	r3, r3
 80031ae:	667b      	str	r3, [r7, #100]	; 0x64
 80031b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031b4:	663b      	str	r3, [r7, #96]	; 0x60
 80031b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031b8:	fa93 f3a3 	rbit	r3, r3
 80031bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80031be:	4b67      	ldr	r3, [pc, #412]	; (800335c <HAL_RCC_ClockConfig+0x260>)
 80031c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80031c6:	65ba      	str	r2, [r7, #88]	; 0x58
 80031c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80031ca:	fa92 f2a2 	rbit	r2, r2
 80031ce:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80031d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80031d2:	fab2 f282 	clz	r2, r2
 80031d6:	b2d2      	uxtb	r2, r2
 80031d8:	f042 0220 	orr.w	r2, r2, #32
 80031dc:	b2d2      	uxtb	r2, r2
 80031de:	f002 021f 	and.w	r2, r2, #31
 80031e2:	2101      	movs	r1, #1
 80031e4:	fa01 f202 	lsl.w	r2, r1, r2
 80031e8:	4013      	ands	r3, r2
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d17b      	bne.n	80032e6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e0f3      	b.n	80033da <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d13c      	bne.n	8003274 <HAL_RCC_ClockConfig+0x178>
 80031fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031fe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003200:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003202:	fa93 f3a3 	rbit	r3, r3
 8003206:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003208:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800320a:	fab3 f383 	clz	r3, r3
 800320e:	b2db      	uxtb	r3, r3
 8003210:	095b      	lsrs	r3, r3, #5
 8003212:	b2db      	uxtb	r3, r3
 8003214:	f043 0301 	orr.w	r3, r3, #1
 8003218:	b2db      	uxtb	r3, r3
 800321a:	2b01      	cmp	r3, #1
 800321c:	d102      	bne.n	8003224 <HAL_RCC_ClockConfig+0x128>
 800321e:	4b4f      	ldr	r3, [pc, #316]	; (800335c <HAL_RCC_ClockConfig+0x260>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	e00f      	b.n	8003244 <HAL_RCC_ClockConfig+0x148>
 8003224:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003228:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800322a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800322c:	fa93 f3a3 	rbit	r3, r3
 8003230:	647b      	str	r3, [r7, #68]	; 0x44
 8003232:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003236:	643b      	str	r3, [r7, #64]	; 0x40
 8003238:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800323a:	fa93 f3a3 	rbit	r3, r3
 800323e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003240:	4b46      	ldr	r3, [pc, #280]	; (800335c <HAL_RCC_ClockConfig+0x260>)
 8003242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003244:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003248:	63ba      	str	r2, [r7, #56]	; 0x38
 800324a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800324c:	fa92 f2a2 	rbit	r2, r2
 8003250:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003252:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003254:	fab2 f282 	clz	r2, r2
 8003258:	b2d2      	uxtb	r2, r2
 800325a:	f042 0220 	orr.w	r2, r2, #32
 800325e:	b2d2      	uxtb	r2, r2
 8003260:	f002 021f 	and.w	r2, r2, #31
 8003264:	2101      	movs	r1, #1
 8003266:	fa01 f202 	lsl.w	r2, r1, r2
 800326a:	4013      	ands	r3, r2
 800326c:	2b00      	cmp	r3, #0
 800326e:	d13a      	bne.n	80032e6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e0b2      	b.n	80033da <HAL_RCC_ClockConfig+0x2de>
 8003274:	2302      	movs	r3, #2
 8003276:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800327a:	fa93 f3a3 	rbit	r3, r3
 800327e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003282:	fab3 f383 	clz	r3, r3
 8003286:	b2db      	uxtb	r3, r3
 8003288:	095b      	lsrs	r3, r3, #5
 800328a:	b2db      	uxtb	r3, r3
 800328c:	f043 0301 	orr.w	r3, r3, #1
 8003290:	b2db      	uxtb	r3, r3
 8003292:	2b01      	cmp	r3, #1
 8003294:	d102      	bne.n	800329c <HAL_RCC_ClockConfig+0x1a0>
 8003296:	4b31      	ldr	r3, [pc, #196]	; (800335c <HAL_RCC_ClockConfig+0x260>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	e00d      	b.n	80032b8 <HAL_RCC_ClockConfig+0x1bc>
 800329c:	2302      	movs	r3, #2
 800329e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a2:	fa93 f3a3 	rbit	r3, r3
 80032a6:	627b      	str	r3, [r7, #36]	; 0x24
 80032a8:	2302      	movs	r3, #2
 80032aa:	623b      	str	r3, [r7, #32]
 80032ac:	6a3b      	ldr	r3, [r7, #32]
 80032ae:	fa93 f3a3 	rbit	r3, r3
 80032b2:	61fb      	str	r3, [r7, #28]
 80032b4:	4b29      	ldr	r3, [pc, #164]	; (800335c <HAL_RCC_ClockConfig+0x260>)
 80032b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b8:	2202      	movs	r2, #2
 80032ba:	61ba      	str	r2, [r7, #24]
 80032bc:	69ba      	ldr	r2, [r7, #24]
 80032be:	fa92 f2a2 	rbit	r2, r2
 80032c2:	617a      	str	r2, [r7, #20]
  return result;
 80032c4:	697a      	ldr	r2, [r7, #20]
 80032c6:	fab2 f282 	clz	r2, r2
 80032ca:	b2d2      	uxtb	r2, r2
 80032cc:	f042 0220 	orr.w	r2, r2, #32
 80032d0:	b2d2      	uxtb	r2, r2
 80032d2:	f002 021f 	and.w	r2, r2, #31
 80032d6:	2101      	movs	r1, #1
 80032d8:	fa01 f202 	lsl.w	r2, r1, r2
 80032dc:	4013      	ands	r3, r2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d101      	bne.n	80032e6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e079      	b.n	80033da <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032e6:	4b1d      	ldr	r3, [pc, #116]	; (800335c <HAL_RCC_ClockConfig+0x260>)
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f023 0203 	bic.w	r2, r3, #3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	491a      	ldr	r1, [pc, #104]	; (800335c <HAL_RCC_ClockConfig+0x260>)
 80032f4:	4313      	orrs	r3, r2
 80032f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032f8:	f7fe fb96 	bl	8001a28 <HAL_GetTick>
 80032fc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032fe:	e00a      	b.n	8003316 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003300:	f7fe fb92 	bl	8001a28 <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	f241 3288 	movw	r2, #5000	; 0x1388
 800330e:	4293      	cmp	r3, r2
 8003310:	d901      	bls.n	8003316 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e061      	b.n	80033da <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003316:	4b11      	ldr	r3, [pc, #68]	; (800335c <HAL_RCC_ClockConfig+0x260>)
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f003 020c 	and.w	r2, r3, #12
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	429a      	cmp	r2, r3
 8003326:	d1eb      	bne.n	8003300 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003328:	4b0b      	ldr	r3, [pc, #44]	; (8003358 <HAL_RCC_ClockConfig+0x25c>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0307 	and.w	r3, r3, #7
 8003330:	683a      	ldr	r2, [r7, #0]
 8003332:	429a      	cmp	r2, r3
 8003334:	d214      	bcs.n	8003360 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003336:	4b08      	ldr	r3, [pc, #32]	; (8003358 <HAL_RCC_ClockConfig+0x25c>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f023 0207 	bic.w	r2, r3, #7
 800333e:	4906      	ldr	r1, [pc, #24]	; (8003358 <HAL_RCC_ClockConfig+0x25c>)
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	4313      	orrs	r3, r2
 8003344:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003346:	4b04      	ldr	r3, [pc, #16]	; (8003358 <HAL_RCC_ClockConfig+0x25c>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0307 	and.w	r3, r3, #7
 800334e:	683a      	ldr	r2, [r7, #0]
 8003350:	429a      	cmp	r2, r3
 8003352:	d005      	beq.n	8003360 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e040      	b.n	80033da <HAL_RCC_ClockConfig+0x2de>
 8003358:	40022000 	.word	0x40022000
 800335c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0304 	and.w	r3, r3, #4
 8003368:	2b00      	cmp	r3, #0
 800336a:	d008      	beq.n	800337e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800336c:	4b1d      	ldr	r3, [pc, #116]	; (80033e4 <HAL_RCC_ClockConfig+0x2e8>)
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	491a      	ldr	r1, [pc, #104]	; (80033e4 <HAL_RCC_ClockConfig+0x2e8>)
 800337a:	4313      	orrs	r3, r2
 800337c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0308 	and.w	r3, r3, #8
 8003386:	2b00      	cmp	r3, #0
 8003388:	d009      	beq.n	800339e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800338a:	4b16      	ldr	r3, [pc, #88]	; (80033e4 <HAL_RCC_ClockConfig+0x2e8>)
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	691b      	ldr	r3, [r3, #16]
 8003396:	00db      	lsls	r3, r3, #3
 8003398:	4912      	ldr	r1, [pc, #72]	; (80033e4 <HAL_RCC_ClockConfig+0x2e8>)
 800339a:	4313      	orrs	r3, r2
 800339c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800339e:	f000 f829 	bl	80033f4 <HAL_RCC_GetSysClockFreq>
 80033a2:	4601      	mov	r1, r0
 80033a4:	4b0f      	ldr	r3, [pc, #60]	; (80033e4 <HAL_RCC_ClockConfig+0x2e8>)
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033ac:	22f0      	movs	r2, #240	; 0xf0
 80033ae:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b0:	693a      	ldr	r2, [r7, #16]
 80033b2:	fa92 f2a2 	rbit	r2, r2
 80033b6:	60fa      	str	r2, [r7, #12]
  return result;
 80033b8:	68fa      	ldr	r2, [r7, #12]
 80033ba:	fab2 f282 	clz	r2, r2
 80033be:	b2d2      	uxtb	r2, r2
 80033c0:	40d3      	lsrs	r3, r2
 80033c2:	4a09      	ldr	r2, [pc, #36]	; (80033e8 <HAL_RCC_ClockConfig+0x2ec>)
 80033c4:	5cd3      	ldrb	r3, [r2, r3]
 80033c6:	fa21 f303 	lsr.w	r3, r1, r3
 80033ca:	4a08      	ldr	r2, [pc, #32]	; (80033ec <HAL_RCC_ClockConfig+0x2f0>)
 80033cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80033ce:	4b08      	ldr	r3, [pc, #32]	; (80033f0 <HAL_RCC_ClockConfig+0x2f4>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7fe fae4 	bl	80019a0 <HAL_InitTick>
  
  return HAL_OK;
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3778      	adds	r7, #120	; 0x78
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	40021000 	.word	0x40021000
 80033e8:	08006188 	.word	0x08006188
 80033ec:	20000000 	.word	0x20000000
 80033f0:	20000004 	.word	0x20000004

080033f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b08b      	sub	sp, #44	; 0x2c
 80033f8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80033fa:	2300      	movs	r3, #0
 80033fc:	61fb      	str	r3, [r7, #28]
 80033fe:	2300      	movs	r3, #0
 8003400:	61bb      	str	r3, [r7, #24]
 8003402:	2300      	movs	r3, #0
 8003404:	627b      	str	r3, [r7, #36]	; 0x24
 8003406:	2300      	movs	r3, #0
 8003408:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800340a:	2300      	movs	r3, #0
 800340c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800340e:	4b2a      	ldr	r3, [pc, #168]	; (80034b8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	f003 030c 	and.w	r3, r3, #12
 800341a:	2b04      	cmp	r3, #4
 800341c:	d002      	beq.n	8003424 <HAL_RCC_GetSysClockFreq+0x30>
 800341e:	2b08      	cmp	r3, #8
 8003420:	d003      	beq.n	800342a <HAL_RCC_GetSysClockFreq+0x36>
 8003422:	e03f      	b.n	80034a4 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003424:	4b25      	ldr	r3, [pc, #148]	; (80034bc <HAL_RCC_GetSysClockFreq+0xc8>)
 8003426:	623b      	str	r3, [r7, #32]
      break;
 8003428:	e03f      	b.n	80034aa <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003430:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003434:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003436:	68ba      	ldr	r2, [r7, #8]
 8003438:	fa92 f2a2 	rbit	r2, r2
 800343c:	607a      	str	r2, [r7, #4]
  return result;
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	fab2 f282 	clz	r2, r2
 8003444:	b2d2      	uxtb	r2, r2
 8003446:	40d3      	lsrs	r3, r2
 8003448:	4a1d      	ldr	r2, [pc, #116]	; (80034c0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800344a:	5cd3      	ldrb	r3, [r2, r3]
 800344c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800344e:	4b1a      	ldr	r3, [pc, #104]	; (80034b8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003452:	f003 030f 	and.w	r3, r3, #15
 8003456:	220f      	movs	r2, #15
 8003458:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800345a:	693a      	ldr	r2, [r7, #16]
 800345c:	fa92 f2a2 	rbit	r2, r2
 8003460:	60fa      	str	r2, [r7, #12]
  return result;
 8003462:	68fa      	ldr	r2, [r7, #12]
 8003464:	fab2 f282 	clz	r2, r2
 8003468:	b2d2      	uxtb	r2, r2
 800346a:	40d3      	lsrs	r3, r2
 800346c:	4a15      	ldr	r2, [pc, #84]	; (80034c4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800346e:	5cd3      	ldrb	r3, [r2, r3]
 8003470:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d008      	beq.n	800348e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800347c:	4a0f      	ldr	r2, [pc, #60]	; (80034bc <HAL_RCC_GetSysClockFreq+0xc8>)
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	fbb2 f2f3 	udiv	r2, r2, r3
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	fb02 f303 	mul.w	r3, r2, r3
 800348a:	627b      	str	r3, [r7, #36]	; 0x24
 800348c:	e007      	b.n	800349e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800348e:	4a0b      	ldr	r2, [pc, #44]	; (80034bc <HAL_RCC_GetSysClockFreq+0xc8>)
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	fbb2 f2f3 	udiv	r2, r2, r3
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	fb02 f303 	mul.w	r3, r2, r3
 800349c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800349e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a0:	623b      	str	r3, [r7, #32]
      break;
 80034a2:	e002      	b.n	80034aa <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80034a4:	4b05      	ldr	r3, [pc, #20]	; (80034bc <HAL_RCC_GetSysClockFreq+0xc8>)
 80034a6:	623b      	str	r3, [r7, #32]
      break;
 80034a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034aa:	6a3b      	ldr	r3, [r7, #32]
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	372c      	adds	r7, #44	; 0x2c
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr
 80034b8:	40021000 	.word	0x40021000
 80034bc:	007a1200 	.word	0x007a1200
 80034c0:	080061a0 	.word	0x080061a0
 80034c4:	080061b0 	.word	0x080061b0

080034c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034c8:	b480      	push	{r7}
 80034ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034cc:	4b03      	ldr	r3, [pc, #12]	; (80034dc <HAL_RCC_GetHCLKFreq+0x14>)
 80034ce:	681b      	ldr	r3, [r3, #0]
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop
 80034dc:	20000000 	.word	0x20000000

080034e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80034e6:	f7ff ffef 	bl	80034c8 <HAL_RCC_GetHCLKFreq>
 80034ea:	4601      	mov	r1, r0
 80034ec:	4b0b      	ldr	r3, [pc, #44]	; (800351c <HAL_RCC_GetPCLK1Freq+0x3c>)
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80034f4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80034f8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	fa92 f2a2 	rbit	r2, r2
 8003500:	603a      	str	r2, [r7, #0]
  return result;
 8003502:	683a      	ldr	r2, [r7, #0]
 8003504:	fab2 f282 	clz	r2, r2
 8003508:	b2d2      	uxtb	r2, r2
 800350a:	40d3      	lsrs	r3, r2
 800350c:	4a04      	ldr	r2, [pc, #16]	; (8003520 <HAL_RCC_GetPCLK1Freq+0x40>)
 800350e:	5cd3      	ldrb	r3, [r2, r3]
 8003510:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003514:	4618      	mov	r0, r3
 8003516:	3708      	adds	r7, #8
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}
 800351c:	40021000 	.word	0x40021000
 8003520:	08006198 	.word	0x08006198

08003524 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800352a:	f7ff ffcd 	bl	80034c8 <HAL_RCC_GetHCLKFreq>
 800352e:	4601      	mov	r1, r0
 8003530:	4b0b      	ldr	r3, [pc, #44]	; (8003560 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003538:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800353c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	fa92 f2a2 	rbit	r2, r2
 8003544:	603a      	str	r2, [r7, #0]
  return result;
 8003546:	683a      	ldr	r2, [r7, #0]
 8003548:	fab2 f282 	clz	r2, r2
 800354c:	b2d2      	uxtb	r2, r2
 800354e:	40d3      	lsrs	r3, r2
 8003550:	4a04      	ldr	r2, [pc, #16]	; (8003564 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003552:	5cd3      	ldrb	r3, [r2, r3]
 8003554:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003558:	4618      	mov	r0, r3
 800355a:	3708      	adds	r7, #8
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}
 8003560:	40021000 	.word	0x40021000
 8003564:	08006198 	.word	0x08006198

08003568 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b092      	sub	sp, #72	; 0x48
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003570:	2300      	movs	r3, #0
 8003572:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003574:	2300      	movs	r3, #0
 8003576:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003578:	2300      	movs	r3, #0
 800357a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003586:	2b00      	cmp	r3, #0
 8003588:	f000 80d4 	beq.w	8003734 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800358c:	4b4e      	ldr	r3, [pc, #312]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800358e:	69db      	ldr	r3, [r3, #28]
 8003590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d10e      	bne.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003598:	4b4b      	ldr	r3, [pc, #300]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800359a:	69db      	ldr	r3, [r3, #28]
 800359c:	4a4a      	ldr	r2, [pc, #296]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800359e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035a2:	61d3      	str	r3, [r2, #28]
 80035a4:	4b48      	ldr	r3, [pc, #288]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035a6:	69db      	ldr	r3, [r3, #28]
 80035a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ac:	60bb      	str	r3, [r7, #8]
 80035ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035b0:	2301      	movs	r3, #1
 80035b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035b6:	4b45      	ldr	r3, [pc, #276]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d118      	bne.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035c2:	4b42      	ldr	r3, [pc, #264]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a41      	ldr	r2, [pc, #260]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035cc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035ce:	f7fe fa2b 	bl	8001a28 <HAL_GetTick>
 80035d2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035d4:	e008      	b.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035d6:	f7fe fa27 	bl	8001a28 <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	2b64      	cmp	r3, #100	; 0x64
 80035e2:	d901      	bls.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e1d6      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035e8:	4b38      	ldr	r3, [pc, #224]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d0f0      	beq.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80035f4:	4b34      	ldr	r3, [pc, #208]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035f6:	6a1b      	ldr	r3, [r3, #32]
 80035f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80035fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003600:	2b00      	cmp	r3, #0
 8003602:	f000 8084 	beq.w	800370e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800360e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003610:	429a      	cmp	r2, r3
 8003612:	d07c      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003614:	4b2c      	ldr	r3, [pc, #176]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003616:	6a1b      	ldr	r3, [r3, #32]
 8003618:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800361c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800361e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003622:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003626:	fa93 f3a3 	rbit	r3, r3
 800362a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800362c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800362e:	fab3 f383 	clz	r3, r3
 8003632:	b2db      	uxtb	r3, r3
 8003634:	461a      	mov	r2, r3
 8003636:	4b26      	ldr	r3, [pc, #152]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003638:	4413      	add	r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	461a      	mov	r2, r3
 800363e:	2301      	movs	r3, #1
 8003640:	6013      	str	r3, [r2, #0]
 8003642:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003646:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800364a:	fa93 f3a3 	rbit	r3, r3
 800364e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003652:	fab3 f383 	clz	r3, r3
 8003656:	b2db      	uxtb	r3, r3
 8003658:	461a      	mov	r2, r3
 800365a:	4b1d      	ldr	r3, [pc, #116]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800365c:	4413      	add	r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	461a      	mov	r2, r3
 8003662:	2300      	movs	r3, #0
 8003664:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003666:	4a18      	ldr	r2, [pc, #96]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800366a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800366c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800366e:	f003 0301 	and.w	r3, r3, #1
 8003672:	2b00      	cmp	r3, #0
 8003674:	d04b      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003676:	f7fe f9d7 	bl	8001a28 <HAL_GetTick>
 800367a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800367c:	e00a      	b.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800367e:	f7fe f9d3 	bl	8001a28 <HAL_GetTick>
 8003682:	4602      	mov	r2, r0
 8003684:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	f241 3288 	movw	r2, #5000	; 0x1388
 800368c:	4293      	cmp	r3, r2
 800368e:	d901      	bls.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003690:	2303      	movs	r3, #3
 8003692:	e180      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003694:	2302      	movs	r3, #2
 8003696:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800369a:	fa93 f3a3 	rbit	r3, r3
 800369e:	627b      	str	r3, [r7, #36]	; 0x24
 80036a0:	2302      	movs	r3, #2
 80036a2:	623b      	str	r3, [r7, #32]
 80036a4:	6a3b      	ldr	r3, [r7, #32]
 80036a6:	fa93 f3a3 	rbit	r3, r3
 80036aa:	61fb      	str	r3, [r7, #28]
  return result;
 80036ac:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ae:	fab3 f383 	clz	r3, r3
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	095b      	lsrs	r3, r3, #5
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	f043 0302 	orr.w	r3, r3, #2
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d108      	bne.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80036c2:	4b01      	ldr	r3, [pc, #4]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036c4:	6a1b      	ldr	r3, [r3, #32]
 80036c6:	e00d      	b.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80036c8:	40021000 	.word	0x40021000
 80036cc:	40007000 	.word	0x40007000
 80036d0:	10908100 	.word	0x10908100
 80036d4:	2302      	movs	r3, #2
 80036d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	fa93 f3a3 	rbit	r3, r3
 80036de:	617b      	str	r3, [r7, #20]
 80036e0:	4b9a      	ldr	r3, [pc, #616]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e4:	2202      	movs	r2, #2
 80036e6:	613a      	str	r2, [r7, #16]
 80036e8:	693a      	ldr	r2, [r7, #16]
 80036ea:	fa92 f2a2 	rbit	r2, r2
 80036ee:	60fa      	str	r2, [r7, #12]
  return result;
 80036f0:	68fa      	ldr	r2, [r7, #12]
 80036f2:	fab2 f282 	clz	r2, r2
 80036f6:	b2d2      	uxtb	r2, r2
 80036f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036fc:	b2d2      	uxtb	r2, r2
 80036fe:	f002 021f 	and.w	r2, r2, #31
 8003702:	2101      	movs	r1, #1
 8003704:	fa01 f202 	lsl.w	r2, r1, r2
 8003708:	4013      	ands	r3, r2
 800370a:	2b00      	cmp	r3, #0
 800370c:	d0b7      	beq.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800370e:	4b8f      	ldr	r3, [pc, #572]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003710:	6a1b      	ldr	r3, [r3, #32]
 8003712:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	498c      	ldr	r1, [pc, #560]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800371c:	4313      	orrs	r3, r2
 800371e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003720:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003724:	2b01      	cmp	r3, #1
 8003726:	d105      	bne.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003728:	4b88      	ldr	r3, [pc, #544]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800372a:	69db      	ldr	r3, [r3, #28]
 800372c:	4a87      	ldr	r2, [pc, #540]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800372e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003732:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0301 	and.w	r3, r3, #1
 800373c:	2b00      	cmp	r3, #0
 800373e:	d008      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003740:	4b82      	ldr	r3, [pc, #520]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003744:	f023 0203 	bic.w	r2, r3, #3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	497f      	ldr	r1, [pc, #508]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800374e:	4313      	orrs	r3, r2
 8003750:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0302 	and.w	r3, r3, #2
 800375a:	2b00      	cmp	r3, #0
 800375c:	d008      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800375e:	4b7b      	ldr	r3, [pc, #492]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003762:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	4978      	ldr	r1, [pc, #480]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800376c:	4313      	orrs	r3, r2
 800376e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0304 	and.w	r3, r3, #4
 8003778:	2b00      	cmp	r3, #0
 800377a:	d008      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800377c:	4b73      	ldr	r3, [pc, #460]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800377e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003780:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	691b      	ldr	r3, [r3, #16]
 8003788:	4970      	ldr	r1, [pc, #448]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800378a:	4313      	orrs	r3, r2
 800378c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0320 	and.w	r3, r3, #32
 8003796:	2b00      	cmp	r3, #0
 8003798:	d008      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800379a:	4b6c      	ldr	r3, [pc, #432]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800379c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379e:	f023 0210 	bic.w	r2, r3, #16
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	69db      	ldr	r3, [r3, #28]
 80037a6:	4969      	ldr	r1, [pc, #420]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037a8:	4313      	orrs	r3, r2
 80037aa:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d008      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80037b8:	4b64      	ldr	r3, [pc, #400]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037c4:	4961      	ldr	r1, [pc, #388]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d008      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80037d6:	4b5d      	ldr	r3, [pc, #372]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037da:	f023 0220 	bic.w	r2, r3, #32
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a1b      	ldr	r3, [r3, #32]
 80037e2:	495a      	ldr	r1, [pc, #360]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037e4:	4313      	orrs	r3, r2
 80037e6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d008      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80037f4:	4b55      	ldr	r3, [pc, #340]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003800:	4952      	ldr	r1, [pc, #328]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003802:	4313      	orrs	r3, r2
 8003804:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0308 	and.w	r3, r3, #8
 800380e:	2b00      	cmp	r3, #0
 8003810:	d008      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003812:	4b4e      	ldr	r3, [pc, #312]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003816:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	695b      	ldr	r3, [r3, #20]
 800381e:	494b      	ldr	r1, [pc, #300]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003820:	4313      	orrs	r3, r2
 8003822:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0310 	and.w	r3, r3, #16
 800382c:	2b00      	cmp	r3, #0
 800382e:	d008      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003830:	4b46      	ldr	r3, [pc, #280]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003834:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	699b      	ldr	r3, [r3, #24]
 800383c:	4943      	ldr	r1, [pc, #268]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800383e:	4313      	orrs	r3, r2
 8003840:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800384a:	2b00      	cmp	r3, #0
 800384c:	d008      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800384e:	4b3f      	ldr	r3, [pc, #252]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385a:	493c      	ldr	r1, [pc, #240]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800385c:	4313      	orrs	r3, r2
 800385e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003868:	2b00      	cmp	r3, #0
 800386a:	d008      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800386c:	4b37      	ldr	r3, [pc, #220]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800386e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003870:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003878:	4934      	ldr	r1, [pc, #208]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800387a:	4313      	orrs	r3, r2
 800387c:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003886:	2b00      	cmp	r3, #0
 8003888:	d008      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800388a:	4b30      	ldr	r3, [pc, #192]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800388c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800388e:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003896:	492d      	ldr	r1, [pc, #180]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003898:	4313      	orrs	r3, r2
 800389a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d008      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80038a8:	4b28      	ldr	r3, [pc, #160]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80038aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038b4:	4925      	ldr	r1, [pc, #148]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d008      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80038c6:	4b21      	ldr	r3, [pc, #132]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80038c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ca:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d2:	491e      	ldr	r1, [pc, #120]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d008      	beq.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80038e4:	4b19      	ldr	r3, [pc, #100]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80038e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f0:	4916      	ldr	r1, [pc, #88]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d008      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003902:	4b12      	ldr	r3, [pc, #72]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003906:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800390e:	490f      	ldr	r1, [pc, #60]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003910:	4313      	orrs	r3, r2
 8003912:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800391c:	2b00      	cmp	r3, #0
 800391e:	d008      	beq.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003920:	4b0a      	ldr	r3, [pc, #40]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003924:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800392c:	4907      	ldr	r1, [pc, #28]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800392e:	4313      	orrs	r3, r2
 8003930:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d00c      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800393e:	4b03      	ldr	r3, [pc, #12]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003942:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	e002      	b.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800394a:	bf00      	nop
 800394c:	40021000 	.word	0x40021000
 8003950:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003952:	4913      	ldr	r1, [pc, #76]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003954:	4313      	orrs	r3, r2
 8003956:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d008      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003964:	4b0e      	ldr	r3, [pc, #56]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003968:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003970:	490b      	ldr	r1, [pc, #44]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003972:	4313      	orrs	r3, r2
 8003974:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d008      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003982:	4b07      	ldr	r3, [pc, #28]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003986:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800398e:	4904      	ldr	r1, [pc, #16]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003990:	4313      	orrs	r3, r2
 8003992:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3748      	adds	r7, #72	; 0x48
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	40021000 	.word	0x40021000

080039a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d101      	bne.n	80039b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e049      	b.n	8003a4a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d106      	bne.n	80039d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f7fd fd88 	bl	80014e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2202      	movs	r2, #2
 80039d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	3304      	adds	r3, #4
 80039e0:	4619      	mov	r1, r3
 80039e2:	4610      	mov	r0, r2
 80039e4:	f000 ff54 	bl	8004890 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3708      	adds	r7, #8
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}

08003a52 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003a52:	b580      	push	{r7, lr}
 8003a54:	b082      	sub	sp, #8
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d101      	bne.n	8003a64 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e049      	b.n	8003af8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d106      	bne.n	8003a7e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f000 f841 	bl	8003b00 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2202      	movs	r2, #2
 8003a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	3304      	adds	r3, #4
 8003a8e:	4619      	mov	r1, r3
 8003a90:	4610      	mov	r0, r2
 8003a92:	f000 fefd 	bl	8004890 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2201      	movs	r2, #1
 8003ada:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2201      	movs	r2, #1
 8003aea:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2201      	movs	r2, #1
 8003af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003af6:	2300      	movs	r3, #0
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3708      	adds	r7, #8
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003b08:	bf00      	nop
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d109      	bne.n	8003b38 <HAL_TIM_PWM_Start+0x24>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	bf14      	ite	ne
 8003b30:	2301      	movne	r3, #1
 8003b32:	2300      	moveq	r3, #0
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	e03c      	b.n	8003bb2 <HAL_TIM_PWM_Start+0x9e>
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	2b04      	cmp	r3, #4
 8003b3c:	d109      	bne.n	8003b52 <HAL_TIM_PWM_Start+0x3e>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	bf14      	ite	ne
 8003b4a:	2301      	movne	r3, #1
 8003b4c:	2300      	moveq	r3, #0
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	e02f      	b.n	8003bb2 <HAL_TIM_PWM_Start+0x9e>
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	2b08      	cmp	r3, #8
 8003b56:	d109      	bne.n	8003b6c <HAL_TIM_PWM_Start+0x58>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	bf14      	ite	ne
 8003b64:	2301      	movne	r3, #1
 8003b66:	2300      	moveq	r3, #0
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	e022      	b.n	8003bb2 <HAL_TIM_PWM_Start+0x9e>
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	2b0c      	cmp	r3, #12
 8003b70:	d109      	bne.n	8003b86 <HAL_TIM_PWM_Start+0x72>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	bf14      	ite	ne
 8003b7e:	2301      	movne	r3, #1
 8003b80:	2300      	moveq	r3, #0
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	e015      	b.n	8003bb2 <HAL_TIM_PWM_Start+0x9e>
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	2b10      	cmp	r3, #16
 8003b8a:	d109      	bne.n	8003ba0 <HAL_TIM_PWM_Start+0x8c>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	bf14      	ite	ne
 8003b98:	2301      	movne	r3, #1
 8003b9a:	2300      	moveq	r3, #0
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	e008      	b.n	8003bb2 <HAL_TIM_PWM_Start+0x9e>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	bf14      	ite	ne
 8003bac:	2301      	movne	r3, #1
 8003bae:	2300      	moveq	r3, #0
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d001      	beq.n	8003bba <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e0a1      	b.n	8003cfe <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d104      	bne.n	8003bca <HAL_TIM_PWM_Start+0xb6>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2202      	movs	r2, #2
 8003bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bc8:	e023      	b.n	8003c12 <HAL_TIM_PWM_Start+0xfe>
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	2b04      	cmp	r3, #4
 8003bce:	d104      	bne.n	8003bda <HAL_TIM_PWM_Start+0xc6>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2202      	movs	r2, #2
 8003bd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bd8:	e01b      	b.n	8003c12 <HAL_TIM_PWM_Start+0xfe>
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	2b08      	cmp	r3, #8
 8003bde:	d104      	bne.n	8003bea <HAL_TIM_PWM_Start+0xd6>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2202      	movs	r2, #2
 8003be4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003be8:	e013      	b.n	8003c12 <HAL_TIM_PWM_Start+0xfe>
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	2b0c      	cmp	r3, #12
 8003bee:	d104      	bne.n	8003bfa <HAL_TIM_PWM_Start+0xe6>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2202      	movs	r2, #2
 8003bf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003bf8:	e00b      	b.n	8003c12 <HAL_TIM_PWM_Start+0xfe>
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	2b10      	cmp	r3, #16
 8003bfe:	d104      	bne.n	8003c0a <HAL_TIM_PWM_Start+0xf6>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2202      	movs	r2, #2
 8003c04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c08:	e003      	b.n	8003c12 <HAL_TIM_PWM_Start+0xfe>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2202      	movs	r2, #2
 8003c0e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2201      	movs	r2, #1
 8003c18:	6839      	ldr	r1, [r7, #0]
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f001 fb9a 	bl	8005354 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a38      	ldr	r2, [pc, #224]	; (8003d08 <HAL_TIM_PWM_Start+0x1f4>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d018      	beq.n	8003c5c <HAL_TIM_PWM_Start+0x148>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a37      	ldr	r2, [pc, #220]	; (8003d0c <HAL_TIM_PWM_Start+0x1f8>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d013      	beq.n	8003c5c <HAL_TIM_PWM_Start+0x148>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a35      	ldr	r2, [pc, #212]	; (8003d10 <HAL_TIM_PWM_Start+0x1fc>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d00e      	beq.n	8003c5c <HAL_TIM_PWM_Start+0x148>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a34      	ldr	r2, [pc, #208]	; (8003d14 <HAL_TIM_PWM_Start+0x200>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d009      	beq.n	8003c5c <HAL_TIM_PWM_Start+0x148>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a32      	ldr	r2, [pc, #200]	; (8003d18 <HAL_TIM_PWM_Start+0x204>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d004      	beq.n	8003c5c <HAL_TIM_PWM_Start+0x148>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a31      	ldr	r2, [pc, #196]	; (8003d1c <HAL_TIM_PWM_Start+0x208>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d101      	bne.n	8003c60 <HAL_TIM_PWM_Start+0x14c>
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e000      	b.n	8003c62 <HAL_TIM_PWM_Start+0x14e>
 8003c60:	2300      	movs	r3, #0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d007      	beq.n	8003c76 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c74:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a23      	ldr	r2, [pc, #140]	; (8003d08 <HAL_TIM_PWM_Start+0x1f4>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d01d      	beq.n	8003cbc <HAL_TIM_PWM_Start+0x1a8>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c88:	d018      	beq.n	8003cbc <HAL_TIM_PWM_Start+0x1a8>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a24      	ldr	r2, [pc, #144]	; (8003d20 <HAL_TIM_PWM_Start+0x20c>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d013      	beq.n	8003cbc <HAL_TIM_PWM_Start+0x1a8>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a22      	ldr	r2, [pc, #136]	; (8003d24 <HAL_TIM_PWM_Start+0x210>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d00e      	beq.n	8003cbc <HAL_TIM_PWM_Start+0x1a8>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a1a      	ldr	r2, [pc, #104]	; (8003d0c <HAL_TIM_PWM_Start+0x1f8>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d009      	beq.n	8003cbc <HAL_TIM_PWM_Start+0x1a8>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a18      	ldr	r2, [pc, #96]	; (8003d10 <HAL_TIM_PWM_Start+0x1fc>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d004      	beq.n	8003cbc <HAL_TIM_PWM_Start+0x1a8>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a19      	ldr	r2, [pc, #100]	; (8003d1c <HAL_TIM_PWM_Start+0x208>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d115      	bne.n	8003ce8 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	689a      	ldr	r2, [r3, #8]
 8003cc2:	4b19      	ldr	r3, [pc, #100]	; (8003d28 <HAL_TIM_PWM_Start+0x214>)
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2b06      	cmp	r3, #6
 8003ccc:	d015      	beq.n	8003cfa <HAL_TIM_PWM_Start+0x1e6>
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cd4:	d011      	beq.n	8003cfa <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f042 0201 	orr.w	r2, r2, #1
 8003ce4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ce6:	e008      	b.n	8003cfa <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f042 0201 	orr.w	r2, r2, #1
 8003cf6:	601a      	str	r2, [r3, #0]
 8003cf8:	e000      	b.n	8003cfc <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cfa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003cfc:	2300      	movs	r3, #0
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3710      	adds	r7, #16
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop
 8003d08:	40012c00 	.word	0x40012c00
 8003d0c:	40013400 	.word	0x40013400
 8003d10:	40014000 	.word	0x40014000
 8003d14:	40014400 	.word	0x40014400
 8003d18:	40014800 	.word	0x40014800
 8003d1c:	40015000 	.word	0x40015000
 8003d20:	40000400 	.word	0x40000400
 8003d24:	40000800 	.word	0x40000800
 8003d28:	00010007 	.word	0x00010007

08003d2c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b082      	sub	sp, #8
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d101      	bne.n	8003d3e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e049      	b.n	8003dd2 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d106      	bne.n	8003d58 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f000 f841 	bl	8003dda <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2202      	movs	r2, #2
 8003d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	3304      	adds	r3, #4
 8003d68:	4619      	mov	r1, r3
 8003d6a:	4610      	mov	r0, r2
 8003d6c:	f000 fd90 	bl	8004890 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003dd0:	2300      	movs	r3, #0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3708      	adds	r7, #8
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}

08003dda <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003dda:	b480      	push	{r7}
 8003ddc:	b083      	sub	sp, #12
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003de2:	bf00      	nop
 8003de4:	370c      	adds	r7, #12
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr
	...

08003df0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b084      	sub	sp, #16
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d104      	bne.n	8003e0e <HAL_TIM_IC_Start_IT+0x1e>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	e023      	b.n	8003e56 <HAL_TIM_IC_Start_IT+0x66>
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	2b04      	cmp	r3, #4
 8003e12:	d104      	bne.n	8003e1e <HAL_TIM_IC_Start_IT+0x2e>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	e01b      	b.n	8003e56 <HAL_TIM_IC_Start_IT+0x66>
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	2b08      	cmp	r3, #8
 8003e22:	d104      	bne.n	8003e2e <HAL_TIM_IC_Start_IT+0x3e>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	e013      	b.n	8003e56 <HAL_TIM_IC_Start_IT+0x66>
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	2b0c      	cmp	r3, #12
 8003e32:	d104      	bne.n	8003e3e <HAL_TIM_IC_Start_IT+0x4e>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	e00b      	b.n	8003e56 <HAL_TIM_IC_Start_IT+0x66>
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	2b10      	cmp	r3, #16
 8003e42:	d104      	bne.n	8003e4e <HAL_TIM_IC_Start_IT+0x5e>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	e003      	b.n	8003e56 <HAL_TIM_IC_Start_IT+0x66>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d104      	bne.n	8003e68 <HAL_TIM_IC_Start_IT+0x78>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	e013      	b.n	8003e90 <HAL_TIM_IC_Start_IT+0xa0>
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	2b04      	cmp	r3, #4
 8003e6c:	d104      	bne.n	8003e78 <HAL_TIM_IC_Start_IT+0x88>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	e00b      	b.n	8003e90 <HAL_TIM_IC_Start_IT+0xa0>
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	2b08      	cmp	r3, #8
 8003e7c:	d104      	bne.n	8003e88 <HAL_TIM_IC_Start_IT+0x98>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	e003      	b.n	8003e90 <HAL_TIM_IC_Start_IT+0xa0>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e92:	7bbb      	ldrb	r3, [r7, #14]
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d102      	bne.n	8003e9e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003e98:	7b7b      	ldrb	r3, [r7, #13]
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d001      	beq.n	8003ea2 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e0dd      	b.n	800405e <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d104      	bne.n	8003eb2 <HAL_TIM_IC_Start_IT+0xc2>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2202      	movs	r2, #2
 8003eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003eb0:	e023      	b.n	8003efa <HAL_TIM_IC_Start_IT+0x10a>
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	2b04      	cmp	r3, #4
 8003eb6:	d104      	bne.n	8003ec2 <HAL_TIM_IC_Start_IT+0xd2>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2202      	movs	r2, #2
 8003ebc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ec0:	e01b      	b.n	8003efa <HAL_TIM_IC_Start_IT+0x10a>
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	2b08      	cmp	r3, #8
 8003ec6:	d104      	bne.n	8003ed2 <HAL_TIM_IC_Start_IT+0xe2>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2202      	movs	r2, #2
 8003ecc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ed0:	e013      	b.n	8003efa <HAL_TIM_IC_Start_IT+0x10a>
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	2b0c      	cmp	r3, #12
 8003ed6:	d104      	bne.n	8003ee2 <HAL_TIM_IC_Start_IT+0xf2>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2202      	movs	r2, #2
 8003edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ee0:	e00b      	b.n	8003efa <HAL_TIM_IC_Start_IT+0x10a>
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	2b10      	cmp	r3, #16
 8003ee6:	d104      	bne.n	8003ef2 <HAL_TIM_IC_Start_IT+0x102>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2202      	movs	r2, #2
 8003eec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ef0:	e003      	b.n	8003efa <HAL_TIM_IC_Start_IT+0x10a>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2202      	movs	r2, #2
 8003ef6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d104      	bne.n	8003f0a <HAL_TIM_IC_Start_IT+0x11a>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2202      	movs	r2, #2
 8003f04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f08:	e013      	b.n	8003f32 <HAL_TIM_IC_Start_IT+0x142>
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	2b04      	cmp	r3, #4
 8003f0e:	d104      	bne.n	8003f1a <HAL_TIM_IC_Start_IT+0x12a>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2202      	movs	r2, #2
 8003f14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f18:	e00b      	b.n	8003f32 <HAL_TIM_IC_Start_IT+0x142>
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	2b08      	cmp	r3, #8
 8003f1e:	d104      	bne.n	8003f2a <HAL_TIM_IC_Start_IT+0x13a>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2202      	movs	r2, #2
 8003f24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003f28:	e003      	b.n	8003f32 <HAL_TIM_IC_Start_IT+0x142>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2202      	movs	r2, #2
 8003f2e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	2b0c      	cmp	r3, #12
 8003f36:	d841      	bhi.n	8003fbc <HAL_TIM_IC_Start_IT+0x1cc>
 8003f38:	a201      	add	r2, pc, #4	; (adr r2, 8003f40 <HAL_TIM_IC_Start_IT+0x150>)
 8003f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f3e:	bf00      	nop
 8003f40:	08003f75 	.word	0x08003f75
 8003f44:	08003fbd 	.word	0x08003fbd
 8003f48:	08003fbd 	.word	0x08003fbd
 8003f4c:	08003fbd 	.word	0x08003fbd
 8003f50:	08003f87 	.word	0x08003f87
 8003f54:	08003fbd 	.word	0x08003fbd
 8003f58:	08003fbd 	.word	0x08003fbd
 8003f5c:	08003fbd 	.word	0x08003fbd
 8003f60:	08003f99 	.word	0x08003f99
 8003f64:	08003fbd 	.word	0x08003fbd
 8003f68:	08003fbd 	.word	0x08003fbd
 8003f6c:	08003fbd 	.word	0x08003fbd
 8003f70:	08003fab 	.word	0x08003fab
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	68da      	ldr	r2, [r3, #12]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f042 0202 	orr.w	r2, r2, #2
 8003f82:	60da      	str	r2, [r3, #12]
      break;
 8003f84:	e01d      	b.n	8003fc2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	68da      	ldr	r2, [r3, #12]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f042 0204 	orr.w	r2, r2, #4
 8003f94:	60da      	str	r2, [r3, #12]
      break;
 8003f96:	e014      	b.n	8003fc2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68da      	ldr	r2, [r3, #12]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f042 0208 	orr.w	r2, r2, #8
 8003fa6:	60da      	str	r2, [r3, #12]
      break;
 8003fa8:	e00b      	b.n	8003fc2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	68da      	ldr	r2, [r3, #12]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f042 0210 	orr.w	r2, r2, #16
 8003fb8:	60da      	str	r2, [r3, #12]
      break;
 8003fba:	e002      	b.n	8003fc2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	73fb      	strb	r3, [r7, #15]
      break;
 8003fc0:	bf00      	nop
  }

  if (status == HAL_OK)
 8003fc2:	7bfb      	ldrb	r3, [r7, #15]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d149      	bne.n	800405c <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	6839      	ldr	r1, [r7, #0]
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f001 f9bf 	bl	8005354 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a23      	ldr	r2, [pc, #140]	; (8004068 <HAL_TIM_IC_Start_IT+0x278>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d01d      	beq.n	800401c <HAL_TIM_IC_Start_IT+0x22c>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fe8:	d018      	beq.n	800401c <HAL_TIM_IC_Start_IT+0x22c>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a1f      	ldr	r2, [pc, #124]	; (800406c <HAL_TIM_IC_Start_IT+0x27c>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d013      	beq.n	800401c <HAL_TIM_IC_Start_IT+0x22c>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a1d      	ldr	r2, [pc, #116]	; (8004070 <HAL_TIM_IC_Start_IT+0x280>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d00e      	beq.n	800401c <HAL_TIM_IC_Start_IT+0x22c>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a1c      	ldr	r2, [pc, #112]	; (8004074 <HAL_TIM_IC_Start_IT+0x284>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d009      	beq.n	800401c <HAL_TIM_IC_Start_IT+0x22c>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a1a      	ldr	r2, [pc, #104]	; (8004078 <HAL_TIM_IC_Start_IT+0x288>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d004      	beq.n	800401c <HAL_TIM_IC_Start_IT+0x22c>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a19      	ldr	r2, [pc, #100]	; (800407c <HAL_TIM_IC_Start_IT+0x28c>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d115      	bne.n	8004048 <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	689a      	ldr	r2, [r3, #8]
 8004022:	4b17      	ldr	r3, [pc, #92]	; (8004080 <HAL_TIM_IC_Start_IT+0x290>)
 8004024:	4013      	ands	r3, r2
 8004026:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	2b06      	cmp	r3, #6
 800402c:	d015      	beq.n	800405a <HAL_TIM_IC_Start_IT+0x26a>
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004034:	d011      	beq.n	800405a <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f042 0201 	orr.w	r2, r2, #1
 8004044:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004046:	e008      	b.n	800405a <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f042 0201 	orr.w	r2, r2, #1
 8004056:	601a      	str	r2, [r3, #0]
 8004058:	e000      	b.n	800405c <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800405a:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800405c:	7bfb      	ldrb	r3, [r7, #15]
}
 800405e:	4618      	mov	r0, r3
 8004060:	3710      	adds	r7, #16
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	40012c00 	.word	0x40012c00
 800406c:	40000400 	.word	0x40000400
 8004070:	40000800 	.word	0x40000800
 8004074:	40013400 	.word	0x40013400
 8004078:	40014000 	.word	0x40014000
 800407c:	40015000 	.word	0x40015000
 8004080:	00010007 	.word	0x00010007

08004084 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b082      	sub	sp, #8
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	f003 0302 	and.w	r3, r3, #2
 8004096:	2b02      	cmp	r3, #2
 8004098:	d122      	bne.n	80040e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	f003 0302 	and.w	r3, r3, #2
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d11b      	bne.n	80040e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f06f 0202 	mvn.w	r2, #2
 80040b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2201      	movs	r2, #1
 80040b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	699b      	ldr	r3, [r3, #24]
 80040be:	f003 0303 	and.w	r3, r3, #3
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d003      	beq.n	80040ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f7fc f9b6 	bl	8000438 <HAL_TIM_IC_CaptureCallback>
 80040cc:	e005      	b.n	80040da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f000 fbc0 	bl	8004854 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f000 fbc7 	bl	8004868 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	691b      	ldr	r3, [r3, #16]
 80040e6:	f003 0304 	and.w	r3, r3, #4
 80040ea:	2b04      	cmp	r3, #4
 80040ec:	d122      	bne.n	8004134 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	f003 0304 	and.w	r3, r3, #4
 80040f8:	2b04      	cmp	r3, #4
 80040fa:	d11b      	bne.n	8004134 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f06f 0204 	mvn.w	r2, #4
 8004104:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2202      	movs	r2, #2
 800410a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	699b      	ldr	r3, [r3, #24]
 8004112:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004116:	2b00      	cmp	r3, #0
 8004118:	d003      	beq.n	8004122 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f7fc f98c 	bl	8000438 <HAL_TIM_IC_CaptureCallback>
 8004120:	e005      	b.n	800412e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f000 fb96 	bl	8004854 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f000 fb9d 	bl	8004868 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	691b      	ldr	r3, [r3, #16]
 800413a:	f003 0308 	and.w	r3, r3, #8
 800413e:	2b08      	cmp	r3, #8
 8004140:	d122      	bne.n	8004188 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	f003 0308 	and.w	r3, r3, #8
 800414c:	2b08      	cmp	r3, #8
 800414e:	d11b      	bne.n	8004188 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f06f 0208 	mvn.w	r2, #8
 8004158:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2204      	movs	r2, #4
 800415e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	69db      	ldr	r3, [r3, #28]
 8004166:	f003 0303 	and.w	r3, r3, #3
 800416a:	2b00      	cmp	r3, #0
 800416c:	d003      	beq.n	8004176 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f7fc f962 	bl	8000438 <HAL_TIM_IC_CaptureCallback>
 8004174:	e005      	b.n	8004182 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f000 fb6c 	bl	8004854 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f000 fb73 	bl	8004868 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	691b      	ldr	r3, [r3, #16]
 800418e:	f003 0310 	and.w	r3, r3, #16
 8004192:	2b10      	cmp	r3, #16
 8004194:	d122      	bne.n	80041dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	f003 0310 	and.w	r3, r3, #16
 80041a0:	2b10      	cmp	r3, #16
 80041a2:	d11b      	bne.n	80041dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f06f 0210 	mvn.w	r2, #16
 80041ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2208      	movs	r2, #8
 80041b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	69db      	ldr	r3, [r3, #28]
 80041ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d003      	beq.n	80041ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f7fc f938 	bl	8000438 <HAL_TIM_IC_CaptureCallback>
 80041c8:	e005      	b.n	80041d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f000 fb42 	bl	8004854 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f000 fb49 	bl	8004868 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	f003 0301 	and.w	r3, r3, #1
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d10e      	bne.n	8004208 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	f003 0301 	and.w	r3, r3, #1
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d107      	bne.n	8004208 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f06f 0201 	mvn.w	r2, #1
 8004200:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f000 fb1c 	bl	8004840 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004212:	2b80      	cmp	r3, #128	; 0x80
 8004214:	d10e      	bne.n	8004234 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004220:	2b80      	cmp	r3, #128	; 0x80
 8004222:	d107      	bne.n	8004234 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800422c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f001 f9d2 	bl	80055d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	691b      	ldr	r3, [r3, #16]
 800423a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800423e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004242:	d10e      	bne.n	8004262 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800424e:	2b80      	cmp	r3, #128	; 0x80
 8004250:	d107      	bne.n	8004262 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800425a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f001 f9c5 	bl	80055ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	691b      	ldr	r3, [r3, #16]
 8004268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800426c:	2b40      	cmp	r3, #64	; 0x40
 800426e:	d10e      	bne.n	800428e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800427a:	2b40      	cmp	r3, #64	; 0x40
 800427c:	d107      	bne.n	800428e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004286:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f000 faf7 	bl	800487c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	691b      	ldr	r3, [r3, #16]
 8004294:	f003 0320 	and.w	r3, r3, #32
 8004298:	2b20      	cmp	r3, #32
 800429a:	d10e      	bne.n	80042ba <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	f003 0320 	and.w	r3, r3, #32
 80042a6:	2b20      	cmp	r3, #32
 80042a8:	d107      	bne.n	80042ba <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f06f 0220 	mvn.w	r2, #32
 80042b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f001 f985 	bl	80055c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042ba:	bf00      	nop
 80042bc:	3708      	adds	r7, #8
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}

080042c2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80042c2:	b580      	push	{r7, lr}
 80042c4:	b086      	sub	sp, #24
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	60f8      	str	r0, [r7, #12]
 80042ca:	60b9      	str	r1, [r7, #8]
 80042cc:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042ce:	2300      	movs	r3, #0
 80042d0:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d101      	bne.n	80042e0 <HAL_TIM_IC_ConfigChannel+0x1e>
 80042dc:	2302      	movs	r3, #2
 80042de:	e088      	b.n	80043f2 <HAL_TIM_IC_ConfigChannel+0x130>
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d11b      	bne.n	8004326 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80042fe:	f000 fe6b 	bl	8004fd8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	699a      	ldr	r2, [r3, #24]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f022 020c 	bic.w	r2, r2, #12
 8004310:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	6999      	ldr	r1, [r3, #24]
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	689a      	ldr	r2, [r3, #8]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	430a      	orrs	r2, r1
 8004322:	619a      	str	r2, [r3, #24]
 8004324:	e060      	b.n	80043e8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2b04      	cmp	r3, #4
 800432a:	d11c      	bne.n	8004366 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800433c:	f000 fee9 	bl	8005112 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	699a      	ldr	r2, [r3, #24]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800434e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	6999      	ldr	r1, [r3, #24]
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	021a      	lsls	r2, r3, #8
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	430a      	orrs	r2, r1
 8004362:	619a      	str	r2, [r3, #24]
 8004364:	e040      	b.n	80043e8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2b08      	cmp	r3, #8
 800436a:	d11b      	bne.n	80043a4 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800437c:	f000 ff36 	bl	80051ec <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	69da      	ldr	r2, [r3, #28]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f022 020c 	bic.w	r2, r2, #12
 800438e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	69d9      	ldr	r1, [r3, #28]
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	689a      	ldr	r2, [r3, #8]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	430a      	orrs	r2, r1
 80043a0:	61da      	str	r2, [r3, #28]
 80043a2:	e021      	b.n	80043e8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2b0c      	cmp	r3, #12
 80043a8:	d11c      	bne.n	80043e4 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80043ba:	f000 ff53 	bl	8005264 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	69da      	ldr	r2, [r3, #28]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80043cc:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	69d9      	ldr	r1, [r3, #28]
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	021a      	lsls	r2, r3, #8
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	430a      	orrs	r2, r1
 80043e0:	61da      	str	r2, [r3, #28]
 80043e2:	e001      	b.n	80043e8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80043f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3718      	adds	r7, #24
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
	...

080043fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b086      	sub	sp, #24
 8004400:	af00      	add	r7, sp, #0
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004408:	2300      	movs	r3, #0
 800440a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004412:	2b01      	cmp	r3, #1
 8004414:	d101      	bne.n	800441a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004416:	2302      	movs	r3, #2
 8004418:	e0ff      	b.n	800461a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2201      	movs	r2, #1
 800441e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2b14      	cmp	r3, #20
 8004426:	f200 80f0 	bhi.w	800460a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800442a:	a201      	add	r2, pc, #4	; (adr r2, 8004430 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800442c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004430:	08004485 	.word	0x08004485
 8004434:	0800460b 	.word	0x0800460b
 8004438:	0800460b 	.word	0x0800460b
 800443c:	0800460b 	.word	0x0800460b
 8004440:	080044c5 	.word	0x080044c5
 8004444:	0800460b 	.word	0x0800460b
 8004448:	0800460b 	.word	0x0800460b
 800444c:	0800460b 	.word	0x0800460b
 8004450:	08004507 	.word	0x08004507
 8004454:	0800460b 	.word	0x0800460b
 8004458:	0800460b 	.word	0x0800460b
 800445c:	0800460b 	.word	0x0800460b
 8004460:	08004547 	.word	0x08004547
 8004464:	0800460b 	.word	0x0800460b
 8004468:	0800460b 	.word	0x0800460b
 800446c:	0800460b 	.word	0x0800460b
 8004470:	08004589 	.word	0x08004589
 8004474:	0800460b 	.word	0x0800460b
 8004478:	0800460b 	.word	0x0800460b
 800447c:	0800460b 	.word	0x0800460b
 8004480:	080045c9 	.word	0x080045c9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	68b9      	ldr	r1, [r7, #8]
 800448a:	4618      	mov	r0, r3
 800448c:	f000 fa9e 	bl	80049cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	699a      	ldr	r2, [r3, #24]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f042 0208 	orr.w	r2, r2, #8
 800449e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	699a      	ldr	r2, [r3, #24]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f022 0204 	bic.w	r2, r2, #4
 80044ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	6999      	ldr	r1, [r3, #24]
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	691a      	ldr	r2, [r3, #16]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	430a      	orrs	r2, r1
 80044c0:	619a      	str	r2, [r3, #24]
      break;
 80044c2:	e0a5      	b.n	8004610 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68b9      	ldr	r1, [r7, #8]
 80044ca:	4618      	mov	r0, r3
 80044cc:	f000 fb18 	bl	8004b00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	699a      	ldr	r2, [r3, #24]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	699a      	ldr	r2, [r3, #24]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	6999      	ldr	r1, [r3, #24]
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	021a      	lsls	r2, r3, #8
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	430a      	orrs	r2, r1
 8004502:	619a      	str	r2, [r3, #24]
      break;
 8004504:	e084      	b.n	8004610 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	68b9      	ldr	r1, [r7, #8]
 800450c:	4618      	mov	r0, r3
 800450e:	f000 fb8b 	bl	8004c28 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	69da      	ldr	r2, [r3, #28]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f042 0208 	orr.w	r2, r2, #8
 8004520:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	69da      	ldr	r2, [r3, #28]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f022 0204 	bic.w	r2, r2, #4
 8004530:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	69d9      	ldr	r1, [r3, #28]
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	691a      	ldr	r2, [r3, #16]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	430a      	orrs	r2, r1
 8004542:	61da      	str	r2, [r3, #28]
      break;
 8004544:	e064      	b.n	8004610 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	68b9      	ldr	r1, [r7, #8]
 800454c:	4618      	mov	r0, r3
 800454e:	f000 fbfd 	bl	8004d4c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	69da      	ldr	r2, [r3, #28]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004560:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	69da      	ldr	r2, [r3, #28]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004570:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	69d9      	ldr	r1, [r3, #28]
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	691b      	ldr	r3, [r3, #16]
 800457c:	021a      	lsls	r2, r3, #8
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	430a      	orrs	r2, r1
 8004584:	61da      	str	r2, [r3, #28]
      break;
 8004586:	e043      	b.n	8004610 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	68b9      	ldr	r1, [r7, #8]
 800458e:	4618      	mov	r0, r3
 8004590:	f000 fc4c 	bl	8004e2c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f042 0208 	orr.w	r2, r2, #8
 80045a2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f022 0204 	bic.w	r2, r2, #4
 80045b2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	691a      	ldr	r2, [r3, #16]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	430a      	orrs	r2, r1
 80045c4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80045c6:	e023      	b.n	8004610 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	68b9      	ldr	r1, [r7, #8]
 80045ce:	4618      	mov	r0, r3
 80045d0:	f000 fc96 	bl	8004f00 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045e2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045f2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	021a      	lsls	r2, r3, #8
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	430a      	orrs	r2, r1
 8004606:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004608:	e002      	b.n	8004610 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	75fb      	strb	r3, [r7, #23]
      break;
 800460e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2200      	movs	r2, #0
 8004614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004618:	7dfb      	ldrb	r3, [r7, #23]
}
 800461a:	4618      	mov	r0, r3
 800461c:	3718      	adds	r7, #24
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop

08004624 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800462e:	2300      	movs	r3, #0
 8004630:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004638:	2b01      	cmp	r3, #1
 800463a:	d101      	bne.n	8004640 <HAL_TIM_ConfigClockSource+0x1c>
 800463c:	2302      	movs	r3, #2
 800463e:	e0b6      	b.n	80047ae <HAL_TIM_ConfigClockSource+0x18a>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2202      	movs	r2, #2
 800464c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800465e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004662:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800466a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	68ba      	ldr	r2, [r7, #8]
 8004672:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800467c:	d03e      	beq.n	80046fc <HAL_TIM_ConfigClockSource+0xd8>
 800467e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004682:	f200 8087 	bhi.w	8004794 <HAL_TIM_ConfigClockSource+0x170>
 8004686:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800468a:	f000 8086 	beq.w	800479a <HAL_TIM_ConfigClockSource+0x176>
 800468e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004692:	d87f      	bhi.n	8004794 <HAL_TIM_ConfigClockSource+0x170>
 8004694:	2b70      	cmp	r3, #112	; 0x70
 8004696:	d01a      	beq.n	80046ce <HAL_TIM_ConfigClockSource+0xaa>
 8004698:	2b70      	cmp	r3, #112	; 0x70
 800469a:	d87b      	bhi.n	8004794 <HAL_TIM_ConfigClockSource+0x170>
 800469c:	2b60      	cmp	r3, #96	; 0x60
 800469e:	d050      	beq.n	8004742 <HAL_TIM_ConfigClockSource+0x11e>
 80046a0:	2b60      	cmp	r3, #96	; 0x60
 80046a2:	d877      	bhi.n	8004794 <HAL_TIM_ConfigClockSource+0x170>
 80046a4:	2b50      	cmp	r3, #80	; 0x50
 80046a6:	d03c      	beq.n	8004722 <HAL_TIM_ConfigClockSource+0xfe>
 80046a8:	2b50      	cmp	r3, #80	; 0x50
 80046aa:	d873      	bhi.n	8004794 <HAL_TIM_ConfigClockSource+0x170>
 80046ac:	2b40      	cmp	r3, #64	; 0x40
 80046ae:	d058      	beq.n	8004762 <HAL_TIM_ConfigClockSource+0x13e>
 80046b0:	2b40      	cmp	r3, #64	; 0x40
 80046b2:	d86f      	bhi.n	8004794 <HAL_TIM_ConfigClockSource+0x170>
 80046b4:	2b30      	cmp	r3, #48	; 0x30
 80046b6:	d064      	beq.n	8004782 <HAL_TIM_ConfigClockSource+0x15e>
 80046b8:	2b30      	cmp	r3, #48	; 0x30
 80046ba:	d86b      	bhi.n	8004794 <HAL_TIM_ConfigClockSource+0x170>
 80046bc:	2b20      	cmp	r3, #32
 80046be:	d060      	beq.n	8004782 <HAL_TIM_ConfigClockSource+0x15e>
 80046c0:	2b20      	cmp	r3, #32
 80046c2:	d867      	bhi.n	8004794 <HAL_TIM_ConfigClockSource+0x170>
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d05c      	beq.n	8004782 <HAL_TIM_ConfigClockSource+0x15e>
 80046c8:	2b10      	cmp	r3, #16
 80046ca:	d05a      	beq.n	8004782 <HAL_TIM_ConfigClockSource+0x15e>
 80046cc:	e062      	b.n	8004794 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80046de:	f000 fe19 	bl	8005314 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80046f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	68ba      	ldr	r2, [r7, #8]
 80046f8:	609a      	str	r2, [r3, #8]
      break;
 80046fa:	e04f      	b.n	800479c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800470c:	f000 fe02 	bl	8005314 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	689a      	ldr	r2, [r3, #8]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800471e:	609a      	str	r2, [r3, #8]
      break;
 8004720:	e03c      	b.n	800479c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800472e:	461a      	mov	r2, r3
 8004730:	f000 fcc0 	bl	80050b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	2150      	movs	r1, #80	; 0x50
 800473a:	4618      	mov	r0, r3
 800473c:	f000 fdcf 	bl	80052de <TIM_ITRx_SetConfig>
      break;
 8004740:	e02c      	b.n	800479c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800474e:	461a      	mov	r2, r3
 8004750:	f000 fd1c 	bl	800518c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2160      	movs	r1, #96	; 0x60
 800475a:	4618      	mov	r0, r3
 800475c:	f000 fdbf 	bl	80052de <TIM_ITRx_SetConfig>
      break;
 8004760:	e01c      	b.n	800479c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800476e:	461a      	mov	r2, r3
 8004770:	f000 fca0 	bl	80050b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	2140      	movs	r1, #64	; 0x40
 800477a:	4618      	mov	r0, r3
 800477c:	f000 fdaf 	bl	80052de <TIM_ITRx_SetConfig>
      break;
 8004780:	e00c      	b.n	800479c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4619      	mov	r1, r3
 800478c:	4610      	mov	r0, r2
 800478e:	f000 fda6 	bl	80052de <TIM_ITRx_SetConfig>
      break;
 8004792:	e003      	b.n	800479c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	73fb      	strb	r3, [r7, #15]
      break;
 8004798:	e000      	b.n	800479c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800479a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80047ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3710      	adds	r7, #16
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
	...

080047b8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b085      	sub	sp, #20
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80047c2:	2300      	movs	r3, #0
 80047c4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	2b0c      	cmp	r3, #12
 80047ca:	d831      	bhi.n	8004830 <HAL_TIM_ReadCapturedValue+0x78>
 80047cc:	a201      	add	r2, pc, #4	; (adr r2, 80047d4 <HAL_TIM_ReadCapturedValue+0x1c>)
 80047ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047d2:	bf00      	nop
 80047d4:	08004809 	.word	0x08004809
 80047d8:	08004831 	.word	0x08004831
 80047dc:	08004831 	.word	0x08004831
 80047e0:	08004831 	.word	0x08004831
 80047e4:	08004813 	.word	0x08004813
 80047e8:	08004831 	.word	0x08004831
 80047ec:	08004831 	.word	0x08004831
 80047f0:	08004831 	.word	0x08004831
 80047f4:	0800481d 	.word	0x0800481d
 80047f8:	08004831 	.word	0x08004831
 80047fc:	08004831 	.word	0x08004831
 8004800:	08004831 	.word	0x08004831
 8004804:	08004827 	.word	0x08004827
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800480e:	60fb      	str	r3, [r7, #12]

      break;
 8004810:	e00f      	b.n	8004832 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004818:	60fb      	str	r3, [r7, #12]

      break;
 800481a:	e00a      	b.n	8004832 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004822:	60fb      	str	r3, [r7, #12]

      break;
 8004824:	e005      	b.n	8004832 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482c:	60fb      	str	r3, [r7, #12]

      break;
 800482e:	e000      	b.n	8004832 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004830:	bf00      	nop
  }

  return tmpreg;
 8004832:	68fb      	ldr	r3, [r7, #12]
}
 8004834:	4618      	mov	r0, r3
 8004836:	3714      	adds	r7, #20
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004840:	b480      	push	{r7}
 8004842:	b083      	sub	sp, #12
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004848:	bf00      	nop
 800484a:	370c      	adds	r7, #12
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr

08004854 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800485c:	bf00      	nop
 800485e:	370c      	adds	r7, #12
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004870:	bf00      	nop
 8004872:	370c      	adds	r7, #12
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004884:	bf00      	nop
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004890:	b480      	push	{r7}
 8004892:	b085      	sub	sp, #20
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	4a42      	ldr	r2, [pc, #264]	; (80049ac <TIM_Base_SetConfig+0x11c>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d013      	beq.n	80048d0 <TIM_Base_SetConfig+0x40>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ae:	d00f      	beq.n	80048d0 <TIM_Base_SetConfig+0x40>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a3f      	ldr	r2, [pc, #252]	; (80049b0 <TIM_Base_SetConfig+0x120>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d00b      	beq.n	80048d0 <TIM_Base_SetConfig+0x40>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4a3e      	ldr	r2, [pc, #248]	; (80049b4 <TIM_Base_SetConfig+0x124>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d007      	beq.n	80048d0 <TIM_Base_SetConfig+0x40>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	4a3d      	ldr	r2, [pc, #244]	; (80049b8 <TIM_Base_SetConfig+0x128>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d003      	beq.n	80048d0 <TIM_Base_SetConfig+0x40>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	4a3c      	ldr	r2, [pc, #240]	; (80049bc <TIM_Base_SetConfig+0x12c>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d108      	bne.n	80048e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	68fa      	ldr	r2, [r7, #12]
 80048de:	4313      	orrs	r3, r2
 80048e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	4a31      	ldr	r2, [pc, #196]	; (80049ac <TIM_Base_SetConfig+0x11c>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d01f      	beq.n	800492a <TIM_Base_SetConfig+0x9a>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048f0:	d01b      	beq.n	800492a <TIM_Base_SetConfig+0x9a>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	4a2e      	ldr	r2, [pc, #184]	; (80049b0 <TIM_Base_SetConfig+0x120>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d017      	beq.n	800492a <TIM_Base_SetConfig+0x9a>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4a2d      	ldr	r2, [pc, #180]	; (80049b4 <TIM_Base_SetConfig+0x124>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d013      	beq.n	800492a <TIM_Base_SetConfig+0x9a>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4a2c      	ldr	r2, [pc, #176]	; (80049b8 <TIM_Base_SetConfig+0x128>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d00f      	beq.n	800492a <TIM_Base_SetConfig+0x9a>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4a2c      	ldr	r2, [pc, #176]	; (80049c0 <TIM_Base_SetConfig+0x130>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d00b      	beq.n	800492a <TIM_Base_SetConfig+0x9a>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a2b      	ldr	r2, [pc, #172]	; (80049c4 <TIM_Base_SetConfig+0x134>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d007      	beq.n	800492a <TIM_Base_SetConfig+0x9a>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a2a      	ldr	r2, [pc, #168]	; (80049c8 <TIM_Base_SetConfig+0x138>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d003      	beq.n	800492a <TIM_Base_SetConfig+0x9a>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a25      	ldr	r2, [pc, #148]	; (80049bc <TIM_Base_SetConfig+0x12c>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d108      	bne.n	800493c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004930:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	68fa      	ldr	r2, [r7, #12]
 8004938:	4313      	orrs	r3, r2
 800493a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	695b      	ldr	r3, [r3, #20]
 8004946:	4313      	orrs	r3, r2
 8004948:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	68fa      	ldr	r2, [r7, #12]
 800494e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	689a      	ldr	r2, [r3, #8]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	4a12      	ldr	r2, [pc, #72]	; (80049ac <TIM_Base_SetConfig+0x11c>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d013      	beq.n	8004990 <TIM_Base_SetConfig+0x100>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	4a13      	ldr	r2, [pc, #76]	; (80049b8 <TIM_Base_SetConfig+0x128>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d00f      	beq.n	8004990 <TIM_Base_SetConfig+0x100>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4a13      	ldr	r2, [pc, #76]	; (80049c0 <TIM_Base_SetConfig+0x130>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d00b      	beq.n	8004990 <TIM_Base_SetConfig+0x100>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	4a12      	ldr	r2, [pc, #72]	; (80049c4 <TIM_Base_SetConfig+0x134>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d007      	beq.n	8004990 <TIM_Base_SetConfig+0x100>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4a11      	ldr	r2, [pc, #68]	; (80049c8 <TIM_Base_SetConfig+0x138>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d003      	beq.n	8004990 <TIM_Base_SetConfig+0x100>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4a0c      	ldr	r2, [pc, #48]	; (80049bc <TIM_Base_SetConfig+0x12c>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d103      	bne.n	8004998 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	691a      	ldr	r2, [r3, #16]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	615a      	str	r2, [r3, #20]
}
 800499e:	bf00      	nop
 80049a0:	3714      	adds	r7, #20
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr
 80049aa:	bf00      	nop
 80049ac:	40012c00 	.word	0x40012c00
 80049b0:	40000400 	.word	0x40000400
 80049b4:	40000800 	.word	0x40000800
 80049b8:	40013400 	.word	0x40013400
 80049bc:	40015000 	.word	0x40015000
 80049c0:	40014000 	.word	0x40014000
 80049c4:	40014400 	.word	0x40014400
 80049c8:	40014800 	.word	0x40014800

080049cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b087      	sub	sp, #28
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a1b      	ldr	r3, [r3, #32]
 80049da:	f023 0201 	bic.w	r2, r3, #1
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a1b      	ldr	r3, [r3, #32]
 80049e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	699b      	ldr	r3, [r3, #24]
 80049f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f023 0303 	bic.w	r3, r3, #3
 8004a06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68fa      	ldr	r2, [r7, #12]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	f023 0302 	bic.w	r3, r3, #2
 8004a18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	697a      	ldr	r2, [r7, #20]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	4a30      	ldr	r2, [pc, #192]	; (8004ae8 <TIM_OC1_SetConfig+0x11c>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d013      	beq.n	8004a54 <TIM_OC1_SetConfig+0x88>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	4a2f      	ldr	r2, [pc, #188]	; (8004aec <TIM_OC1_SetConfig+0x120>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d00f      	beq.n	8004a54 <TIM_OC1_SetConfig+0x88>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	4a2e      	ldr	r2, [pc, #184]	; (8004af0 <TIM_OC1_SetConfig+0x124>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d00b      	beq.n	8004a54 <TIM_OC1_SetConfig+0x88>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	4a2d      	ldr	r2, [pc, #180]	; (8004af4 <TIM_OC1_SetConfig+0x128>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d007      	beq.n	8004a54 <TIM_OC1_SetConfig+0x88>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4a2c      	ldr	r2, [pc, #176]	; (8004af8 <TIM_OC1_SetConfig+0x12c>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d003      	beq.n	8004a54 <TIM_OC1_SetConfig+0x88>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	4a2b      	ldr	r2, [pc, #172]	; (8004afc <TIM_OC1_SetConfig+0x130>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d10c      	bne.n	8004a6e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	f023 0308 	bic.w	r3, r3, #8
 8004a5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	697a      	ldr	r2, [r7, #20]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	f023 0304 	bic.w	r3, r3, #4
 8004a6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4a1d      	ldr	r2, [pc, #116]	; (8004ae8 <TIM_OC1_SetConfig+0x11c>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d013      	beq.n	8004a9e <TIM_OC1_SetConfig+0xd2>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	4a1c      	ldr	r2, [pc, #112]	; (8004aec <TIM_OC1_SetConfig+0x120>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d00f      	beq.n	8004a9e <TIM_OC1_SetConfig+0xd2>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4a1b      	ldr	r2, [pc, #108]	; (8004af0 <TIM_OC1_SetConfig+0x124>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d00b      	beq.n	8004a9e <TIM_OC1_SetConfig+0xd2>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4a1a      	ldr	r2, [pc, #104]	; (8004af4 <TIM_OC1_SetConfig+0x128>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d007      	beq.n	8004a9e <TIM_OC1_SetConfig+0xd2>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	4a19      	ldr	r2, [pc, #100]	; (8004af8 <TIM_OC1_SetConfig+0x12c>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d003      	beq.n	8004a9e <TIM_OC1_SetConfig+0xd2>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4a18      	ldr	r2, [pc, #96]	; (8004afc <TIM_OC1_SetConfig+0x130>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d111      	bne.n	8004ac2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004aa4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004aac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	695b      	ldr	r3, [r3, #20]
 8004ab2:	693a      	ldr	r2, [r7, #16]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	699b      	ldr	r3, [r3, #24]
 8004abc:	693a      	ldr	r2, [r7, #16]
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	693a      	ldr	r2, [r7, #16]
 8004ac6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	68fa      	ldr	r2, [r7, #12]
 8004acc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	685a      	ldr	r2, [r3, #4]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	697a      	ldr	r2, [r7, #20]
 8004ada:	621a      	str	r2, [r3, #32]
}
 8004adc:	bf00      	nop
 8004ade:	371c      	adds	r7, #28
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr
 8004ae8:	40012c00 	.word	0x40012c00
 8004aec:	40013400 	.word	0x40013400
 8004af0:	40014000 	.word	0x40014000
 8004af4:	40014400 	.word	0x40014400
 8004af8:	40014800 	.word	0x40014800
 8004afc:	40015000 	.word	0x40015000

08004b00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b087      	sub	sp, #28
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a1b      	ldr	r3, [r3, #32]
 8004b0e:	f023 0210 	bic.w	r2, r3, #16
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6a1b      	ldr	r3, [r3, #32]
 8004b1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	699b      	ldr	r3, [r3, #24]
 8004b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	021b      	lsls	r3, r3, #8
 8004b42:	68fa      	ldr	r2, [r7, #12]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	f023 0320 	bic.w	r3, r3, #32
 8004b4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	011b      	lsls	r3, r3, #4
 8004b56:	697a      	ldr	r2, [r7, #20]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	4a2c      	ldr	r2, [pc, #176]	; (8004c10 <TIM_OC2_SetConfig+0x110>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d007      	beq.n	8004b74 <TIM_OC2_SetConfig+0x74>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	4a2b      	ldr	r2, [pc, #172]	; (8004c14 <TIM_OC2_SetConfig+0x114>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d003      	beq.n	8004b74 <TIM_OC2_SetConfig+0x74>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4a2a      	ldr	r2, [pc, #168]	; (8004c18 <TIM_OC2_SetConfig+0x118>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d10d      	bne.n	8004b90 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	011b      	lsls	r3, r3, #4
 8004b82:	697a      	ldr	r2, [r7, #20]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b8e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4a1f      	ldr	r2, [pc, #124]	; (8004c10 <TIM_OC2_SetConfig+0x110>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d013      	beq.n	8004bc0 <TIM_OC2_SetConfig+0xc0>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a1e      	ldr	r2, [pc, #120]	; (8004c14 <TIM_OC2_SetConfig+0x114>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d00f      	beq.n	8004bc0 <TIM_OC2_SetConfig+0xc0>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4a1e      	ldr	r2, [pc, #120]	; (8004c1c <TIM_OC2_SetConfig+0x11c>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d00b      	beq.n	8004bc0 <TIM_OC2_SetConfig+0xc0>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4a1d      	ldr	r2, [pc, #116]	; (8004c20 <TIM_OC2_SetConfig+0x120>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d007      	beq.n	8004bc0 <TIM_OC2_SetConfig+0xc0>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	4a1c      	ldr	r2, [pc, #112]	; (8004c24 <TIM_OC2_SetConfig+0x124>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d003      	beq.n	8004bc0 <TIM_OC2_SetConfig+0xc0>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	4a17      	ldr	r2, [pc, #92]	; (8004c18 <TIM_OC2_SetConfig+0x118>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d113      	bne.n	8004be8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004bc6:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004bce:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	695b      	ldr	r3, [r3, #20]
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	693a      	ldr	r2, [r7, #16]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	699b      	ldr	r3, [r3, #24]
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	693a      	ldr	r2, [r7, #16]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	693a      	ldr	r2, [r7, #16]
 8004bec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	68fa      	ldr	r2, [r7, #12]
 8004bf2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	685a      	ldr	r2, [r3, #4]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	697a      	ldr	r2, [r7, #20]
 8004c00:	621a      	str	r2, [r3, #32]
}
 8004c02:	bf00      	nop
 8004c04:	371c      	adds	r7, #28
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr
 8004c0e:	bf00      	nop
 8004c10:	40012c00 	.word	0x40012c00
 8004c14:	40013400 	.word	0x40013400
 8004c18:	40015000 	.word	0x40015000
 8004c1c:	40014000 	.word	0x40014000
 8004c20:	40014400 	.word	0x40014400
 8004c24:	40014800 	.word	0x40014800

08004c28 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b087      	sub	sp, #28
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a1b      	ldr	r3, [r3, #32]
 8004c36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a1b      	ldr	r3, [r3, #32]
 8004c42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	69db      	ldr	r3, [r3, #28]
 8004c4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f023 0303 	bic.w	r3, r3, #3
 8004c62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	68fa      	ldr	r2, [r7, #12]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	021b      	lsls	r3, r3, #8
 8004c7c:	697a      	ldr	r2, [r7, #20]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4a2b      	ldr	r2, [pc, #172]	; (8004d34 <TIM_OC3_SetConfig+0x10c>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d007      	beq.n	8004c9a <TIM_OC3_SetConfig+0x72>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4a2a      	ldr	r2, [pc, #168]	; (8004d38 <TIM_OC3_SetConfig+0x110>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d003      	beq.n	8004c9a <TIM_OC3_SetConfig+0x72>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a29      	ldr	r2, [pc, #164]	; (8004d3c <TIM_OC3_SetConfig+0x114>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d10d      	bne.n	8004cb6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ca0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	68db      	ldr	r3, [r3, #12]
 8004ca6:	021b      	lsls	r3, r3, #8
 8004ca8:	697a      	ldr	r2, [r7, #20]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004cb4:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4a1e      	ldr	r2, [pc, #120]	; (8004d34 <TIM_OC3_SetConfig+0x10c>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d013      	beq.n	8004ce6 <TIM_OC3_SetConfig+0xbe>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4a1d      	ldr	r2, [pc, #116]	; (8004d38 <TIM_OC3_SetConfig+0x110>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d00f      	beq.n	8004ce6 <TIM_OC3_SetConfig+0xbe>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a1d      	ldr	r2, [pc, #116]	; (8004d40 <TIM_OC3_SetConfig+0x118>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d00b      	beq.n	8004ce6 <TIM_OC3_SetConfig+0xbe>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4a1c      	ldr	r2, [pc, #112]	; (8004d44 <TIM_OC3_SetConfig+0x11c>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d007      	beq.n	8004ce6 <TIM_OC3_SetConfig+0xbe>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4a1b      	ldr	r2, [pc, #108]	; (8004d48 <TIM_OC3_SetConfig+0x120>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d003      	beq.n	8004ce6 <TIM_OC3_SetConfig+0xbe>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4a16      	ldr	r2, [pc, #88]	; (8004d3c <TIM_OC3_SetConfig+0x114>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d113      	bne.n	8004d0e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004cec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004cf4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	695b      	ldr	r3, [r3, #20]
 8004cfa:	011b      	lsls	r3, r3, #4
 8004cfc:	693a      	ldr	r2, [r7, #16]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	699b      	ldr	r3, [r3, #24]
 8004d06:	011b      	lsls	r3, r3, #4
 8004d08:	693a      	ldr	r2, [r7, #16]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	693a      	ldr	r2, [r7, #16]
 8004d12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	685a      	ldr	r2, [r3, #4]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	697a      	ldr	r2, [r7, #20]
 8004d26:	621a      	str	r2, [r3, #32]
}
 8004d28:	bf00      	nop
 8004d2a:	371c      	adds	r7, #28
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr
 8004d34:	40012c00 	.word	0x40012c00
 8004d38:	40013400 	.word	0x40013400
 8004d3c:	40015000 	.word	0x40015000
 8004d40:	40014000 	.word	0x40014000
 8004d44:	40014400 	.word	0x40014400
 8004d48:	40014800 	.word	0x40014800

08004d4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b087      	sub	sp, #28
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a1b      	ldr	r3, [r3, #32]
 8004d5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a1b      	ldr	r3, [r3, #32]
 8004d66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	69db      	ldr	r3, [r3, #28]
 8004d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	021b      	lsls	r3, r3, #8
 8004d8e:	68fa      	ldr	r2, [r7, #12]
 8004d90:	4313      	orrs	r3, r2
 8004d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	031b      	lsls	r3, r3, #12
 8004da2:	693a      	ldr	r2, [r7, #16]
 8004da4:	4313      	orrs	r3, r2
 8004da6:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	4a1a      	ldr	r2, [pc, #104]	; (8004e14 <TIM_OC4_SetConfig+0xc8>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d013      	beq.n	8004dd8 <TIM_OC4_SetConfig+0x8c>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	4a19      	ldr	r2, [pc, #100]	; (8004e18 <TIM_OC4_SetConfig+0xcc>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d00f      	beq.n	8004dd8 <TIM_OC4_SetConfig+0x8c>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4a18      	ldr	r2, [pc, #96]	; (8004e1c <TIM_OC4_SetConfig+0xd0>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d00b      	beq.n	8004dd8 <TIM_OC4_SetConfig+0x8c>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	4a17      	ldr	r2, [pc, #92]	; (8004e20 <TIM_OC4_SetConfig+0xd4>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d007      	beq.n	8004dd8 <TIM_OC4_SetConfig+0x8c>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	4a16      	ldr	r2, [pc, #88]	; (8004e24 <TIM_OC4_SetConfig+0xd8>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d003      	beq.n	8004dd8 <TIM_OC4_SetConfig+0x8c>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4a15      	ldr	r2, [pc, #84]	; (8004e28 <TIM_OC4_SetConfig+0xdc>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d109      	bne.n	8004dec <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004dde:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	695b      	ldr	r3, [r3, #20]
 8004de4:	019b      	lsls	r3, r3, #6
 8004de6:	697a      	ldr	r2, [r7, #20]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	697a      	ldr	r2, [r7, #20]
 8004df0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	68fa      	ldr	r2, [r7, #12]
 8004df6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	685a      	ldr	r2, [r3, #4]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	693a      	ldr	r2, [r7, #16]
 8004e04:	621a      	str	r2, [r3, #32]
}
 8004e06:	bf00      	nop
 8004e08:	371c      	adds	r7, #28
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	40012c00 	.word	0x40012c00
 8004e18:	40013400 	.word	0x40013400
 8004e1c:	40014000 	.word	0x40014000
 8004e20:	40014400 	.word	0x40014400
 8004e24:	40014800 	.word	0x40014800
 8004e28:	40015000 	.word	0x40015000

08004e2c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b087      	sub	sp, #28
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a1b      	ldr	r3, [r3, #32]
 8004e3a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a1b      	ldr	r3, [r3, #32]
 8004e46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68fa      	ldr	r2, [r7, #12]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004e70:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	041b      	lsls	r3, r3, #16
 8004e78:	693a      	ldr	r2, [r7, #16]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a19      	ldr	r2, [pc, #100]	; (8004ee8 <TIM_OC5_SetConfig+0xbc>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d013      	beq.n	8004eae <TIM_OC5_SetConfig+0x82>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a18      	ldr	r2, [pc, #96]	; (8004eec <TIM_OC5_SetConfig+0xc0>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d00f      	beq.n	8004eae <TIM_OC5_SetConfig+0x82>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a17      	ldr	r2, [pc, #92]	; (8004ef0 <TIM_OC5_SetConfig+0xc4>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d00b      	beq.n	8004eae <TIM_OC5_SetConfig+0x82>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a16      	ldr	r2, [pc, #88]	; (8004ef4 <TIM_OC5_SetConfig+0xc8>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d007      	beq.n	8004eae <TIM_OC5_SetConfig+0x82>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4a15      	ldr	r2, [pc, #84]	; (8004ef8 <TIM_OC5_SetConfig+0xcc>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d003      	beq.n	8004eae <TIM_OC5_SetConfig+0x82>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4a14      	ldr	r2, [pc, #80]	; (8004efc <TIM_OC5_SetConfig+0xd0>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d109      	bne.n	8004ec2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004eb4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	695b      	ldr	r3, [r3, #20]
 8004eba:	021b      	lsls	r3, r3, #8
 8004ebc:	697a      	ldr	r2, [r7, #20]
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	697a      	ldr	r2, [r7, #20]
 8004ec6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	68fa      	ldr	r2, [r7, #12]
 8004ecc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	685a      	ldr	r2, [r3, #4]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	693a      	ldr	r2, [r7, #16]
 8004eda:	621a      	str	r2, [r3, #32]
}
 8004edc:	bf00      	nop
 8004ede:	371c      	adds	r7, #28
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr
 8004ee8:	40012c00 	.word	0x40012c00
 8004eec:	40013400 	.word	0x40013400
 8004ef0:	40014000 	.word	0x40014000
 8004ef4:	40014400 	.word	0x40014400
 8004ef8:	40014800 	.word	0x40014800
 8004efc:	40015000 	.word	0x40015000

08004f00 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b087      	sub	sp, #28
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a1b      	ldr	r3, [r3, #32]
 8004f0e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6a1b      	ldr	r3, [r3, #32]
 8004f1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	021b      	lsls	r3, r3, #8
 8004f3a:	68fa      	ldr	r2, [r7, #12]
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004f46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	051b      	lsls	r3, r3, #20
 8004f4e:	693a      	ldr	r2, [r7, #16]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	4a1a      	ldr	r2, [pc, #104]	; (8004fc0 <TIM_OC6_SetConfig+0xc0>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d013      	beq.n	8004f84 <TIM_OC6_SetConfig+0x84>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4a19      	ldr	r2, [pc, #100]	; (8004fc4 <TIM_OC6_SetConfig+0xc4>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d00f      	beq.n	8004f84 <TIM_OC6_SetConfig+0x84>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4a18      	ldr	r2, [pc, #96]	; (8004fc8 <TIM_OC6_SetConfig+0xc8>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d00b      	beq.n	8004f84 <TIM_OC6_SetConfig+0x84>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4a17      	ldr	r2, [pc, #92]	; (8004fcc <TIM_OC6_SetConfig+0xcc>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d007      	beq.n	8004f84 <TIM_OC6_SetConfig+0x84>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4a16      	ldr	r2, [pc, #88]	; (8004fd0 <TIM_OC6_SetConfig+0xd0>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d003      	beq.n	8004f84 <TIM_OC6_SetConfig+0x84>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4a15      	ldr	r2, [pc, #84]	; (8004fd4 <TIM_OC6_SetConfig+0xd4>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d109      	bne.n	8004f98 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f8a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	695b      	ldr	r3, [r3, #20]
 8004f90:	029b      	lsls	r3, r3, #10
 8004f92:	697a      	ldr	r2, [r7, #20]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	697a      	ldr	r2, [r7, #20]
 8004f9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	68fa      	ldr	r2, [r7, #12]
 8004fa2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	685a      	ldr	r2, [r3, #4]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	693a      	ldr	r2, [r7, #16]
 8004fb0:	621a      	str	r2, [r3, #32]
}
 8004fb2:	bf00      	nop
 8004fb4:	371c      	adds	r7, #28
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr
 8004fbe:	bf00      	nop
 8004fc0:	40012c00 	.word	0x40012c00
 8004fc4:	40013400 	.word	0x40013400
 8004fc8:	40014000 	.word	0x40014000
 8004fcc:	40014400 	.word	0x40014400
 8004fd0:	40014800 	.word	0x40014800
 8004fd4:	40015000 	.word	0x40015000

08004fd8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b087      	sub	sp, #28
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	60f8      	str	r0, [r7, #12]
 8004fe0:	60b9      	str	r1, [r7, #8]
 8004fe2:	607a      	str	r2, [r7, #4]
 8004fe4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	6a1b      	ldr	r3, [r3, #32]
 8004fea:	f023 0201 	bic.w	r2, r3, #1
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	699b      	ldr	r3, [r3, #24]
 8004ff6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6a1b      	ldr	r3, [r3, #32]
 8004ffc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	4a26      	ldr	r2, [pc, #152]	; (800509c <TIM_TI1_SetConfig+0xc4>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d017      	beq.n	8005036 <TIM_TI1_SetConfig+0x5e>
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800500c:	d013      	beq.n	8005036 <TIM_TI1_SetConfig+0x5e>
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	4a23      	ldr	r2, [pc, #140]	; (80050a0 <TIM_TI1_SetConfig+0xc8>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d00f      	beq.n	8005036 <TIM_TI1_SetConfig+0x5e>
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	4a22      	ldr	r2, [pc, #136]	; (80050a4 <TIM_TI1_SetConfig+0xcc>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d00b      	beq.n	8005036 <TIM_TI1_SetConfig+0x5e>
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	4a21      	ldr	r2, [pc, #132]	; (80050a8 <TIM_TI1_SetConfig+0xd0>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d007      	beq.n	8005036 <TIM_TI1_SetConfig+0x5e>
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	4a20      	ldr	r2, [pc, #128]	; (80050ac <TIM_TI1_SetConfig+0xd4>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d003      	beq.n	8005036 <TIM_TI1_SetConfig+0x5e>
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	4a1f      	ldr	r2, [pc, #124]	; (80050b0 <TIM_TI1_SetConfig+0xd8>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d101      	bne.n	800503a <TIM_TI1_SetConfig+0x62>
 8005036:	2301      	movs	r3, #1
 8005038:	e000      	b.n	800503c <TIM_TI1_SetConfig+0x64>
 800503a:	2300      	movs	r3, #0
 800503c:	2b00      	cmp	r3, #0
 800503e:	d008      	beq.n	8005052 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	f023 0303 	bic.w	r3, r3, #3
 8005046:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005048:	697a      	ldr	r2, [r7, #20]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4313      	orrs	r3, r2
 800504e:	617b      	str	r3, [r7, #20]
 8005050:	e003      	b.n	800505a <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	f043 0301 	orr.w	r3, r3, #1
 8005058:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005060:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	011b      	lsls	r3, r3, #4
 8005066:	b2db      	uxtb	r3, r3
 8005068:	697a      	ldr	r2, [r7, #20]
 800506a:	4313      	orrs	r3, r2
 800506c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	f023 030a 	bic.w	r3, r3, #10
 8005074:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	f003 030a 	and.w	r3, r3, #10
 800507c:	693a      	ldr	r2, [r7, #16]
 800507e:	4313      	orrs	r3, r2
 8005080:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	697a      	ldr	r2, [r7, #20]
 8005086:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	693a      	ldr	r2, [r7, #16]
 800508c:	621a      	str	r2, [r3, #32]
}
 800508e:	bf00      	nop
 8005090:	371c      	adds	r7, #28
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr
 800509a:	bf00      	nop
 800509c:	40012c00 	.word	0x40012c00
 80050a0:	40000400 	.word	0x40000400
 80050a4:	40000800 	.word	0x40000800
 80050a8:	40013400 	.word	0x40013400
 80050ac:	40014000 	.word	0x40014000
 80050b0:	40015000 	.word	0x40015000

080050b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b087      	sub	sp, #28
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	60f8      	str	r0, [r7, #12]
 80050bc:	60b9      	str	r1, [r7, #8]
 80050be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6a1b      	ldr	r3, [r3, #32]
 80050c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6a1b      	ldr	r3, [r3, #32]
 80050ca:	f023 0201 	bic.w	r2, r3, #1
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	699b      	ldr	r3, [r3, #24]
 80050d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	011b      	lsls	r3, r3, #4
 80050e4:	693a      	ldr	r2, [r7, #16]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	f023 030a 	bic.w	r3, r3, #10
 80050f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050f2:	697a      	ldr	r2, [r7, #20]
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	693a      	ldr	r2, [r7, #16]
 80050fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	697a      	ldr	r2, [r7, #20]
 8005104:	621a      	str	r2, [r3, #32]
}
 8005106:	bf00      	nop
 8005108:	371c      	adds	r7, #28
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr

08005112 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005112:	b480      	push	{r7}
 8005114:	b087      	sub	sp, #28
 8005116:	af00      	add	r7, sp, #0
 8005118:	60f8      	str	r0, [r7, #12]
 800511a:	60b9      	str	r1, [r7, #8]
 800511c:	607a      	str	r2, [r7, #4]
 800511e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6a1b      	ldr	r3, [r3, #32]
 8005124:	f023 0210 	bic.w	r2, r3, #16
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	699b      	ldr	r3, [r3, #24]
 8005130:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	6a1b      	ldr	r3, [r3, #32]
 8005136:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800513e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	021b      	lsls	r3, r3, #8
 8005144:	697a      	ldr	r2, [r7, #20]
 8005146:	4313      	orrs	r3, r2
 8005148:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005150:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	031b      	lsls	r3, r3, #12
 8005156:	b29b      	uxth	r3, r3
 8005158:	697a      	ldr	r2, [r7, #20]
 800515a:	4313      	orrs	r3, r2
 800515c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005164:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	011b      	lsls	r3, r3, #4
 800516a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800516e:	693a      	ldr	r2, [r7, #16]
 8005170:	4313      	orrs	r3, r2
 8005172:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	697a      	ldr	r2, [r7, #20]
 8005178:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	693a      	ldr	r2, [r7, #16]
 800517e:	621a      	str	r2, [r3, #32]
}
 8005180:	bf00      	nop
 8005182:	371c      	adds	r7, #28
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr

0800518c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800518c:	b480      	push	{r7}
 800518e:	b087      	sub	sp, #28
 8005190:	af00      	add	r7, sp, #0
 8005192:	60f8      	str	r0, [r7, #12]
 8005194:	60b9      	str	r1, [r7, #8]
 8005196:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	6a1b      	ldr	r3, [r3, #32]
 800519c:	f023 0210 	bic.w	r2, r3, #16
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	699b      	ldr	r3, [r3, #24]
 80051a8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6a1b      	ldr	r3, [r3, #32]
 80051ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80051b6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	031b      	lsls	r3, r3, #12
 80051bc:	697a      	ldr	r2, [r7, #20]
 80051be:	4313      	orrs	r3, r2
 80051c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80051c8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	011b      	lsls	r3, r3, #4
 80051ce:	693a      	ldr	r2, [r7, #16]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	697a      	ldr	r2, [r7, #20]
 80051d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	693a      	ldr	r2, [r7, #16]
 80051de:	621a      	str	r2, [r3, #32]
}
 80051e0:	bf00      	nop
 80051e2:	371c      	adds	r7, #28
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b087      	sub	sp, #28
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	60b9      	str	r1, [r7, #8]
 80051f6:	607a      	str	r2, [r7, #4]
 80051f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6a1b      	ldr	r3, [r3, #32]
 80051fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	69db      	ldr	r3, [r3, #28]
 800520a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6a1b      	ldr	r3, [r3, #32]
 8005210:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	f023 0303 	bic.w	r3, r3, #3
 8005218:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800521a:	697a      	ldr	r2, [r7, #20]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4313      	orrs	r3, r2
 8005220:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005228:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	011b      	lsls	r3, r3, #4
 800522e:	b2db      	uxtb	r3, r3
 8005230:	697a      	ldr	r2, [r7, #20]
 8005232:	4313      	orrs	r3, r2
 8005234:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800523c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	021b      	lsls	r3, r3, #8
 8005242:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005246:	693a      	ldr	r2, [r7, #16]
 8005248:	4313      	orrs	r3, r2
 800524a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	697a      	ldr	r2, [r7, #20]
 8005250:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	693a      	ldr	r2, [r7, #16]
 8005256:	621a      	str	r2, [r3, #32]
}
 8005258:	bf00      	nop
 800525a:	371c      	adds	r7, #28
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr

08005264 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005264:	b480      	push	{r7}
 8005266:	b087      	sub	sp, #28
 8005268:	af00      	add	r7, sp, #0
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	607a      	str	r2, [r7, #4]
 8005270:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	6a1b      	ldr	r3, [r3, #32]
 8005276:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	69db      	ldr	r3, [r3, #28]
 8005282:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6a1b      	ldr	r3, [r3, #32]
 8005288:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005290:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	021b      	lsls	r3, r3, #8
 8005296:	697a      	ldr	r2, [r7, #20]
 8005298:	4313      	orrs	r3, r2
 800529a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80052a2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	031b      	lsls	r3, r3, #12
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	697a      	ldr	r2, [r7, #20]
 80052ac:	4313      	orrs	r3, r2
 80052ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80052b6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	031b      	lsls	r3, r3, #12
 80052bc:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80052c0:	693a      	ldr	r2, [r7, #16]
 80052c2:	4313      	orrs	r3, r2
 80052c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	697a      	ldr	r2, [r7, #20]
 80052ca:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	693a      	ldr	r2, [r7, #16]
 80052d0:	621a      	str	r2, [r3, #32]
}
 80052d2:	bf00      	nop
 80052d4:	371c      	adds	r7, #28
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr

080052de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052de:	b480      	push	{r7}
 80052e0:	b085      	sub	sp, #20
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	6078      	str	r0, [r7, #4]
 80052e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052f6:	683a      	ldr	r2, [r7, #0]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	f043 0307 	orr.w	r3, r3, #7
 8005300:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	68fa      	ldr	r2, [r7, #12]
 8005306:	609a      	str	r2, [r3, #8]
}
 8005308:	bf00      	nop
 800530a:	3714      	adds	r7, #20
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005314:	b480      	push	{r7}
 8005316:	b087      	sub	sp, #28
 8005318:	af00      	add	r7, sp, #0
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	60b9      	str	r1, [r7, #8]
 800531e:	607a      	str	r2, [r7, #4]
 8005320:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800532e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	021a      	lsls	r2, r3, #8
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	431a      	orrs	r2, r3
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	4313      	orrs	r3, r2
 800533c:	697a      	ldr	r2, [r7, #20]
 800533e:	4313      	orrs	r3, r2
 8005340:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	697a      	ldr	r2, [r7, #20]
 8005346:	609a      	str	r2, [r3, #8]
}
 8005348:	bf00      	nop
 800534a:	371c      	adds	r7, #28
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr

08005354 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005354:	b480      	push	{r7}
 8005356:	b087      	sub	sp, #28
 8005358:	af00      	add	r7, sp, #0
 800535a:	60f8      	str	r0, [r7, #12]
 800535c:	60b9      	str	r1, [r7, #8]
 800535e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	f003 031f 	and.w	r3, r3, #31
 8005366:	2201      	movs	r2, #1
 8005368:	fa02 f303 	lsl.w	r3, r2, r3
 800536c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	6a1a      	ldr	r2, [r3, #32]
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	43db      	mvns	r3, r3
 8005376:	401a      	ands	r2, r3
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	6a1a      	ldr	r2, [r3, #32]
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	f003 031f 	and.w	r3, r3, #31
 8005386:	6879      	ldr	r1, [r7, #4]
 8005388:	fa01 f303 	lsl.w	r3, r1, r3
 800538c:	431a      	orrs	r2, r3
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	621a      	str	r2, [r3, #32]
}
 8005392:	bf00      	nop
 8005394:	371c      	adds	r7, #28
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr
	...

080053a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b085      	sub	sp, #20
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d101      	bne.n	80053b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053b4:	2302      	movs	r3, #2
 80053b6:	e06d      	b.n	8005494 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2202      	movs	r2, #2
 80053c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a30      	ldr	r2, [pc, #192]	; (80054a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d009      	beq.n	80053f6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a2f      	ldr	r2, [pc, #188]	; (80054a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d004      	beq.n	80053f6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a2d      	ldr	r2, [pc, #180]	; (80054a8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d108      	bne.n	8005408 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80053fc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	68fa      	ldr	r2, [r7, #12]
 8005404:	4313      	orrs	r3, r2
 8005406:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800540e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	68fa      	ldr	r2, [r7, #12]
 8005416:	4313      	orrs	r3, r2
 8005418:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	68fa      	ldr	r2, [r7, #12]
 8005420:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a1e      	ldr	r2, [pc, #120]	; (80054a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d01d      	beq.n	8005468 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005434:	d018      	beq.n	8005468 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a1c      	ldr	r2, [pc, #112]	; (80054ac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d013      	beq.n	8005468 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a1a      	ldr	r2, [pc, #104]	; (80054b0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d00e      	beq.n	8005468 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a15      	ldr	r2, [pc, #84]	; (80054a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d009      	beq.n	8005468 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a16      	ldr	r2, [pc, #88]	; (80054b4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d004      	beq.n	8005468 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a11      	ldr	r2, [pc, #68]	; (80054a8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d10c      	bne.n	8005482 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800546e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	68ba      	ldr	r2, [r7, #8]
 8005476:	4313      	orrs	r3, r2
 8005478:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	68ba      	ldr	r2, [r7, #8]
 8005480:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2201      	movs	r2, #1
 8005486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005492:	2300      	movs	r3, #0
}
 8005494:	4618      	mov	r0, r3
 8005496:	3714      	adds	r7, #20
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr
 80054a0:	40012c00 	.word	0x40012c00
 80054a4:	40013400 	.word	0x40013400
 80054a8:	40015000 	.word	0x40015000
 80054ac:	40000400 	.word	0x40000400
 80054b0:	40000800 	.word	0x40000800
 80054b4:	40014000 	.word	0x40014000

080054b8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b085      	sub	sp, #20
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80054c2:	2300      	movs	r3, #0
 80054c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d101      	bne.n	80054d4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80054d0:	2302      	movs	r3, #2
 80054d2:	e06a      	b.n	80055aa <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	4313      	orrs	r3, r2
 80054e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	4313      	orrs	r3, r2
 8005504:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4313      	orrs	r3, r2
 8005512:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	691b      	ldr	r3, [r3, #16]
 800551e:	4313      	orrs	r3, r2
 8005520:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	695b      	ldr	r3, [r3, #20]
 800552c:	4313      	orrs	r3, r2
 800552e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800553a:	4313      	orrs	r3, r2
 800553c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	699b      	ldr	r3, [r3, #24]
 8005548:	041b      	lsls	r3, r3, #16
 800554a:	4313      	orrs	r3, r2
 800554c:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a19      	ldr	r2, [pc, #100]	; (80055b8 <HAL_TIMEx_ConfigBreakDeadTime+0x100>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d009      	beq.n	800556c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a17      	ldr	r2, [pc, #92]	; (80055bc <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d004      	beq.n	800556c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a16      	ldr	r2, [pc, #88]	; (80055c0 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d115      	bne.n	8005598 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005576:	051b      	lsls	r3, r3, #20
 8005578:	4313      	orrs	r3, r2
 800557a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	69db      	ldr	r3, [r3, #28]
 8005586:	4313      	orrs	r3, r2
 8005588:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	6a1b      	ldr	r3, [r3, #32]
 8005594:	4313      	orrs	r3, r2
 8005596:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	68fa      	ldr	r2, [r7, #12]
 800559e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2200      	movs	r2, #0
 80055a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055a8:	2300      	movs	r3, #0
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3714      	adds	r7, #20
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr
 80055b6:	bf00      	nop
 80055b8:	40012c00 	.word	0x40012c00
 80055bc:	40013400 	.word	0x40013400
 80055c0:	40015000 	.word	0x40015000

080055c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b083      	sub	sp, #12
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80055cc:	bf00      	nop
 80055ce:	370c      	adds	r7, #12
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr

080055d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80055d8:	b480      	push	{r7}
 80055da:	b083      	sub	sp, #12
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80055e0:	bf00      	nop
 80055e2:	370c      	adds	r7, #12
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr

080055ec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b083      	sub	sp, #12
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80055f4:	bf00      	nop
 80055f6:	370c      	adds	r7, #12
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr

08005600 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b082      	sub	sp, #8
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d101      	bne.n	8005612 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e040      	b.n	8005694 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005616:	2b00      	cmp	r3, #0
 8005618:	d106      	bne.n	8005628 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f7fc f906 	bl	8001834 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2224      	movs	r2, #36	; 0x24
 800562c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f022 0201 	bic.w	r2, r2, #1
 800563c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f000 f980 	bl	8005944 <UART_SetConfig>
 8005644:	4603      	mov	r3, r0
 8005646:	2b01      	cmp	r3, #1
 8005648:	d101      	bne.n	800564e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e022      	b.n	8005694 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005652:	2b00      	cmp	r3, #0
 8005654:	d002      	beq.n	800565c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 fb48 	bl	8005cec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	685a      	ldr	r2, [r3, #4]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800566a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	689a      	ldr	r2, [r3, #8]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800567a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f042 0201 	orr.w	r2, r2, #1
 800568a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f000 fbcf 	bl	8005e30 <UART_CheckIdleState>
 8005692:	4603      	mov	r3, r0
}
 8005694:	4618      	mov	r0, r3
 8005696:	3708      	adds	r7, #8
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}

0800569c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b08a      	sub	sp, #40	; 0x28
 80056a0:	af02      	add	r7, sp, #8
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	60b9      	str	r1, [r7, #8]
 80056a6:	603b      	str	r3, [r7, #0]
 80056a8:	4613      	mov	r3, r2
 80056aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056b0:	2b20      	cmp	r3, #32
 80056b2:	d178      	bne.n	80057a6 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d002      	beq.n	80056c0 <HAL_UART_Transmit+0x24>
 80056ba:	88fb      	ldrh	r3, [r7, #6]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d101      	bne.n	80056c4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	e071      	b.n	80057a8 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2221      	movs	r2, #33	; 0x21
 80056d0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80056d2:	f7fc f9a9 	bl	8001a28 <HAL_GetTick>
 80056d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	88fa      	ldrh	r2, [r7, #6]
 80056dc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	88fa      	ldrh	r2, [r7, #6]
 80056e4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056f0:	d108      	bne.n	8005704 <HAL_UART_Transmit+0x68>
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	691b      	ldr	r3, [r3, #16]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d104      	bne.n	8005704 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80056fa:	2300      	movs	r3, #0
 80056fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	61bb      	str	r3, [r7, #24]
 8005702:	e003      	b.n	800570c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005708:	2300      	movs	r3, #0
 800570a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800570c:	e030      	b.n	8005770 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	9300      	str	r3, [sp, #0]
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	2200      	movs	r2, #0
 8005716:	2180      	movs	r1, #128	; 0x80
 8005718:	68f8      	ldr	r0, [r7, #12]
 800571a:	f000 fc31 	bl	8005f80 <UART_WaitOnFlagUntilTimeout>
 800571e:	4603      	mov	r3, r0
 8005720:	2b00      	cmp	r3, #0
 8005722:	d004      	beq.n	800572e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2220      	movs	r2, #32
 8005728:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800572a:	2303      	movs	r3, #3
 800572c:	e03c      	b.n	80057a8 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800572e:	69fb      	ldr	r3, [r7, #28]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d10b      	bne.n	800574c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005734:	69bb      	ldr	r3, [r7, #24]
 8005736:	881a      	ldrh	r2, [r3, #0]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005740:	b292      	uxth	r2, r2
 8005742:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005744:	69bb      	ldr	r3, [r7, #24]
 8005746:	3302      	adds	r3, #2
 8005748:	61bb      	str	r3, [r7, #24]
 800574a:	e008      	b.n	800575e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	781a      	ldrb	r2, [r3, #0]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	b292      	uxth	r2, r2
 8005756:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005758:	69fb      	ldr	r3, [r7, #28]
 800575a:	3301      	adds	r3, #1
 800575c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005764:	b29b      	uxth	r3, r3
 8005766:	3b01      	subs	r3, #1
 8005768:	b29a      	uxth	r2, r3
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005776:	b29b      	uxth	r3, r3
 8005778:	2b00      	cmp	r3, #0
 800577a:	d1c8      	bne.n	800570e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	9300      	str	r3, [sp, #0]
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	2200      	movs	r2, #0
 8005784:	2140      	movs	r1, #64	; 0x40
 8005786:	68f8      	ldr	r0, [r7, #12]
 8005788:	f000 fbfa 	bl	8005f80 <UART_WaitOnFlagUntilTimeout>
 800578c:	4603      	mov	r3, r0
 800578e:	2b00      	cmp	r3, #0
 8005790:	d004      	beq.n	800579c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2220      	movs	r2, #32
 8005796:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8005798:	2303      	movs	r3, #3
 800579a:	e005      	b.n	80057a8 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2220      	movs	r2, #32
 80057a0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80057a2:	2300      	movs	r3, #0
 80057a4:	e000      	b.n	80057a8 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80057a6:	2302      	movs	r3, #2
  }
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3720      	adds	r7, #32
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}

080057b0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b08a      	sub	sp, #40	; 0x28
 80057b4:	af02      	add	r7, sp, #8
 80057b6:	60f8      	str	r0, [r7, #12]
 80057b8:	60b9      	str	r1, [r7, #8]
 80057ba:	603b      	str	r3, [r7, #0]
 80057bc:	4613      	mov	r3, r2
 80057be:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057c6:	2b20      	cmp	r3, #32
 80057c8:	f040 80b6 	bne.w	8005938 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d002      	beq.n	80057d8 <HAL_UART_Receive+0x28>
 80057d2:	88fb      	ldrh	r3, [r7, #6]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d101      	bne.n	80057dc <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80057d8:	2301      	movs	r3, #1
 80057da:	e0ae      	b.n	800593a <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2200      	movs	r2, #0
 80057e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2222      	movs	r2, #34	; 0x22
 80057e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2200      	movs	r2, #0
 80057f0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80057f2:	f7fc f919 	bl	8001a28 <HAL_GetTick>
 80057f6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	88fa      	ldrh	r2, [r7, #6]
 80057fc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	88fa      	ldrh	r2, [r7, #6]
 8005804:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005810:	d10e      	bne.n	8005830 <HAL_UART_Receive+0x80>
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	691b      	ldr	r3, [r3, #16]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d105      	bne.n	8005826 <HAL_UART_Receive+0x76>
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005820:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005824:	e02d      	b.n	8005882 <HAL_UART_Receive+0xd2>
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	22ff      	movs	r2, #255	; 0xff
 800582a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800582e:	e028      	b.n	8005882 <HAL_UART_Receive+0xd2>
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d10d      	bne.n	8005854 <HAL_UART_Receive+0xa4>
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	691b      	ldr	r3, [r3, #16]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d104      	bne.n	800584a <HAL_UART_Receive+0x9a>
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	22ff      	movs	r2, #255	; 0xff
 8005844:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005848:	e01b      	b.n	8005882 <HAL_UART_Receive+0xd2>
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	227f      	movs	r2, #127	; 0x7f
 800584e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005852:	e016      	b.n	8005882 <HAL_UART_Receive+0xd2>
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800585c:	d10d      	bne.n	800587a <HAL_UART_Receive+0xca>
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	691b      	ldr	r3, [r3, #16]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d104      	bne.n	8005870 <HAL_UART_Receive+0xc0>
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	227f      	movs	r2, #127	; 0x7f
 800586a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800586e:	e008      	b.n	8005882 <HAL_UART_Receive+0xd2>
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	223f      	movs	r2, #63	; 0x3f
 8005874:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005878:	e003      	b.n	8005882 <HAL_UART_Receive+0xd2>
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2200      	movs	r2, #0
 800587e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005888:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005892:	d108      	bne.n	80058a6 <HAL_UART_Receive+0xf6>
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	691b      	ldr	r3, [r3, #16]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d104      	bne.n	80058a6 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800589c:	2300      	movs	r3, #0
 800589e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	61bb      	str	r3, [r7, #24]
 80058a4:	e003      	b.n	80058ae <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80058aa:	2300      	movs	r3, #0
 80058ac:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80058ae:	e037      	b.n	8005920 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	9300      	str	r3, [sp, #0]
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	2200      	movs	r2, #0
 80058b8:	2120      	movs	r1, #32
 80058ba:	68f8      	ldr	r0, [r7, #12]
 80058bc:	f000 fb60 	bl	8005f80 <UART_WaitOnFlagUntilTimeout>
 80058c0:	4603      	mov	r3, r0
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d005      	beq.n	80058d2 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2220      	movs	r2, #32
 80058ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80058ce:	2303      	movs	r3, #3
 80058d0:	e033      	b.n	800593a <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d10c      	bne.n	80058f2 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80058de:	b29a      	uxth	r2, r3
 80058e0:	8a7b      	ldrh	r3, [r7, #18]
 80058e2:	4013      	ands	r3, r2
 80058e4:	b29a      	uxth	r2, r3
 80058e6:	69bb      	ldr	r3, [r7, #24]
 80058e8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	3302      	adds	r3, #2
 80058ee:	61bb      	str	r3, [r7, #24]
 80058f0:	e00d      	b.n	800590e <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	b2da      	uxtb	r2, r3
 80058fc:	8a7b      	ldrh	r3, [r7, #18]
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	4013      	ands	r3, r2
 8005902:	b2da      	uxtb	r2, r3
 8005904:	69fb      	ldr	r3, [r7, #28]
 8005906:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005908:	69fb      	ldr	r3, [r7, #28]
 800590a:	3301      	adds	r3, #1
 800590c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005914:	b29b      	uxth	r3, r3
 8005916:	3b01      	subs	r3, #1
 8005918:	b29a      	uxth	r2, r3
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005926:	b29b      	uxth	r3, r3
 8005928:	2b00      	cmp	r3, #0
 800592a:	d1c1      	bne.n	80058b0 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2220      	movs	r2, #32
 8005930:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8005934:	2300      	movs	r3, #0
 8005936:	e000      	b.n	800593a <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8005938:	2302      	movs	r3, #2
  }
}
 800593a:	4618      	mov	r0, r3
 800593c:	3720      	adds	r7, #32
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}
	...

08005944 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b088      	sub	sp, #32
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800594c:	2300      	movs	r3, #0
 800594e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	689a      	ldr	r2, [r3, #8]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	691b      	ldr	r3, [r3, #16]
 8005958:	431a      	orrs	r2, r3
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	695b      	ldr	r3, [r3, #20]
 800595e:	431a      	orrs	r2, r3
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	69db      	ldr	r3, [r3, #28]
 8005964:	4313      	orrs	r3, r2
 8005966:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	4b92      	ldr	r3, [pc, #584]	; (8005bb8 <UART_SetConfig+0x274>)
 8005970:	4013      	ands	r3, r2
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	6812      	ldr	r2, [r2, #0]
 8005976:	6979      	ldr	r1, [r7, #20]
 8005978:	430b      	orrs	r3, r1
 800597a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	68da      	ldr	r2, [r3, #12]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	430a      	orrs	r2, r1
 8005990:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	699b      	ldr	r3, [r3, #24]
 8005996:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6a1b      	ldr	r3, [r3, #32]
 800599c:	697a      	ldr	r2, [r7, #20]
 800599e:	4313      	orrs	r3, r2
 80059a0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	697a      	ldr	r2, [r7, #20]
 80059b2:	430a      	orrs	r2, r1
 80059b4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a80      	ldr	r2, [pc, #512]	; (8005bbc <UART_SetConfig+0x278>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d120      	bne.n	8005a02 <UART_SetConfig+0xbe>
 80059c0:	4b7f      	ldr	r3, [pc, #508]	; (8005bc0 <UART_SetConfig+0x27c>)
 80059c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059c4:	f003 0303 	and.w	r3, r3, #3
 80059c8:	2b03      	cmp	r3, #3
 80059ca:	d817      	bhi.n	80059fc <UART_SetConfig+0xb8>
 80059cc:	a201      	add	r2, pc, #4	; (adr r2, 80059d4 <UART_SetConfig+0x90>)
 80059ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059d2:	bf00      	nop
 80059d4:	080059e5 	.word	0x080059e5
 80059d8:	080059f1 	.word	0x080059f1
 80059dc:	080059f7 	.word	0x080059f7
 80059e0:	080059eb 	.word	0x080059eb
 80059e4:	2301      	movs	r3, #1
 80059e6:	77fb      	strb	r3, [r7, #31]
 80059e8:	e0b5      	b.n	8005b56 <UART_SetConfig+0x212>
 80059ea:	2302      	movs	r3, #2
 80059ec:	77fb      	strb	r3, [r7, #31]
 80059ee:	e0b2      	b.n	8005b56 <UART_SetConfig+0x212>
 80059f0:	2304      	movs	r3, #4
 80059f2:	77fb      	strb	r3, [r7, #31]
 80059f4:	e0af      	b.n	8005b56 <UART_SetConfig+0x212>
 80059f6:	2308      	movs	r3, #8
 80059f8:	77fb      	strb	r3, [r7, #31]
 80059fa:	e0ac      	b.n	8005b56 <UART_SetConfig+0x212>
 80059fc:	2310      	movs	r3, #16
 80059fe:	77fb      	strb	r3, [r7, #31]
 8005a00:	e0a9      	b.n	8005b56 <UART_SetConfig+0x212>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a6f      	ldr	r2, [pc, #444]	; (8005bc4 <UART_SetConfig+0x280>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d124      	bne.n	8005a56 <UART_SetConfig+0x112>
 8005a0c:	4b6c      	ldr	r3, [pc, #432]	; (8005bc0 <UART_SetConfig+0x27c>)
 8005a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005a14:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005a18:	d011      	beq.n	8005a3e <UART_SetConfig+0xfa>
 8005a1a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005a1e:	d817      	bhi.n	8005a50 <UART_SetConfig+0x10c>
 8005a20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a24:	d011      	beq.n	8005a4a <UART_SetConfig+0x106>
 8005a26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a2a:	d811      	bhi.n	8005a50 <UART_SetConfig+0x10c>
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d003      	beq.n	8005a38 <UART_SetConfig+0xf4>
 8005a30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a34:	d006      	beq.n	8005a44 <UART_SetConfig+0x100>
 8005a36:	e00b      	b.n	8005a50 <UART_SetConfig+0x10c>
 8005a38:	2300      	movs	r3, #0
 8005a3a:	77fb      	strb	r3, [r7, #31]
 8005a3c:	e08b      	b.n	8005b56 <UART_SetConfig+0x212>
 8005a3e:	2302      	movs	r3, #2
 8005a40:	77fb      	strb	r3, [r7, #31]
 8005a42:	e088      	b.n	8005b56 <UART_SetConfig+0x212>
 8005a44:	2304      	movs	r3, #4
 8005a46:	77fb      	strb	r3, [r7, #31]
 8005a48:	e085      	b.n	8005b56 <UART_SetConfig+0x212>
 8005a4a:	2308      	movs	r3, #8
 8005a4c:	77fb      	strb	r3, [r7, #31]
 8005a4e:	e082      	b.n	8005b56 <UART_SetConfig+0x212>
 8005a50:	2310      	movs	r3, #16
 8005a52:	77fb      	strb	r3, [r7, #31]
 8005a54:	e07f      	b.n	8005b56 <UART_SetConfig+0x212>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a5b      	ldr	r2, [pc, #364]	; (8005bc8 <UART_SetConfig+0x284>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d124      	bne.n	8005aaa <UART_SetConfig+0x166>
 8005a60:	4b57      	ldr	r3, [pc, #348]	; (8005bc0 <UART_SetConfig+0x27c>)
 8005a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a64:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005a68:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005a6c:	d011      	beq.n	8005a92 <UART_SetConfig+0x14e>
 8005a6e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005a72:	d817      	bhi.n	8005aa4 <UART_SetConfig+0x160>
 8005a74:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005a78:	d011      	beq.n	8005a9e <UART_SetConfig+0x15a>
 8005a7a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005a7e:	d811      	bhi.n	8005aa4 <UART_SetConfig+0x160>
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d003      	beq.n	8005a8c <UART_SetConfig+0x148>
 8005a84:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005a88:	d006      	beq.n	8005a98 <UART_SetConfig+0x154>
 8005a8a:	e00b      	b.n	8005aa4 <UART_SetConfig+0x160>
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	77fb      	strb	r3, [r7, #31]
 8005a90:	e061      	b.n	8005b56 <UART_SetConfig+0x212>
 8005a92:	2302      	movs	r3, #2
 8005a94:	77fb      	strb	r3, [r7, #31]
 8005a96:	e05e      	b.n	8005b56 <UART_SetConfig+0x212>
 8005a98:	2304      	movs	r3, #4
 8005a9a:	77fb      	strb	r3, [r7, #31]
 8005a9c:	e05b      	b.n	8005b56 <UART_SetConfig+0x212>
 8005a9e:	2308      	movs	r3, #8
 8005aa0:	77fb      	strb	r3, [r7, #31]
 8005aa2:	e058      	b.n	8005b56 <UART_SetConfig+0x212>
 8005aa4:	2310      	movs	r3, #16
 8005aa6:	77fb      	strb	r3, [r7, #31]
 8005aa8:	e055      	b.n	8005b56 <UART_SetConfig+0x212>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a47      	ldr	r2, [pc, #284]	; (8005bcc <UART_SetConfig+0x288>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d124      	bne.n	8005afe <UART_SetConfig+0x1ba>
 8005ab4:	4b42      	ldr	r3, [pc, #264]	; (8005bc0 <UART_SetConfig+0x27c>)
 8005ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ab8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005abc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005ac0:	d011      	beq.n	8005ae6 <UART_SetConfig+0x1a2>
 8005ac2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005ac6:	d817      	bhi.n	8005af8 <UART_SetConfig+0x1b4>
 8005ac8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005acc:	d011      	beq.n	8005af2 <UART_SetConfig+0x1ae>
 8005ace:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ad2:	d811      	bhi.n	8005af8 <UART_SetConfig+0x1b4>
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d003      	beq.n	8005ae0 <UART_SetConfig+0x19c>
 8005ad8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005adc:	d006      	beq.n	8005aec <UART_SetConfig+0x1a8>
 8005ade:	e00b      	b.n	8005af8 <UART_SetConfig+0x1b4>
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	77fb      	strb	r3, [r7, #31]
 8005ae4:	e037      	b.n	8005b56 <UART_SetConfig+0x212>
 8005ae6:	2302      	movs	r3, #2
 8005ae8:	77fb      	strb	r3, [r7, #31]
 8005aea:	e034      	b.n	8005b56 <UART_SetConfig+0x212>
 8005aec:	2304      	movs	r3, #4
 8005aee:	77fb      	strb	r3, [r7, #31]
 8005af0:	e031      	b.n	8005b56 <UART_SetConfig+0x212>
 8005af2:	2308      	movs	r3, #8
 8005af4:	77fb      	strb	r3, [r7, #31]
 8005af6:	e02e      	b.n	8005b56 <UART_SetConfig+0x212>
 8005af8:	2310      	movs	r3, #16
 8005afa:	77fb      	strb	r3, [r7, #31]
 8005afc:	e02b      	b.n	8005b56 <UART_SetConfig+0x212>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a33      	ldr	r2, [pc, #204]	; (8005bd0 <UART_SetConfig+0x28c>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d124      	bne.n	8005b52 <UART_SetConfig+0x20e>
 8005b08:	4b2d      	ldr	r3, [pc, #180]	; (8005bc0 <UART_SetConfig+0x27c>)
 8005b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b0c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005b10:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005b14:	d011      	beq.n	8005b3a <UART_SetConfig+0x1f6>
 8005b16:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005b1a:	d817      	bhi.n	8005b4c <UART_SetConfig+0x208>
 8005b1c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005b20:	d011      	beq.n	8005b46 <UART_SetConfig+0x202>
 8005b22:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005b26:	d811      	bhi.n	8005b4c <UART_SetConfig+0x208>
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d003      	beq.n	8005b34 <UART_SetConfig+0x1f0>
 8005b2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b30:	d006      	beq.n	8005b40 <UART_SetConfig+0x1fc>
 8005b32:	e00b      	b.n	8005b4c <UART_SetConfig+0x208>
 8005b34:	2300      	movs	r3, #0
 8005b36:	77fb      	strb	r3, [r7, #31]
 8005b38:	e00d      	b.n	8005b56 <UART_SetConfig+0x212>
 8005b3a:	2302      	movs	r3, #2
 8005b3c:	77fb      	strb	r3, [r7, #31]
 8005b3e:	e00a      	b.n	8005b56 <UART_SetConfig+0x212>
 8005b40:	2304      	movs	r3, #4
 8005b42:	77fb      	strb	r3, [r7, #31]
 8005b44:	e007      	b.n	8005b56 <UART_SetConfig+0x212>
 8005b46:	2308      	movs	r3, #8
 8005b48:	77fb      	strb	r3, [r7, #31]
 8005b4a:	e004      	b.n	8005b56 <UART_SetConfig+0x212>
 8005b4c:	2310      	movs	r3, #16
 8005b4e:	77fb      	strb	r3, [r7, #31]
 8005b50:	e001      	b.n	8005b56 <UART_SetConfig+0x212>
 8005b52:	2310      	movs	r3, #16
 8005b54:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	69db      	ldr	r3, [r3, #28]
 8005b5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b5e:	d16b      	bne.n	8005c38 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8005b60:	7ffb      	ldrb	r3, [r7, #31]
 8005b62:	2b08      	cmp	r3, #8
 8005b64:	d838      	bhi.n	8005bd8 <UART_SetConfig+0x294>
 8005b66:	a201      	add	r2, pc, #4	; (adr r2, 8005b6c <UART_SetConfig+0x228>)
 8005b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b6c:	08005b91 	.word	0x08005b91
 8005b70:	08005b99 	.word	0x08005b99
 8005b74:	08005ba1 	.word	0x08005ba1
 8005b78:	08005bd9 	.word	0x08005bd9
 8005b7c:	08005ba7 	.word	0x08005ba7
 8005b80:	08005bd9 	.word	0x08005bd9
 8005b84:	08005bd9 	.word	0x08005bd9
 8005b88:	08005bd9 	.word	0x08005bd9
 8005b8c:	08005baf 	.word	0x08005baf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b90:	f7fd fca6 	bl	80034e0 <HAL_RCC_GetPCLK1Freq>
 8005b94:	61b8      	str	r0, [r7, #24]
        break;
 8005b96:	e024      	b.n	8005be2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b98:	f7fd fcc4 	bl	8003524 <HAL_RCC_GetPCLK2Freq>
 8005b9c:	61b8      	str	r0, [r7, #24]
        break;
 8005b9e:	e020      	b.n	8005be2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ba0:	4b0c      	ldr	r3, [pc, #48]	; (8005bd4 <UART_SetConfig+0x290>)
 8005ba2:	61bb      	str	r3, [r7, #24]
        break;
 8005ba4:	e01d      	b.n	8005be2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ba6:	f7fd fc25 	bl	80033f4 <HAL_RCC_GetSysClockFreq>
 8005baa:	61b8      	str	r0, [r7, #24]
        break;
 8005bac:	e019      	b.n	8005be2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bb2:	61bb      	str	r3, [r7, #24]
        break;
 8005bb4:	e015      	b.n	8005be2 <UART_SetConfig+0x29e>
 8005bb6:	bf00      	nop
 8005bb8:	efff69f3 	.word	0xefff69f3
 8005bbc:	40013800 	.word	0x40013800
 8005bc0:	40021000 	.word	0x40021000
 8005bc4:	40004400 	.word	0x40004400
 8005bc8:	40004800 	.word	0x40004800
 8005bcc:	40004c00 	.word	0x40004c00
 8005bd0:	40005000 	.word	0x40005000
 8005bd4:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	77bb      	strb	r3, [r7, #30]
        break;
 8005be0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005be2:	69bb      	ldr	r3, [r7, #24]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d073      	beq.n	8005cd0 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005be8:	69bb      	ldr	r3, [r7, #24]
 8005bea:	005a      	lsls	r2, r3, #1
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	085b      	lsrs	r3, r3, #1
 8005bf2:	441a      	add	r2, r3
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bfc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	2b0f      	cmp	r3, #15
 8005c02:	d916      	bls.n	8005c32 <UART_SetConfig+0x2ee>
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c0a:	d212      	bcs.n	8005c32 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	f023 030f 	bic.w	r3, r3, #15
 8005c14:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	085b      	lsrs	r3, r3, #1
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	f003 0307 	and.w	r3, r3, #7
 8005c20:	b29a      	uxth	r2, r3
 8005c22:	89fb      	ldrh	r3, [r7, #14]
 8005c24:	4313      	orrs	r3, r2
 8005c26:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	89fa      	ldrh	r2, [r7, #14]
 8005c2e:	60da      	str	r2, [r3, #12]
 8005c30:	e04e      	b.n	8005cd0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	77bb      	strb	r3, [r7, #30]
 8005c36:	e04b      	b.n	8005cd0 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005c38:	7ffb      	ldrb	r3, [r7, #31]
 8005c3a:	2b08      	cmp	r3, #8
 8005c3c:	d827      	bhi.n	8005c8e <UART_SetConfig+0x34a>
 8005c3e:	a201      	add	r2, pc, #4	; (adr r2, 8005c44 <UART_SetConfig+0x300>)
 8005c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c44:	08005c69 	.word	0x08005c69
 8005c48:	08005c71 	.word	0x08005c71
 8005c4c:	08005c79 	.word	0x08005c79
 8005c50:	08005c8f 	.word	0x08005c8f
 8005c54:	08005c7f 	.word	0x08005c7f
 8005c58:	08005c8f 	.word	0x08005c8f
 8005c5c:	08005c8f 	.word	0x08005c8f
 8005c60:	08005c8f 	.word	0x08005c8f
 8005c64:	08005c87 	.word	0x08005c87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c68:	f7fd fc3a 	bl	80034e0 <HAL_RCC_GetPCLK1Freq>
 8005c6c:	61b8      	str	r0, [r7, #24]
        break;
 8005c6e:	e013      	b.n	8005c98 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c70:	f7fd fc58 	bl	8003524 <HAL_RCC_GetPCLK2Freq>
 8005c74:	61b8      	str	r0, [r7, #24]
        break;
 8005c76:	e00f      	b.n	8005c98 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c78:	4b1b      	ldr	r3, [pc, #108]	; (8005ce8 <UART_SetConfig+0x3a4>)
 8005c7a:	61bb      	str	r3, [r7, #24]
        break;
 8005c7c:	e00c      	b.n	8005c98 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c7e:	f7fd fbb9 	bl	80033f4 <HAL_RCC_GetSysClockFreq>
 8005c82:	61b8      	str	r0, [r7, #24]
        break;
 8005c84:	e008      	b.n	8005c98 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c8a:	61bb      	str	r3, [r7, #24]
        break;
 8005c8c:	e004      	b.n	8005c98 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	77bb      	strb	r3, [r7, #30]
        break;
 8005c96:	bf00      	nop
    }

    if (pclk != 0U)
 8005c98:	69bb      	ldr	r3, [r7, #24]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d018      	beq.n	8005cd0 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	085a      	lsrs	r2, r3, #1
 8005ca4:	69bb      	ldr	r3, [r7, #24]
 8005ca6:	441a      	add	r2, r3
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cb0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	2b0f      	cmp	r3, #15
 8005cb6:	d909      	bls.n	8005ccc <UART_SetConfig+0x388>
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cbe:	d205      	bcs.n	8005ccc <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	b29a      	uxth	r2, r3
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	60da      	str	r2, [r3, #12]
 8005cca:	e001      	b.n	8005cd0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005cdc:	7fbb      	ldrb	r3, [r7, #30]
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3720      	adds	r7, #32
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}
 8005ce6:	bf00      	nop
 8005ce8:	007a1200 	.word	0x007a1200

08005cec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b083      	sub	sp, #12
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf8:	f003 0301 	and.w	r3, r3, #1
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d00a      	beq.n	8005d16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	430a      	orrs	r2, r1
 8005d14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d1a:	f003 0302 	and.w	r3, r3, #2
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d00a      	beq.n	8005d38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	430a      	orrs	r2, r1
 8005d36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d3c:	f003 0304 	and.w	r3, r3, #4
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d00a      	beq.n	8005d5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	430a      	orrs	r2, r1
 8005d58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5e:	f003 0308 	and.w	r3, r3, #8
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d00a      	beq.n	8005d7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	430a      	orrs	r2, r1
 8005d7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d80:	f003 0310 	and.w	r3, r3, #16
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d00a      	beq.n	8005d9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	430a      	orrs	r2, r1
 8005d9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da2:	f003 0320 	and.w	r3, r3, #32
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d00a      	beq.n	8005dc0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	430a      	orrs	r2, r1
 8005dbe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d01a      	beq.n	8005e02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	430a      	orrs	r2, r1
 8005de0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005dea:	d10a      	bne.n	8005e02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	430a      	orrs	r2, r1
 8005e00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d00a      	beq.n	8005e24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	430a      	orrs	r2, r1
 8005e22:	605a      	str	r2, [r3, #4]
  }
}
 8005e24:	bf00      	nop
 8005e26:	370c      	adds	r7, #12
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b098      	sub	sp, #96	; 0x60
 8005e34:	af02      	add	r7, sp, #8
 8005e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e40:	f7fb fdf2 	bl	8001a28 <HAL_GetTick>
 8005e44:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f003 0308 	and.w	r3, r3, #8
 8005e50:	2b08      	cmp	r3, #8
 8005e52:	d12e      	bne.n	8005eb2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e58:	9300      	str	r3, [sp, #0]
 8005e5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f000 f88c 	bl	8005f80 <UART_WaitOnFlagUntilTimeout>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d021      	beq.n	8005eb2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e76:	e853 3f00 	ldrex	r3, [r3]
 8005e7a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005e7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e82:	653b      	str	r3, [r7, #80]	; 0x50
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	461a      	mov	r2, r3
 8005e8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e8c:	647b      	str	r3, [r7, #68]	; 0x44
 8005e8e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e90:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005e92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e94:	e841 2300 	strex	r3, r2, [r1]
 8005e98:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005e9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d1e6      	bne.n	8005e6e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2220      	movs	r2, #32
 8005ea4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005eae:	2303      	movs	r3, #3
 8005eb0:	e062      	b.n	8005f78 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f003 0304 	and.w	r3, r3, #4
 8005ebc:	2b04      	cmp	r3, #4
 8005ebe:	d149      	bne.n	8005f54 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ec0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ec4:	9300      	str	r3, [sp, #0]
 8005ec6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ec8:	2200      	movs	r2, #0
 8005eca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f000 f856 	bl	8005f80 <UART_WaitOnFlagUntilTimeout>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d03c      	beq.n	8005f54 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee2:	e853 3f00 	ldrex	r3, [r3]
 8005ee6:	623b      	str	r3, [r7, #32]
   return(result);
 8005ee8:	6a3b      	ldr	r3, [r7, #32]
 8005eea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005eee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	461a      	mov	r2, r3
 8005ef6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ef8:	633b      	str	r3, [r7, #48]	; 0x30
 8005efa:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005efc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005efe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f00:	e841 2300 	strex	r3, r2, [r1]
 8005f04:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d1e6      	bne.n	8005eda <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	3308      	adds	r3, #8
 8005f12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	e853 3f00 	ldrex	r3, [r3]
 8005f1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f023 0301 	bic.w	r3, r3, #1
 8005f22:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	3308      	adds	r3, #8
 8005f2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f2c:	61fa      	str	r2, [r7, #28]
 8005f2e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f30:	69b9      	ldr	r1, [r7, #24]
 8005f32:	69fa      	ldr	r2, [r7, #28]
 8005f34:	e841 2300 	strex	r3, r2, [r1]
 8005f38:	617b      	str	r3, [r7, #20]
   return(result);
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d1e5      	bne.n	8005f0c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2220      	movs	r2, #32
 8005f44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f50:	2303      	movs	r3, #3
 8005f52:	e011      	b.n	8005f78 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2220      	movs	r2, #32
 8005f58:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2220      	movs	r2, #32
 8005f5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2200      	movs	r2, #0
 8005f66:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2200      	movs	r2, #0
 8005f72:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005f76:	2300      	movs	r3, #0
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3758      	adds	r7, #88	; 0x58
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b084      	sub	sp, #16
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	603b      	str	r3, [r7, #0]
 8005f8c:	4613      	mov	r3, r2
 8005f8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f90:	e049      	b.n	8006026 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f92:	69bb      	ldr	r3, [r7, #24]
 8005f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f98:	d045      	beq.n	8006026 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f9a:	f7fb fd45 	bl	8001a28 <HAL_GetTick>
 8005f9e:	4602      	mov	r2, r0
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	1ad3      	subs	r3, r2, r3
 8005fa4:	69ba      	ldr	r2, [r7, #24]
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d302      	bcc.n	8005fb0 <UART_WaitOnFlagUntilTimeout+0x30>
 8005faa:	69bb      	ldr	r3, [r7, #24]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d101      	bne.n	8005fb4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005fb0:	2303      	movs	r3, #3
 8005fb2:	e048      	b.n	8006046 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f003 0304 	and.w	r3, r3, #4
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d031      	beq.n	8006026 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	69db      	ldr	r3, [r3, #28]
 8005fc8:	f003 0308 	and.w	r3, r3, #8
 8005fcc:	2b08      	cmp	r3, #8
 8005fce:	d110      	bne.n	8005ff2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	2208      	movs	r2, #8
 8005fd6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005fd8:	68f8      	ldr	r0, [r7, #12]
 8005fda:	f000 f838 	bl	800604e <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2208      	movs	r2, #8
 8005fe2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e029      	b.n	8006046 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	69db      	ldr	r3, [r3, #28]
 8005ff8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ffc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006000:	d111      	bne.n	8006026 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800600a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800600c:	68f8      	ldr	r0, [r7, #12]
 800600e:	f000 f81e 	bl	800604e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2220      	movs	r2, #32
 8006016:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2200      	movs	r2, #0
 800601e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006022:	2303      	movs	r3, #3
 8006024:	e00f      	b.n	8006046 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	69da      	ldr	r2, [r3, #28]
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	4013      	ands	r3, r2
 8006030:	68ba      	ldr	r2, [r7, #8]
 8006032:	429a      	cmp	r2, r3
 8006034:	bf0c      	ite	eq
 8006036:	2301      	moveq	r3, #1
 8006038:	2300      	movne	r3, #0
 800603a:	b2db      	uxtb	r3, r3
 800603c:	461a      	mov	r2, r3
 800603e:	79fb      	ldrb	r3, [r7, #7]
 8006040:	429a      	cmp	r2, r3
 8006042:	d0a6      	beq.n	8005f92 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006044:	2300      	movs	r3, #0
}
 8006046:	4618      	mov	r0, r3
 8006048:	3710      	adds	r7, #16
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}

0800604e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800604e:	b480      	push	{r7}
 8006050:	b095      	sub	sp, #84	; 0x54
 8006052:	af00      	add	r7, sp, #0
 8006054:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800605c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800605e:	e853 3f00 	ldrex	r3, [r3]
 8006062:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006066:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800606a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	461a      	mov	r2, r3
 8006072:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006074:	643b      	str	r3, [r7, #64]	; 0x40
 8006076:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006078:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800607a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800607c:	e841 2300 	strex	r3, r2, [r1]
 8006080:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006084:	2b00      	cmp	r3, #0
 8006086:	d1e6      	bne.n	8006056 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	3308      	adds	r3, #8
 800608e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006090:	6a3b      	ldr	r3, [r7, #32]
 8006092:	e853 3f00 	ldrex	r3, [r3]
 8006096:	61fb      	str	r3, [r7, #28]
   return(result);
 8006098:	69fb      	ldr	r3, [r7, #28]
 800609a:	f023 0301 	bic.w	r3, r3, #1
 800609e:	64bb      	str	r3, [r7, #72]	; 0x48
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	3308      	adds	r3, #8
 80060a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060a8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80060aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80060ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060b0:	e841 2300 	strex	r3, r2, [r1]
 80060b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80060b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d1e5      	bne.n	8006088 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d118      	bne.n	80060f6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	e853 3f00 	ldrex	r3, [r3]
 80060d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	f023 0310 	bic.w	r3, r3, #16
 80060d8:	647b      	str	r3, [r7, #68]	; 0x44
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	461a      	mov	r2, r3
 80060e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060e2:	61bb      	str	r3, [r7, #24]
 80060e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060e6:	6979      	ldr	r1, [r7, #20]
 80060e8:	69ba      	ldr	r2, [r7, #24]
 80060ea:	e841 2300 	strex	r3, r2, [r1]
 80060ee:	613b      	str	r3, [r7, #16]
   return(result);
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d1e6      	bne.n	80060c4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2220      	movs	r2, #32
 80060fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2200      	movs	r2, #0
 8006102:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	669a      	str	r2, [r3, #104]	; 0x68
}
 800610a:	bf00      	nop
 800610c:	3754      	adds	r7, #84	; 0x54
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr

08006116 <memset>:
 8006116:	4402      	add	r2, r0
 8006118:	4603      	mov	r3, r0
 800611a:	4293      	cmp	r3, r2
 800611c:	d100      	bne.n	8006120 <memset+0xa>
 800611e:	4770      	bx	lr
 8006120:	f803 1b01 	strb.w	r1, [r3], #1
 8006124:	e7f9      	b.n	800611a <memset+0x4>
	...

08006128 <__libc_init_array>:
 8006128:	b570      	push	{r4, r5, r6, lr}
 800612a:	4d0d      	ldr	r5, [pc, #52]	; (8006160 <__libc_init_array+0x38>)
 800612c:	4c0d      	ldr	r4, [pc, #52]	; (8006164 <__libc_init_array+0x3c>)
 800612e:	1b64      	subs	r4, r4, r5
 8006130:	10a4      	asrs	r4, r4, #2
 8006132:	2600      	movs	r6, #0
 8006134:	42a6      	cmp	r6, r4
 8006136:	d109      	bne.n	800614c <__libc_init_array+0x24>
 8006138:	4d0b      	ldr	r5, [pc, #44]	; (8006168 <__libc_init_array+0x40>)
 800613a:	4c0c      	ldr	r4, [pc, #48]	; (800616c <__libc_init_array+0x44>)
 800613c:	f000 f818 	bl	8006170 <_init>
 8006140:	1b64      	subs	r4, r4, r5
 8006142:	10a4      	asrs	r4, r4, #2
 8006144:	2600      	movs	r6, #0
 8006146:	42a6      	cmp	r6, r4
 8006148:	d105      	bne.n	8006156 <__libc_init_array+0x2e>
 800614a:	bd70      	pop	{r4, r5, r6, pc}
 800614c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006150:	4798      	blx	r3
 8006152:	3601      	adds	r6, #1
 8006154:	e7ee      	b.n	8006134 <__libc_init_array+0xc>
 8006156:	f855 3b04 	ldr.w	r3, [r5], #4
 800615a:	4798      	blx	r3
 800615c:	3601      	adds	r6, #1
 800615e:	e7f2      	b.n	8006146 <__libc_init_array+0x1e>
 8006160:	080061c0 	.word	0x080061c0
 8006164:	080061c0 	.word	0x080061c0
 8006168:	080061c0 	.word	0x080061c0
 800616c:	080061c4 	.word	0x080061c4

08006170 <_init>:
 8006170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006172:	bf00      	nop
 8006174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006176:	bc08      	pop	{r3}
 8006178:	469e      	mov	lr, r3
 800617a:	4770      	bx	lr

0800617c <_fini>:
 800617c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800617e:	bf00      	nop
 8006180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006182:	bc08      	pop	{r3}
 8006184:	469e      	mov	lr, r3
 8006186:	4770      	bx	lr
